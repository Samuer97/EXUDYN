
+++++++++++++++++++++++++++++++++++++++++++
+++++        EXUDYN TEST SUITE        +++++
+++++++++++++++++++++++++++++++++++++++++++
EXUDYN version      = 1.10.0
EXUDYN build date   = 2025-07-09 18:25:37
architecture        = 64bit
processor           = x86
platform            = darwin
Python version      = 3.12.10
NumPy version       = 2.3.1
test tolerance      = 3e-11
testsuite date (now)= 2025-07-09 18:25:53
+++++++++++++++++++++++++++++++++++++++++++


******************************************
  START TESTMODEL 0 ("abaqusImportTest.py"):
******************************************
u-tip for C3D4 =  [-1.39347559e-05 -8.82980001e-05  9.93821996e-07] , nNodes= 214
u-tip for C3D10 =  [-1.71922325e-05 -1.04097141e-04  6.59659428e-08] , nNodes= 257
u-tip for C3D8 =  [-1.70918395e-05 -1.03190186e-04 -3.91019711e-09] , nNodes= 176
u-tip for C3D20 =  [-1.72036326e-05 -1.04325934e-04  1.00487433e-08] , nNodes= 171
u-tip for C3D20R =  [-1.72590204e-05 -1.04848917e-04  5.46592212e-09] , nNodes= 171
solution of abaqusImportTest= 0.0005885208722206947
refsol= 0.0005885208722206333
tol= 3e-11
******************************************
  TESTMODEL 0 ("abaqusImportTest.py") FINISHED SUCCESSFUL
  RESULT = 0.0005885208722206947
  ERROR = 6.136584296267955e-17
******************************************


******************************************
  START TESTMODEL 1 ("ANCFBeamTest.py"):
******************************************
case= 0 CantileverLinear2011
ne= 8 , ux= 1.8706537785462274e-07 , uy= 0.0008068839288072372
ne= 8 , ux= 0.1490416214846182 , uy= 0.7068152604035128
ne= 8 , u= [np.float64(-0.00010900977084160601), np.float64(-0.00019021008794183717), np.float64(-0.018117327798000914)]
ne= 8 , beta= 45.0 , u= [-0.0142313 -0.0088751  0.1085444]
ne= 8 , beta= 45.0 , u= [-0.0299886 -0.0153356  0.1557702]
Solution of ANCFBeam3Dtest= 1.010486312300445
refsol= 1.010486312300459
tol= 3e-11
******************************************
  TESTMODEL 1 ("ANCFBeamTest.py") FINISHED SUCCESSFUL
  RESULT = 1.010486312300445
  ERROR = -1.3988810110276972e-14
******************************************


******************************************
  START TESTMODEL 2 ("ANCFcable2DuserFunction.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 0.5s, timeToGo = 0s, Nit/step = 5.8
Solver terminated successfully after 0.168292 seconds.
ANCFcable2DuserFunction test tip pos= [ 1.66562358 -1.06406475  0.        ]
solution of ANCFcable2DuserFunction test = 0.6015588367721918
refsol= 0.6015588367721232
tol= 3e-11
******************************************
  TESTMODEL 2 ("ANCFcable2DuserFunction.py") FINISHED SUCCESSFUL
  RESULT = 0.6015588367721918
  ERROR = 6.861178292183467e-14
******************************************


******************************************
  START TESTMODEL 3 ("ANCFcontactCircleTest.py"):
******************************************
load f=0.012937500000000003
EI=0.01725
tip displacement: x=-0.10207143792176661, y=-0.4842698420787613
refsol= -0.4842698420787613
tol= 3e-11
******************************************
  TESTMODEL 3 ("ANCFcontactCircleTest.py") FINISHED SUCCESSFUL
  RESULT = -0.4842698420787613
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 4 ("ANCFcontactFrictionTest.py"):
******************************************
load f=129.37500000000003
EI=172.50000000000003
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP300, t = 0.15s, timeToGo = 0s, Nit/step = 3.21333
Solver terminated successfully after 0.223577 seconds.
Solver iteration statistics:
total number of steps:        300
total number of Newton iterations: 964
total number of Newton Jacobians:  964
tip displacement: y=-0.014187561328096003
test result= -0.014187561328096003
refsol= -0.014187561328096003
tol= 3e-11
******************************************
  TESTMODEL 4 ("ANCFcontactFrictionTest.py") FINISHED SUCCESSFUL
  RESULT = -0.014187561328096003
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 5 ("ANCFgeneralContactCircle.py"):
******************************************
exudyn version= 1.10.0
pre-stretch force= -80.0
beam mass per length= 0.004
auto computed searchTree box={[-0.5,-0.5,-0.5], [2.5,0.5,0.5]}
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
  Solve steps: adaptive increase to step size = 0.0005 due to fast convergence, time = 0.00725
  Solve steps: adaptive increase to step size = 0.001 due to fast convergence, time = 0.01825
STEP130, t = 0.1s, timeToGo = 0s, Nit/step = 8.20769
Solver terminated successfully after 0.186688 seconds.
Solver iteration statistics:
total number of steps:        130
total number of Newton iterations: 1067
total number of Newton Jacobians:  118
rejected modified Newton steps:      6
node0 pos:  [-0.09227833 -0.48937593  0.        ]
ANCFgeneralContactCircle sol= -0.5816542531657561
refsol= -0.5816542531620952
tol= 3e-11
******************************************
  TESTMODEL 5 ("ANCFgeneralContactCircle.py") FINISHED SUCCESSFUL
  RESULT = -0.5816542531657561
  ERROR = -3.660960423701454e-12
******************************************


******************************************
  START TESTMODEL 6 ("ANCFmovingRigidBodyTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
STEP2, factor = 1, timeToGo = 0s, Nit/step = 14
Solver terminated successfully after 0.0137674 seconds.
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP200, t = 0.1s, timeToGo = 0s, Nit/step = 1.16
Solver terminated successfully after 0.160392 seconds.
static deflection  = -0.06446474690615722
dynamic deflection = -0.06446622244374729
ANCFmovingRigidBodyTest= -0.1289309693499045
refsol= -0.12893096934983617
tol= 3e-11
******************************************
  TESTMODEL 6 ("ANCFmovingRigidBodyTest.py") FINISHED SUCCESSFUL
  RESULT = -0.1289309693499045
  ERROR = -6.833422716567839e-14
******************************************


******************************************
  START TESTMODEL 7 ("ANCFslidingAndALEjointTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
WARNING: JointALEMoving2D: sliding coordinate < 0; further warnings suppressed!

Python WARNING [file '/private/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/cibw-run-oz0i9d0f/cp312-macosx_universal2/venv-test-x86_64/lib/python3.12/site-packages/exudyn/solver.py', line 174]: 
WARNING: SlidingJoint2D: sliding coordinate < 0; further warnings suppressed!


STEP10, factor = 1, timeToGo = 0s, Nit/step = 4.7
Solver terminated successfully after 0.100165 seconds.
select cable coordinate 42
static solution of cable1 = -2.1973218891272532
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP400, t = 0.8s, timeToGo = 0s, Nit/step = 4.9925
Solver terminated successfully after 0.731434 seconds.
Solver iteration statistics:
total number of steps:        400
total number of Newton iterations: 1997
total number of Newton Jacobians:  1997
dynamic solution of cable1 = -2.2290865056280147
result of ANCFslidingAndALEjointTest= -4.426408394755268
refsol= -4.426408394755261
tol= 3e-11
******************************************
  TESTMODEL 7 ("ANCFslidingAndALEjointTest.py") FINISHED SUCCESSFUL
  RESULT = -4.426408394755268
  ERROR = -7.105427357601002e-15
******************************************


******************************************
  START TESTMODEL 8 ("ballBearingTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration

Python WARNING [file '/private/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/cibw-run-oz0i9d0f/cp312-macosx_universal2/venv-test-x86_64/lib/python3.12/site-packages/exudyn/solver.py', line 260]: 
Generalized alpha: initial accelerations due to initial velocities can only be computed in dense matrix mode!

  Newton (time/load step #2): convergence failed after 25 iterations; relative error = 0.0132784, time = 0.0002
  Solve steps: adaptive reduction to step size = 5e-05, time = 0.0001
  Newton (time/load step #2): convergence failed after 25 iterations; relative error = 2.33194, time = 0.00015
  Solve steps: adaptive reduction to step size = 2.5e-05, time = 0.0001
  Newton (time/load step #2): convergence failed after 25 iterations; relative error = 1.65221, time = 0.000125
  Solve steps: adaptive reduction to step size = 1.25e-05, time = 0.0001
  Newton (time/load step #3): convergence failed after 25 iterations; relative error = 1.02912, time = 0.000125
  Solve steps: adaptive reduction to step size = 6.25e-06, time = 0.0001125
  Newton (time/load step #3): convergence failed after 25 iterations; relative error = 0.859008, time = 0.00011875
  Solve steps: adaptive reduction to step size = 3.125e-06, time = 0.0001125
  Newton (time/load step #3): convergence failed after 25 iterations; relative error = 4.22342, time = 0.000115625
  Solve steps: adaptive reduction to step size = 1.5625e-06, time = 0.0001125
  Newton (time/load step #4): convergence failed after 25 iterations; relative error = 3.63388, time = 0.000115625
  Solve steps: adaptive reduction to step size = 7.8125e-07, time = 0.000114063
  Newton (time/load step #5): convergence failed after 25 iterations; relative error = 1.07419, time = 0.000115625
  Solve steps: adaptive reduction to step size = 3.90625e-07, time = 0.000114844
STEP573, t = 0.05s, timeToGo = 0s, Nit/step = 5.33508
Solver terminated successfully after 0.609486 seconds.
====================
CPU-time statistics:
  total time   = 0.609 seconds
  measured time= 0.605 seconds (=99.3%) 
  non-zero timer [__ sub-timer]:
  factorization     = 21.1%
  newtonIncrement   = 3.52%
  integrationFormula= 0.148%
  ODE2RHS           = 29.6%
  ODE1RHS           = 0.0312%
  AERHS             = 0.577%
  totalJacobian     = 38%
  __jacobianODE2    = 37.6%
  __jacobianODE1    = 0.0204%
  __jacobianAE      = 0.218%
  massMatrix        = 3.67%
  reactionForces    = 1.06%
  postNewton    = 1.36%
  Python          = 0.0042%
  writeSolution     = 0.876%
  overhead          = 0.0196%
  visualization/user= 0.028%
Solver iteration statistics:
total number of steps:        573
total number of Newton iterations: 3057
total number of Newton Jacobians:  531
rejected modified Newton steps:      9
solution of ballBearingTest= 0.037852414029099536
refsol= 0.037852414023965573
tol= 3e-11
******************************************
  TESTMODEL 8 ("ballBearingTest.py") FINISHED SUCCESSFUL
  RESULT = 0.037852414029099536
  ERROR = 5.133962699410688e-12
******************************************


******************************************
  START TESTMODEL 9 ("bricardMechanism.py"):
******************************************
dof {'degreeOfFreedom': np.int64(1), 'redundantConstraints': np.int64(1), 'nODE2': 35, 'nODE1': 0, 'nAE': 36, 'nPureAE': np.int64(1)}
eigenvalues= [0.]
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 6.298
Solver terminated successfully after 0.123655 seconds.
====================
CPU-time statistics:
  total time   = 0.124 seconds
  measured time= 0.12 seconds (=96.8%) 
  non-zero timer [__ sub-timer]:
  factorization     = 1.44%
  newtonIncrement   = 11.4%
  integrationFormula= 0.713%
  ODE2RHS           = 20.4%
  ODE1RHS           = 0.297%
  AERHS             = 8.67%
  totalJacobian     = 0.337%
  __jacobianODE2    = 0.173%
  __jacobianODE1    = 0.00344%
  __jacobianAE      = 0.112%
  massMatrix        = 14%
  reactionForces    = 42.5%
  Python          = 0.000904%
  overhead          = 0.0969%
  visualization/user= 0.0683%
Solver iteration statistics:
total number of steps:        1000
total number of Newton iterations: 6298
total number of Newton Jacobians:  16
solution of bricardMechanism test= 4.172189649306508
refsol= 4.172189649307425
tol= 3e-11
******************************************
  TESTMODEL 9 ("bricardMechanism.py") FINISHED SUCCESSFUL
  RESULT = 4.172189649306508
  ERROR = -9.174883075502294e-13
******************************************


******************************************
  START TESTMODEL 10 ("carRollingDiscTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP250, t = 0.5s, timeToGo = 0s, Nit/step = 2.336
Solver terminated successfully after 0.0868843 seconds.
carRollingDiscTest u= -0.2394004871711386
refsol= -0.23940048717113782
tol= 3e-11
******************************************
  TESTMODEL 10 ("carRollingDiscTest.py") FINISHED SUCCESSFUL
  RESULT = -0.2394004871711386
  ERROR = -7.771561172376096e-16
******************************************


******************************************
  START TESTMODEL 11 ("compareAbaqusAnsysRotorEigenfrequencies.py"):
******************************************
natural frequencies from Ansys model, sparse= False : 104.63701055079281
natural frequencies from Abaqus model, sparse= False : 104.63701326063959
natural frequencies from Ansys model, sparse= True : 104.63701055079063
natural frequencies from Abaqus model, sparse= True : 104.63701326062663
error of compareAbaqusAnsysRotorEigenfrequencies (due to sparse solver)= 7.133849067031405e-18
solution of compareAbaqusAnsysRotorEigenfrequencies (with treshold)= 0
refsol= 0.0004185480476228555
tol= 3e-11
******************************************
  TESTMODEL 11 ("compareAbaqusAnsysRotorEigenfrequencies.py") FINISHED SUCCESSFUL
  RESULT = 0.00041854804762284965
  ERROR = -5.854691731421724e-18
******************************************


******************************************
  START TESTMODEL 12 ("compareFullModifiedNewton.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 2s, timeToGo = 0s, Nit/step = 6.13
Solver terminated successfully after 0.00170087 seconds.
Solver iteration statistics:
total number of steps:        100
total number of Newton iterations: 613
total number of Newton Jacobians:  49
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 2s, timeToGo = 0s, Nit/step = 2.78
Solver terminated successfully after 0.0012825 seconds.
Solver iteration statistics:
total number of steps:        100
total number of Newton iterations: 278
total number of Newton Jacobians:  278
compareFullModifiedNewton u= 0.00020079676000188396
refsol= 0.00020079676000188396
tol= 3e-11
******************************************
  TESTMODEL 12 ("compareFullModifiedNewton.py") FINISHED SUCCESSFUL
  RESULT = 0.00020079676000188396
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 13 ("complexEigenvaluesTest.py"):
******************************************
dRel = 0.05 , decay= 0.7301153801794058
resonance frequency = 50.0
static displacement = 0.02
MSD analytical eigenvalues: (-2.5+49.937460888595446j)
MSD complex eigenvalues: [-2.5-49.93746089j -2.5+49.93746089j]
MSD numerical eigenfrequency in Hz: 7.947793745878157
numerical damping dRel           : 0.04999999999999998
*********************

numerical eigenfrequency (in Hz) : 12.327934783008315
numerical eigenfrequency damped  : 12.305725604590139
numerical damping dRel           : 0.05999850003749908
numerical eigenfrequency GE      : 12.327934783008315
analytical eigenfrequency (in Hz): 12.327934783008317
error eigenvalues: 0.0400465912833908 
*********************

numerical eigenvalues in Hz: [ 38.81173295  38.81173295 123.126052   123.126052   128.4712102
 128.4712102 ]
numerical eigenvalues GE: [ 38.81173295 123.126052   128.4712102 ]
result of computeODE2AEeigenvaluesTest2: 0.4281639207875265
refsol= 0.42816392078752413
tol= 3e-11
******************************************
  TESTMODEL 13 ("complexEigenvaluesTest.py") FINISHED SUCCESSFUL
  RESULT = 0.4281639207875265
  ERROR = 2.3869795029440866e-15
******************************************


******************************************
  START TESTMODEL 14 ("computeODE2AEeigenvaluesTest.py"):
******************************************
numerical eigenvalues in Hz: 12.327934783008315
analytical eigenvalues in Hz: 12.327934783008317
error eigenvalues: 1.44092004919479e-16
numerical eigenvalues in Hz: [ 38.81173295 123.126052   128.4712102 ]
result of computeODE2AEeigenvaluesTest: 0.38811732950413586
refsol= 0.38811732950413347
tol= 3e-11
******************************************
  TESTMODEL 14 ("computeODE2AEeigenvaluesTest.py") FINISHED SUCCESSFUL
  RESULT = 0.38811732950413586
  ERROR = 2.3869795029440866e-15
******************************************


******************************************
  START TESTMODEL 15 ("computeODE2EigenvaluesTest.py"):
******************************************
EI=172.50000000000003
rhoA=0.78
eigenvalues= [ 83.17966443 229.28844645 449.50021797]
omega analytical = [ 83.17963697 229.28787233 449.4959069 ]
omega difference= -2.7450607589685205e-05
refsol= -2.749026293713541e-11
tol= 3e-11
******************************************
  TESTMODEL 15 ("computeODE2EigenvaluesTest.py") FINISHED SUCCESSFUL
  RESULT = -2.7450607589685205e-11
  ERROR = 3.965534745020647e-14
******************************************


******************************************
  START TESTMODEL 16 ("connectorGravityTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (RK67)
STEP1000, t = 1e+06s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.0231145 seconds.
Solver iteration statistics:
total number of steps:        1000
total number of Newton iterations: 0
total number of Newton Jacobians:  0
result for ObjectConnectorGravity = 1014867.2330317415
refsol= 1014867.2330320379
tol= 3e-11
******************************************
  TESTMODEL 16 ("connectorGravityTest.py") *FAILED*
  RESULT = 1014867.2330317415
  ERROR = -2.9639340937137604e-07
******************************************


******************************************
  START TESTMODEL 17 ("connectorRigidBodySpringDamperTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 0.1s, timeToGo = 0s, Nit/step = 1
Solver terminated successfully after 0.00961817 seconds.
Solver iteration statistics:
total number of steps:        100
total number of Newton iterations: 100
total number of Newton Jacobians:  100
solution of connectorRigidBodySpringDamperTest= 0.1827622474342333
refsol= 0.1827622474318292
tol= 3e-11
******************************************
  TESTMODEL 17 ("connectorRigidBodySpringDamperTest.py") FINISHED SUCCESSFUL
  RESULT = 0.1827622474342333
  ERROR = 2.4041046930989296e-12
******************************************


******************************************
  START TESTMODEL 18 ("contactCoordinateTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1281, t = 0.25s, timeToGo = 0s, Nit/step = 1.01874
Solver terminated successfully after 0.00294304 seconds.
Solver iteration statistics:
total number of steps:        1281
total number of Newton iterations: 1305
total number of Newton Jacobians:  1305
contactCoordinateTest= 0.0553131995062827
refsol= 0.0553131995062827
tol= 3e-11
******************************************
  TESTMODEL 18 ("contactCoordinateTest.py") FINISHED SUCCESSFUL
  RESULT = 0.0553131995062827
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 19 ("contactCurveExample.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 7.164
Solver terminated successfully after 0.0370635 seconds.
solution of contactCurveExample= 0.3096143279681349
refsol= 0.3096143279681347
tol= 3e-11
******************************************
  TESTMODEL 19 ("contactCurveExample.py") FINISHED SUCCESSFUL
  RESULT = 0.3096143279681349
  ERROR = 1.6653345369377348e-16
******************************************


******************************************
  START TESTMODEL 20 ("contactSphereSphereTest.py"):
******************************************
EXUDYN version=1.10.0
impact vel= 0.0
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
  Solve steps: adaptive reduction to step size = 0.0003, time = 0.1944
  Solve steps: adaptive reduction to step size = 8.62309e-05, time = 0.1947
  Solve steps: adaptive reduction to step size = 0.0003, time = 0.396736
  Solve steps: adaptive reduction to step size = 2.86208e-05, time = 0.397036
  Solve steps: adaptive reduction to step size = 0.000289573, time = 0.683329
  Solve steps: adaptive reduction to step size = 0.000148463, time = 1.0656
  Solve steps: adaptive reduction to step size = 1e-08, time = 1.06575
  Solve steps: adaptive reduction to step size = 0.000250987, time = 1.60671
STEP5198, t = 2s, timeToGo = 0s, Nit/step = 1.13775
Solver terminated successfully after 0.0191643 seconds.
Solver iteration statistics:
total number of steps:        5198
total number of Newton iterations: 5914
total number of Newton Jacobians:  1
uTotal= 0.5348463502652304
Maxima after each crossing: [np.float64(10.0), np.float64(7.105704490265273), np.float64(5.044181092882085), np.float64(3.5394600364145745), np.float64(2.6450557720697554), np.float64(1.8615765225674736)]
relations= 0.7105704490265273 0.7098776904939617 0.7016917059954799 0.747304884037951
refsol= 0.5348463536059522
tol= 3e-11
******************************************
  TESTMODEL 20 ("contactSphereSphereTest.py") *FAILED*
  RESULT = 0.5348463502652304
  ERROR = -3.340721810296543e-09
******************************************


******************************************
  START TESTMODEL 21 ("contactSphereSphereTestEAPM.py"):
******************************************
EXUDYN version = 1.10.0
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP49999, t = 1s, timeToGo = 0s, Nit/step = 1.56521
Solver terminated successfully after 0.344647 seconds.
Solver iteration statistics:
total number of steps:        49999
total number of Newton iterations: 78259
total number of Newton Jacobians:  1
uTotal= 0.20000219249662216
refsol= 0.20000219249662216
tol= 3e-11
******************************************
  TESTMODEL 21 ("contactSphereSphereTestEAPM.py") FINISHED SUCCESSFUL
  RESULT = 0.20000219249662216
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 22 ("ConvexContactTest.py"):
******************************************
PostNewton Connector 2: 0.0005: changed from gap 0 to 0.000920964
PostNewton Connector 2: 0.014: changed from gap 2.8254e-05 to -3.91898e-05
PostNewton Connector 2: 0.027: changed from gap -3.66667e-05 to 5.02363e-06
PostNewton Connector 2: 0.0385: changed from gap 5.76866e-06 to -3.62366e-05
result of ConvexContactTest= 0.011770267410494587
refsol= 0.011770267410694153
tol= 3e-11
******************************************
  TESTMODEL 22 ("ConvexContactTest.py") FINISHED SUCCESSFUL
  RESULT = 0.011770267410494587
  ERROR = -1.9956605812332384e-13
******************************************


******************************************
  START TESTMODEL 23 ("coordinateSpringDamperExt.py"):
******************************************
fMu= 1.4715
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
  Newton (time/load step #1): convergence failed after 25 iterations; relative error = 1.60196e-08, time = 0.002
  Solve steps: adaptive reduction to step size = 0.001, time = 0
  Newton (time/load step #618): convergence failed after 25 iterations; relative error = 0.14723, time = 1.003
  Solve steps: adaptive reduction to step size = 0.001, time = 1.001
STEP1122, t = 2s, timeToGo = 0s, Nit/step = 4.26025
Solver terminated successfully after 0.0316986 seconds.
result of coordinateSpringDamperExt= 17.084935539349033
refsol= 17.084935539925155
tol= 3e-11
******************************************
  TESTMODEL 23 ("coordinateSpringDamperExt.py") *FAILED*
  RESULT = 17.084935539349033
  ERROR = -5.761222610090044e-10
******************************************


******************************************
  START TESTMODEL 24 ("coordinateVectorConstraint.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 1.989
Solver terminated successfully after 0.144009 seconds.
p0= [np.float64(-0.7056836384521081), np.float64(-0.3768429413177252), np.float64(0.0)]
solution of coordinateVectorConstraint= -1.0825265797698334
refsol= -1.0825265797698322
tol= 3e-11
******************************************
  TESTMODEL 24 ("coordinateVectorConstraint.py") FINISHED SUCCESSFUL
  RESULT = -1.0825265797698334
  ERROR = -1.1102230246251565e-15
******************************************


******************************************
  START TESTMODEL 25 ("coordinateVectorConstraintGenericODE2.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 1.989
Solver terminated successfully after 0.130877 seconds.
p0= [np.float64(-0.7056836384521081), np.float64(-0.3768429413177252), np.float64(0.0)]
solution of coordinateVectorConstraint= -1.0825265797698334
refsol= -1.0825265797698322
tol= 3e-11
******************************************
  TESTMODEL 25 ("coordinateVectorConstraintGenericODE2.py") FINISHED SUCCESSFUL
  RESULT = -1.0825265797698334
  ERROR = -1.1102230246251565e-15
******************************************


******************************************
  START TESTMODEL 26 ("createKinematicTreeTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP300, t = 1.2s, timeToGo = 0s, Nit/step = 1.98333
Solver terminated successfully after 0.0281373 seconds.
solution of createKinematicTreeTest= 3.340830142730528
refsol= 3.3408301427304914
tol= 3e-11
******************************************
  TESTMODEL 26 ("createKinematicTreeTest.py") FINISHED SUCCESSFUL
  RESULT = 3.340830142730528
  ERROR = 3.6415315207705135e-14
******************************************


******************************************
  START TESTMODEL 27 ("createFunctionsTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP250, t = 0.5s, timeToGo = 0s, Nit/step = 7.636
Solver terminated successfully after 0.0886973 seconds.
solution of createFunctionsTest= 0.04228833966560105
refsol= 0.042288339665601055
tol= 3e-11
******************************************
  TESTMODEL 27 ("createFunctionsTest.py") FINISHED SUCCESSFUL
  RESULT = 0.04228833966560105
  ERROR = -6.938893903907228e-18
******************************************


******************************************
  START TESTMODEL 28 ("createRollingDiscPenaltyTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP500, t = 1s, timeToGo = 0s, Nit/step = 24.178
Solver terminated successfully after 0.0896696 seconds.
solution of createRollingDiscPenalty= 2.1129927199922123
refsol= 2.1129927199922243
tol= 3e-11
******************************************
  TESTMODEL 28 ("createRollingDiscPenaltyTest.py") FINISHED SUCCESSFUL
  RESULT = 2.1129927199922123
  ERROR = -1.199040866595169e-14
******************************************


******************************************
  START TESTMODEL 29 ("createRollingDiscTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP500, t = 1s, timeToGo = 0s, Nit/step = 7.494
Solver terminated successfully after 0.00718 seconds.
solution of createRollingDisc= 4.009716209090303
refsol= 4.009716209090299
tol= 3e-11
******************************************
  TESTMODEL 29 ("createRollingDiscTest.py") FINISHED SUCCESSFUL
  RESULT = 4.009716209090303
  ERROR = 4.440892098500626e-15
******************************************


******************************************
  START TESTMODEL 30 ("createSphereQuadContact.py"):
******************************************


***********************************
*** Test contact create method: trigs ***
***********************************

+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration

Python WARNING [file '/private/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/cibw-run-oz0i9d0f/cp312-macosx_universal2/venv-test-x86_64/lib/python3.12/site-packages/exudyn/solver.py', line 260]: 
Generalized alpha: initial accelerations due to initial velocities can only be computed in dense matrix mode!

STEP3400, t = 0.65s, timeToGo = 0s, Nit/step = 6.16912
Solver terminated successfully after 0.68323 seconds.
Solver iteration statistics:
total number of steps:        3400
total number of Newton iterations: 20975
total number of Newton Jacobians:  329
rejected modified Newton steps:      11


***********************************
*** Test contact create method: quad ***
***********************************

+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration

Python WARNING [file '/private/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/cibw-run-oz0i9d0f/cp312-macosx_universal2/venv-test-x86_64/lib/python3.12/site-packages/exudyn/solver.py', line 260]: 
Generalized alpha: initial accelerations due to initial velocities can only be computed in dense matrix mode!

STEP3400, t = 0.65s, timeToGo = 0s, Nit/step = 6.16912
Solver terminated successfully after 0.683128 seconds.
Solver iteration statistics:
total number of steps:        3400
total number of Newton iterations: 20975
total number of Newton Jacobians:  329
rejected modified Newton steps:      11
solution diff= 0.0
solver= trigs 
sol= [ 1.01160733  0.         -0.02896734 -1.89553399  0.         -0.44499311]
solver= quad 
sol= [ 1.01160733  0.         -0.02896734 -1.89553399  0.         -0.44499311]
solution of createSphereQuadContact= 1.1243776621629538
refsol= 1.124377662163088
tol= 3e-11
******************************************
  TESTMODEL 30 ("createSphereQuadContact.py") FINISHED SUCCESSFUL
  RESULT = 1.1243776621629538
  ERROR = -1.3433698597964394e-13
******************************************


******************************************
  START TESTMODEL 31 ("createSphereQuadContact2.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration

Python WARNING [file '/private/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/cibw-run-oz0i9d0f/cp312-macosx_universal2/venv-test-x86_64/lib/python3.12/site-packages/exudyn/solver.py', line 260]: 
Generalized alpha: initial accelerations due to initial velocities can only be computed in dense matrix mode!

STEP2035, t = 1s, timeToGo = 0s, Nit/step = 5.44668
Solver terminated successfully after 0.26151 seconds.
Solver iteration statistics:
total number of steps:        2035
total number of Newton iterations: 11084
total number of Newton Jacobians:  127
rejected modified Newton steps:      5
solution of createSphereQuadContact2= 0.1561658243294339
refsol= 0.15616582432927872
tol= 3e-11
******************************************
  TESTMODEL 31 ("createSphereQuadContact2.py") FINISHED SUCCESSFUL
  RESULT = 0.1561658243294339
  ERROR = 1.5518142326698126e-13
******************************************


******************************************
  START TESTMODEL 32 ("deleteItemsTest.py"):
******************************************
delete object: 2
delete object: 3
delete sensor: 0
delete load: 0
delete object: 1
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP250, t = 0.5s, timeToGo = 0s, Nit/step = 2.512
Solver terminated successfully after 0.00371954 seconds.
uTotal= -0.9860528006518324
refsol= -0.9860528006518329
tol= 3e-11
******************************************
  TESTMODEL 32 ("deleteItemsTest.py") FINISHED SUCCESSFUL
  RESULT = -0.9860528006518324
  ERROR = 4.440892098500626e-16
******************************************


******************************************
  START TESTMODEL 33 ("distanceSensor.py"):
******************************************
auto computed searchTree box={[-1.03536,-1,-0.1], [1.9,1,0.1]}
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (RK44)
STEP2500, t = 0.25s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.172164 seconds.
pLast= [np.float64(-0.6061511314921352), np.float64(-0.27540810053094056), np.float64(0.0)] 

sensors= [ 1.56720969e-01 -4.00266307e-18] [1.08660730e-01 4.46753745e-17] [0.11237434 0.41190196] [0.2754081  0.93573925] [ 2.00000000e-01  4.00266307e-18 -4.46753745e-17] 

solution of distanceSensor= 1.86776431077868
refsol= 1.867764310778691
tol= 3e-11
******************************************
  TESTMODEL 33 ("distanceSensor.py") FINISHED SUCCESSFUL
  RESULT = 1.86776431077868
  ERROR = -1.0880185641326534e-14
******************************************


******************************************
  START TESTMODEL 34 ("driveTrainTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 0.1s, timeToGo = 0s, Nit/step = 6.413
Solver terminated successfully after 0.259628 seconds.
phiCrank 0.8813196520692135
phiFlyWheel 0.8813197447677681
solution of driveTrainTest= -9.269855461013776e-08
refsol= -9.269855516524927e-08
tol= 3e-11
******************************************
  TESTMODEL 34 ("driveTrainTest.py") FINISHED SUCCESSFUL
  RESULT = -9.269855461013776e-08
  ERROR = 5.551115123125783e-16
******************************************


******************************************
  START TESTMODEL 35 ("explicitLieGroupIntegratorPythonTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP400, t = 0.01s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.35724 seconds.
explicitLieGroupIntegratorPythonTest= 149.84739395407578
refsol= 149.8473939540758
tol= 3e-11
******************************************
  TESTMODEL 35 ("explicitLieGroupIntegratorPythonTest.py") FINISHED SUCCESSFUL
  RESULT = 149.84739395407578
  ERROR = -2.842170943040401e-14
******************************************


******************************************
  START TESTMODEL 36 ("explicitLieGroupIntegratorTest.py"):
******************************************
DynamicSolverType.ExplicitMidpoint,h= 0.001 :
  omega = [  -9.25903319 -100.05787564 -111.56014921] 
  coords= [  0.           0.         -19.62        -0.29022561   1.22720976
  -2.81489467]
DynamicSolverType.RK44,h= 0.001 :
  omega = [ -27.67663523 -106.16651966 -102.45471373] 
  coords= [  0.           0.         -19.62        -1.43361238   1.02208338
  -2.29792145]
DynamicSolverType.RK67,h= 0.001 :
  omega = [ -27.65849136 -106.16380496 -102.46246956] 
  coords= [  0.           0.         -19.62        -1.43257991   1.02227719
  -2.29872218]
DynamicSolverType.DOPRI5,h= 0.001 :
  omega = [ -27.65851484 -106.16380357 -102.46246458] 
  coords= [  0.           0.         -19.62        -1.43258163   1.02227688
  -2.29872073]
nSteps= 8517
explicitLieGrouIntegratorTest result= 0.16164013319819084
explicitLieGrouIntegratorTest error= 8.326672684688674e-17
refsol= 0.16164013319819065
tol= 3e-11
******************************************
  TESTMODEL 36 ("explicitLieGroupIntegratorTest.py") FINISHED SUCCESSFUL
  RESULT = 0.16164013319819084
  ERROR = 1.942890293094024e-16
******************************************


******************************************
  START TESTMODEL 37 ("fourBarMechanismTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP2000, t = 2s, timeToGo = 0s, Nit/step = 1.8385
Solver terminated successfully after 0.0422912 seconds.
solution of fourbar mechanism = -2.376335780518213
refsol= -2.376335780518213
tol= 3e-11
******************************************
  TESTMODEL 37 ("fourBarMechanismTest.py") FINISHED SUCCESSFUL
  RESULT = -2.376335780518213
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 38 ("fourBarMechanismIftomm.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP400, t = 4s, timeToGo = 0s, Nit/step = 6.8475
Solver terminated successfully after 0.0943885 seconds.
max energy error= 0.11401559726672161
pos first bar= [np.float64(0.058150929906587365), np.float64(0.49660695660597676), np.float64(0.0)]
fourBarMechanismIftomm result: 0.172166527173309
refsol= 0.1721665271840173
tol= 3e-11
******************************************
  TESTMODEL 38 ("fourBarMechanismIftomm.py") FINISHED SUCCESSFUL
  RESULT = 0.172166527173309
  ERROR = -1.0708295361538944e-11
******************************************


******************************************
  START TESTMODEL 39 ("generalContactCylinderTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (ExplicitEuler)
STEP2000, t = 2s, timeToGo = 3.79068e-14s, Nit/step = 0
Solver terminated successfully after 0.692649 seconds.
solution of generalContactCylinderTest = 12.246612453748375
refsol= 12.246626442545603
tol= 3e-11
******************************************
  TESTMODEL 39 ("generalContactCylinderTest.py") *FAILED*
  RESULT = 12.246612453748375
  ERROR = -1.3988797228137173e-05
******************************************


******************************************
  START TESTMODEL 40 ("generalContactCylinderTrigsTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (ExplicitEuler)
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.175454 seconds.
solution of generalContactCylinderTest = 5.486908430912657
refsol= 5.486908430912642
tol= 3e-11
******************************************
  TESTMODEL 40 ("generalContactCylinderTrigsTest.py") FINISHED SUCCESSFUL
  RESULT = 5.486908430912657
  ERROR = 1.509903313490213e-14
******************************************


******************************************
  START TESTMODEL 41 ("generalContactFrictionTests.py"):
******************************************
expect u0z= 0.001
expect uFy= 0.010000000000000002
force rolling= 0.5 , torque= 0.020000000000000004
auto computed searchTree box={[-1.25,-0.5125,-0.05], [0.5125,0.649,0.1875]}
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (ExplicitEuler)
STEP4000, t = 0.8s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.194958 seconds.
coords node2 = [ 2.82509948e-02  5.88814892e-01 -9.17881304e-04 -3.32293404e+00
 -2.48752906e-01  1.08297290e+00]
coords node5 = [ 0.         -0.00991814  0.          0.          0.          0.        ]
coords node7 = [0.         0.         0.         2.23906223 0.         0.        ]
coords node8 = [-2.30989313e-01  9.72675579e-04 -7.50000342e-02  7.46759341e-03
  2.52444985e+00  5.60880109e-03]
coords node9 = [-7.37208413e-01  7.43393883e-02 -1.88095229e-02 -3.08448985e-04
  7.94571347e-05 -8.24176944e-01]
solution of generalContactFrictionTest= 12.021034418349382
refsol= 12.030182715125177
tol= 3e-11
******************************************
  TESTMODEL 41 ("generalContactFrictionTests.py") *FAILED*
  RESULT = 12.021034418349382
  ERROR = -0.009148296775794762
******************************************


******************************************
  START TESTMODEL 42 ("generalContactSpheresTest.py"):
******************************************
create mass 0
generalContactSpheresTest: create bodies: 0.057086944580078125 seconds
treesize= 8000
generalContactSpheresTest: gContact: 0.001631021499633789 seconds
finish gContact
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (ExplicitEuler)
STEP500, t = 0.1s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.374452 seconds.
====================
CPU-time statistics:
  total time   = 0.374 seconds
  measured time= 0.373 seconds (=99.7%) 
  non-zero timer [__ sub-timer]:
  newtonIncrement   = 0.23%
  integrationFormula= 0.0834%
  ODE2RHS           = 98.9%
  writeSolution     = 0.727%
  overhead          = 0.0861%
  visualization/user= 0.00749%
special timers:
  Contact:BoundingBoxes = 0.067757s (18.2%)
  Contact:SearchTree = 0.014766s (3.96%)
  Contact:Overall = 0.28856s (77.3%)

u = [ 0.11531681 -0.26257086 -0.96660072]
solution of generalContactSpheresTest= -1.113854772025744
refsol= -1.1138547720263323
tol= 3e-11
******************************************
  TESTMODEL 42 ("generalContactSpheresTest.py") FINISHED SUCCESSFUL
  RESULT = -1.113854772025744
  ERROR = 5.88418203051333e-13
******************************************


******************************************
  START TESTMODEL 43 ("genericJointUserFunctionTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP500, t = 2.5s, timeToGo = 3.86942e-15s, Nit/step = 7.578
Solver terminated successfully after 0.310809 seconds.
pos= [0.23743829 0.6528568  0.30194331]
solution of GenericJointTest= 1.1922383967562853
refsol= 1.1922383967562884
tol= 3e-11
******************************************
  TESTMODEL 43 ("genericJointUserFunctionTest.py") FINISHED SUCCESSFUL
  RESULT = 1.1922383967562853
  ERROR = -3.1086244689504383e-15
******************************************


******************************************
  START TESTMODEL 44 ("genericODE2test.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP2000, t = 1s, timeToGo = 0s, Nit/step = 1
Solver terminated successfully after 0.197015 seconds.
solution of genericODE2test= 0.03604546349888135
refsol= 0.036045463499024655
tol= 3e-11
******************************************
  TESTMODEL 44 ("genericODE2test.py") FINISHED SUCCESSFUL
  RESULT = 0.03604546349888135
  ERROR = -1.4330203690349208e-13
******************************************


******************************************
  START TESTMODEL 45 ("geneticOptimizationTest.py"):
******************************************
--- 0.012185811996459961 seconds ---
[pOpt, vOpt]= [{'mass': 2.532848072009533, 'spring': 6921.681730138393, 'force': 217.16911303068966}, np.float64(0.0030262381366063158)]
optimum= 0.0030262381366063158
geneticOptimizationTest testResult= 0.10117518366826603
geneticOptimizationTest error= 0.0
refsol= 0.10117518366826603
tol= 3e-11
******************************************
  TESTMODEL 45 ("geneticOptimizationTest.py") FINISHED SUCCESSFUL
  RESULT = 0.10117518366826603
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 46 ("geometricallyExactBeam2Dtest.py"):
******************************************
n0= [0. 0. 0.]
p= [0.04419417 0.04419417 0.        ]
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
STEP10, factor = 1, timeToGo = 0s, Nit/step = 4.3
Solver terminated successfully after 0.00255117 seconds.
n = 16 , uTip = [-1.19715078 -2.21150284]
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
STEP10, factor = 1, timeToGo = 0s, Nit/step = 4.3
Solver terminated successfully after 0.0021235 seconds.
n = 16 , uTip = [-1.19715078 -2.21150284]
solution of geometricallyExactBeam2Dtest= -2.2115028353806547
refsol= -2.2115028353806547
tol= 3e-11
******************************************
  TESTMODEL 46 ("geometricallyExactBeam2Dtest.py") FINISHED SUCCESSFUL
  RESULT = -2.2115028353806547
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 47 ("geometricallyExactBeamTest.py"):
******************************************
case= 0 CantileverLinear2011
ne= 8 , ux= 1.8764659426295793e-07 , uy= 0.0008068840238244317
ne= 8 , ux= 0.15016895118681428 , uy= 0.7082974219968227
ne= 8 , u= [np.float64(-0.00010943825970310961), np.float64(-0.00018866092698509857), np.float64(-0.018117408242732932)]
ne= 8 , beta= 45.0 , u= [-0.014319  -0.0089257  0.1086972]
ne= 8 , beta= 45.0 , u= [-0.0302598 -0.0155055  0.1561971]
Solution of geometricallyExactBeamTest= 1.0128209428598964
refsol= 1.0128209428598958
tol= 3e-11
******************************************
  TESTMODEL 47 ("geometricallyExactBeamTest.py") FINISHED SUCCESSFUL
  RESULT = 1.0128209428598964
  ERROR = 6.661338147750939e-16
******************************************


******************************************
  START TESTMODEL 48 ("gridGeomExactBeam2D.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 0.1s, timeToGo = 0s, Nit/step = 7.2
Solver terminated successfully after 0.0247487 seconds.
grid = (16, 4) , uTip = [-0.1474196  -1.58279657]
solution of gridGeomExactBeam2D= -1.582796574326255
refsol= -1.582796574326255
tol= 3e-11
******************************************
  TESTMODEL 48 ("gridGeomExactBeam2D.py") FINISHED SUCCESSFUL
  RESULT = -1.582796574326255
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 49 ("heavyTop.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP2000, t = 0.2s, timeToGo = 0s, Nit/step = 2.8585
Solver terminated successfully after 0.0839664 seconds.
sol= [ 0.          0.          0.         -0.70824157  0.43878143  0.54578152
  0.08937154  0.          0.          0.         29.86975963 -0.76834816
 -1.00284191]
solution of heavy top = 33.42312575175582
refsol= 33.42312575174431
tol= 3e-11
******************************************
  TESTMODEL 49 ("heavyTop.py") FINISHED SUCCESSFUL
  RESULT = 33.42312575175582
  ERROR = 1.1510792319313623e-11
******************************************


******************************************
  START TESTMODEL 50 ("hydraulicActuatorSimpleTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP400, t = 0.4s, timeToGo = 0s, Nit/step = 2.405
Solver terminated successfully after 0.00514687 seconds.
Solver iteration statistics:
total number of steps:        400
total number of Newton iterations: 962
total number of Newton Jacobians:  1
hydraulics C++:
pressures= [6443407.76152315 2988633.30906247]
velocity= [-0.00506708  0.20480658  0.        ]
solution of hydraulicActuatorSimpleTest = 7.130440021870288
refsol= 7.130440021870293
tol= 3e-11
******************************************
  TESTMODEL 50 ("hydraulicActuatorSimpleTest.py") FINISHED SUCCESSFUL
  RESULT = 7.130440021870288
  ERROR = -5.329070518200751e-15
******************************************


******************************************
  START TESTMODEL 51 ("jointArgsTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP250, t = 0.5s, timeToGo = 0s, Nit/step = 7.2
Solver terminated successfully after 0.0176356 seconds.
uTotal= 0.004269049550084759
refsol= 0.004269049550098547
tol= 3e-11
******************************************
  TESTMODEL 51 ("jointArgsTest.py") FINISHED SUCCESSFUL
  RESULT = 0.004269049550084759
  ERROR = -1.3788449548801651e-14
******************************************


******************************************
  START TESTMODEL 52 ("kinematicTreeAndMBStest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP500, t = 0.5s, timeToGo = 0s, Nit/step = 7.336
Solver terminated successfully after 0.0790843 seconds.
Solver iteration statistics:
total number of steps:        500
total number of Newton iterations: 3668
total number of Newton Jacobians:  32
sensor MBS 0= [np.float64(0.09649755382208104), np.float64(0.2), np.float64(0.3)]
sensor KT 0 = [np.float64(0.09649755964889588), np.float64(0.2), np.float64(0.3)]
sensor MBS 1= [np.float64(-0.036499862989128336), np.float64(-1.7579704200596897e-47), np.float64(9.199695702533587e-21)]
sensor KT 1 = [np.float64(-0.036589024032191206), np.float64(0.0), np.float64(0.0)]
sensor MBS 2= [np.float64(4.343389797927872), np.float64(-1.51956347605377), np.float64(4.0796542260661656e-19)]
sensor KT 2 = [np.float64(4.344370428539041), np.float64(-1.5199923515107494), np.float64(0.0)]
sensor MBS 3= [np.float64(-4.871588806604391), np.float64(11.57551151719751), np.float64(9.57278575496325)]
sensor KT 3 = [np.float64(-4.871082209667549), np.float64(11.574798311096542), np.float64(9.573370704366756)]
sensor MBS 4= [np.float64(0.4096877204163693), np.float64(0.5407346039060749), np.float64(-0.055733977059071904)]
sensor KT 4 = [np.float64(0.4096863782967387), np.float64(0.54072516809945), np.float64(-0.05572705501765224)]
sensor MBS 5= [np.float64(-0.12931282908328592), np.float64(0.776942759276233), np.float64(0.9383230151459222)]
sensor KT 5 = [np.float64(-0.12930401977404227), np.float64(0.7769439243217638), np.float64(0.9383506256106708)]
sensor MBS 6= [np.float64(0.9828403825905387), np.float64(-3.520885678828643), np.float64(-0.46080266227913924)]
sensor KT 6 = [np.float64(0.9827936303138572), np.float64(-3.5209422633707255), np.float64(-0.46068673678129535)]
sensor MBS 7= [np.float64(-9.762331477982084), np.float64(-1.2803761283843413), np.float64(-9.967031406616016)]
sensor KT 7 = [np.float64(-9.76206335123691), np.float64(-1.2802252295517822), np.float64(-9.966992566925377)]
sensor MBS 8= [np.float64(0.06234580991889782), np.float64(-0.05869332788515269), np.float64(-14.009884441702354)]
sensor KT 8 = [np.float64(0.06248813958427438), np.float64(-0.05879655347457956), np.float64(-14.00965511848169)]
sensor MBS 9= [np.float64(-7.2301226081903955), np.float64(-28.751191683708186), np.float64(20.00356819229083)]
sensor KT 9 = [np.float64(-7.23036434111198), np.float64(-28.751314540872645), np.float64(20.004135590274736)]
sensor MBS 10= [np.float64(-14.727606387334088), np.float64(-0.7291537724340085), np.float64(-35.429776373678365)]
sensor KT 10 = [np.float64(-14.72544687736534), np.float64(-0.7262283175766244), np.float64(-35.43283157505583)]
solution of kinematicTreeAndMBStest 1= 257.10800657783454
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP500, t = 0.5s, timeToGo = 0s, Nit/step = 6.694
Solver terminated successfully after 0.112293 seconds.
sensor MBS 0= [0.22016409 1.41968647 0.        ]
sensor KT 0 = [0.22016733 1.41968519 0.        ]
solution of kinematicTreeAndMBStest 2= 2.8733122322302638
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP250, t = 0.25s, timeToGo = 0s, Nit/step = 6.508
Solver terminated successfully after 0.129076 seconds.
sensor MBS 0= [-0.56035361  1.86769344  0.        ]
sensor KT 0 = [-0.56035363  1.86769408  0.        ]
solution of kinematicTreeAndMBStest 3= 3.899885210580134
solution of kinematicTreeAndMBStest all= 2.638812040206449e-05
refsol= 2.6388120463802767e-05
tol= 3e-11
******************************************
  TESTMODEL 52 ("kinematicTreeAndMBStest.py") FINISHED SUCCESSFUL
  RESULT = 2.638812040206449e-05
  ERROR = -6.173827657332369e-14
******************************************


******************************************
  START TESTMODEL 53 ("kinematicTreeConstraintTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP125, t = 0.5s, timeToGo = 0s, Nit/step = 8.2
Solver terminated successfully after 0.0449565 seconds.
sensor MBS 0= [ 0.77858018 -0.46489694  0.        ]
sensor KT 0 = [ 0.77853324 -0.46490618  0.        ]
solution of kinematicTreeConstraintTest= 1.8135975384620442
refsol= 1.8135975384620484
tol= 3e-11
******************************************
  TESTMODEL 53 ("kinematicTreeConstraintTest.py") FINISHED SUCCESSFUL
  RESULT = 1.8135975384620442
  ERROR = -4.218847493575595e-15
******************************************


******************************************
  START TESTMODEL 54 ("kinematicTreeTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (RK44)
STEP200, t = 1s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.00363654 seconds.
coordinates= [-1.31995028 -0.03667128 -0.0406166  -0.60654163  0.69439583]
solution of genericODE2test= -1.30938396021641
refsol= -1.309383960216414
tol= 3e-11
******************************************
  TESTMODEL 54 ("kinematicTreeTest.py") FINISHED SUCCESSFUL
  RESULT = -1.30938396021641
  ERROR = 3.9968028886505635e-15
******************************************


******************************************
  START TESTMODEL 55 ("laserScannerTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP250, t = 0.5s, timeToGo = 0s, Nit/step = 16.88
Solver terminated successfully after 0.829295 seconds.
solution of mecanumWheelRollingDiscTest= 2.695064443768281
refsol= 2.695064443768281
tol= 3e-11
******************************************
  TESTMODEL 55 ("laserScannerTest.py") FINISHED SUCCESSFUL
  RESULT = 2.695064443768281
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 56 ("linearFEMgenericODE2.py"):
******************************************
nodesLeftPlane [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175]
nodesRightPlane [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP10, t = 0.1s, timeToGo = 3.36418e-17s, Nit/step = 1
Solver terminated successfully after 0.242399 seconds.
====================
CPU-time statistics:
  total time   = 0.242 seconds
  measured time= 0.242 seconds (=100%) 
  non-zero timer [__ sub-timer]:
  factorization     = 2.41%
  newtonIncrement   = 0.204%
  integrationFormula= 0.00628%
  ODE2RHS           = 1.67%
  ODE1RHS           = 0.000687%
  AERHS             = 0.275%
  totalJacobian     = 94.5%
  __jacobianODE2    = 94.5%
  __jacobianODE1    = 0.00105%
  __jacobianAE      = 0.0661%
  massMatrix        = 0.00218%
  reactionForces    = 0.879%
  Python          = 0.000103%
  writeSolution     = 0.00906%
  overhead          = 0.0135%
  visualization/user= 0.00155%
uTip= [np.float64(-0.06836115476416538), np.float64(-0.38159700689999565), np.float64(0.00018486213838602157)]
solution of linearFEMgenericODE2= 0.38767197129755937
refsol= 0.3876719712975609
tol= 3e-11
******************************************
  TESTMODEL 56 ("linearFEMgenericODE2.py") FINISHED SUCCESSFUL
  RESULT = 0.38767197129755937
  ERROR = -1.5543122344752192e-15
******************************************


******************************************
  START TESTMODEL 57 ("loadUserFunctionTest.py"):
******************************************
CASE: PythonUserFunction
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (RK44)
STEP2000, t = 10s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.121956 seconds.
CASE: SymbolicUserFunction
load user function:   (cos((12.5664 * t)) * loadVector)
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (RK44)
STEP2000, t = 10s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.0138959 seconds.
result of loadUserFunctionTest= 1.805117370657075
refsol= 1.8051173706570725
tol= 3e-11
******************************************
  TESTMODEL 57 ("loadUserFunctionTest.py") FINISHED SUCCESSFUL
  RESULT = 1.805117370657075
  ERROR = 2.4424906541753444e-15
******************************************


******************************************
  START TESTMODEL 58 ("LShapeGeomExactBeam2D.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
STEP10, factor = 1, timeToGo = 0s, Nit/step = 4.9
Solver terminated successfully after 0.00194675 seconds.
uTip = [ 0.85895237 -0.91814745]
solution of LShapeGeomExactBeam2D= -0.9181474511543878
refsol= -0.9181474511543884
tol= 3e-11
******************************************
  TESTMODEL 58 ("LShapeGeomExactBeam2D.py") FINISHED SUCCESSFUL
  RESULT = -0.9181474511543878
  ERROR = 6.661338147750939e-16
******************************************


******************************************
  START TESTMODEL 59 ("mainSystemExtensionsTests.py"):
******************************************
solution of mainSystemExtensions test MP= 10.418464378208578
solution of mainSystemExtensions test RB= 10.494301123181476
WARNING: bodyList in MainSystem Create functions is deprecated; use bodyNumbers instead!
solution of mainSystemExtensions test SD= 0.12013162200851009
WARNING: bodyList in MainSystem Create functions is deprecated; use bodyNumbers instead!
solution of mainSystemExtensions test CSD= 1.145425261630096
solution of mainSystemExtensions test RJ= 0.02140306132447763
solution of mainSystemExtensions test PJ= 11.61999999999991
solution of mainSystemExtensions test SJ= 1.2067248842327314
solution of mainSystemExtensions test GJ= 1.429162656720906
WARNING: bodyList in MainSystem Create functions is deprecated; use bodyNumbers instead!
solution of mainSystemExtensions test LinEig= 10.024968827881711
numpy, networkx and matplotlib required for DrawSystemGraph(...); skipping test
solution of mainSystemExtensions test DOF= 9
WARNING: bodyList in MainSystem Create functions is deprecated; use bodyNumbers instead!
solution of mainSystemExtensions test DC= 2.165812654226265
solution of mainSystemExtensions TOTAL= 57.646394469414666
refsol= 57.64639446941554
tol= 3e-11
******************************************
  TESTMODEL 59 ("mainSystemExtensionsTests.py") FINISHED SUCCESSFUL
  RESULT = 57.646394469414666
  ERROR = -8.739675649849232e-13
******************************************


******************************************
  START TESTMODEL 60 ("mainSystemUserFunctionsTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP2000, t = 2s, timeToGo = 0s, Nit/step = 1
Solver terminated successfully after 0.00636229 seconds.
Solver iteration statistics:
total number of steps:        2000
total number of Newton iterations: 2000
total number of Newton Jacobians:  2000
displacement= 0.09611534359017537 -0.015591500757842106 -0.0010983778816513947
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP2000, t = 2s, timeToGo = 0s, Nit/step = 1
Solver terminated successfully after 0.0126037 seconds.
Solver iteration statistics:
total number of steps:        2000
total number of Newton iterations: 2000
total number of Newton Jacobians:  2000
displacement= 7.850824817487488 -4.494285538449621 -0.0010983778816513947
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP2000, t = 2s, timeToGo = 0s, Nit/step = 1
Solver terminated successfully after 0.0596945 seconds.
Solver iteration statistics:
total number of steps:        2000
total number of Newton iterations: 2000
total number of Newton Jacobians:  2000
displacement= 0.3103243094750614 0.24578354326860638 -0.0010983778816513947
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP2000, t = 2s, timeToGo = 0s, Nit/step = 1
Solver terminated successfully after 0.07233 seconds.
Solver iteration statistics:
total number of steps:        2000
total number of Newton iterations: 2000
total number of Newton Jacobians:  2000
displacement= 0.09611534359017537 -0.015591500757842106 -0.0010983778816513947
mainSystemUserFunctionsTest solution= 4.069301305919595
refsol= 4.069301305919624
tol= 3e-11
******************************************
  TESTMODEL 60 ("mainSystemUserFunctionsTest.py") FINISHED SUCCESSFUL
  RESULT = 4.069301305919595
  ERROR = -2.930988785010413e-14
******************************************


******************************************
  START TESTMODEL 61 ("manualExplicitIntegrator.py"):
******************************************


++++++++++++++++++++++++++
Start EXUDYN version 1.10.0

load f=12.937500000000005
EI=17.250000000000007
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
ev= 2.2801835384819484
Solver terminated unsuccessfully after 0 seconds.
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP5000, t = 0.05s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.250977 seconds.
uy= -0.2204849087896499
testResult= 2.0596986296922983
refsol= 2.059698629692295
tol= 3e-11
******************************************
  TESTMODEL 61 ("manualExplicitIntegrator.py") FINISHED SUCCESSFUL
  RESULT = 2.0596986296922983
  ERROR = 3.552713678800501e-15
******************************************


******************************************
  START TESTMODEL 62 ("matrixContainerTest.py"):
******************************************
[[13.3  0.   0. ]
 [ 0.   4.2 42. ]]
mc= [[1.5 0.  0. ]
 [0.  1.5 0. ]
 [0.  0.  1. ]]
mc= [[1. 2.]
 [3. 4.]
 [0. 0.]
 [0. 0.]]
solution of matrixContainerTest= 56.5
refsol= 56.5
tol= 3e-11
******************************************
  TESTMODEL 62 ("matrixContainerTest.py") FINISHED SUCCESSFUL
  RESULT = 56.5
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 63 ("mecanumWheelRollingDiscTest.py"):
******************************************
solution of mecanumWheelRollingDiscTest= 0.2714267238324341
refsol= 0.2714267238324343
tol= 3e-11
******************************************
  TESTMODEL 63 ("mecanumWheelRollingDiscTest.py") FINISHED SUCCESSFUL
  RESULT = 0.2714267238324341
  ERROR = -2.220446049250313e-16
******************************************


******************************************
  START TESTMODEL 64 ("NGsolveCMStest.py"):
******************************************
NGsolve not installed; trying to load mesh
NGsolveCMStest: import of h5py failed; to test, requires to pip install h5py
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 0.1s, timeToGo = 0s, Nit/step = 4.86
Solver terminated successfully after 0.00832583 seconds.
====================
CPU-time statistics:
  total time   = 0.00833 seconds
  measured time= 0.00803 seconds (=96.5%) 
  non-zero timer [__ sub-timer]:
  factorization     = 0.426%
  newtonIncrement   = 1.07%
  integrationFormula= 0.833%
  ODE2RHS           = 16.6%
  ODE1RHS           = 0.997%
  AERHS             = 22.6%
  totalJacobian     = 2.59%
  __jacobianODE2    = 2.03%
  __jacobianODE1    = 0.0384%
  __jacobianAE      = 0.459%
  massMatrix        = 9.79%
  reactionForces    = 44.2%
  Python          = 0.00879%
  writeSolution     = 0.35%
  overhead          = 0.454%
  visualization/user= 0.082%
nModes= 4 , tip displacement= [-0.00687419 -0.06919086  0.00032172]
solution of NGsolveCMStest= 0.06953224923173695
refsol= 0.06953224923173523
tol= 3e-11
******************************************
  TESTMODEL 64 ("NGsolveCMStest.py") FINISHED SUCCESSFUL
  RESULT = 0.06953224923173695
  ERROR = 1.7208456881689926e-15
******************************************


******************************************
  START TESTMODEL 65 ("objectFFRFreducedOrderAccelerations.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP10, t = 0.001s, timeToGo = 0s, Nit/step = 7.4
Solver terminated successfully after 0.0721854 seconds.
solution of ObjectFFRFreducedOrderAccelerations= 61579.77747560834
ObjectFFRFreducedOrderAccelerations test result= 0.1000057024588659
refsol= 0.1000057024588858
tol= 3e-11
******************************************
  TESTMODEL 65 ("objectFFRFreducedOrderAccelerations.py") FINISHED SUCCESSFUL
  RESULT = 0.1000057024588659
  ERROR = -1.990074771640593e-14
******************************************


******************************************
  START TESTMODEL 66 ("objectFFRFreducedOrderTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 0.01s, timeToGo = 0s, Nit/step = 7.99
Solver terminated successfully after 0.0242593 seconds.
solution of ObjectFFRFreducedOrder= 0.535523326805326
refsol= 0.0053552332680605694
tol= 3e-11
******************************************
  TESTMODEL 66 ("objectFFRFreducedOrderTest.py") FINISHED SUCCESSFUL
  RESULT = 0.00535523326805326
  ERROR = -7.309257366028277e-15
******************************************


******************************************
  START TESTMODEL 67 ("objectFFRFTest.py"):
******************************************
nodes size= (115, 3)
elements size= (48, 8)
nNodes= 115 , nODE2= 345
eigenvalues = [np.float64(1.2342370469428063e-05), np.float64(2.051493934621532e-05), np.float64(2.5181800197983797e-05), np.float64(2.976317323919546e-05), np.float64(3.1085137035427335e-05), np.float64(5.4030501865714604e-05), np.float64(104.3828365162019), np.float64(104.61719002456219), np.float64(187.8008078912552), np.float64(212.2835422640561), np.float64(224.18335038650653), np.float64(237.7642409002503), np.float64(284.03182834217307), np.float64(284.1686514704361), np.float64(394.1400845378548), np.float64(394.5041682997188), np.float64(405.4717329962672), np.float64(406.4219361063546)]
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP10, t = 0.001s, timeToGo = 0s, Nit/step = 5.4
Solver terminated successfully after 0.994086 seconds.
solution of ObjectFFRF= 0.0064600108120842666
refsol= 0.0064600108120842666
tol= 3e-11
******************************************
  TESTMODEL 67 ("objectFFRFTest.py") FINISHED SUCCESSFUL
  RESULT = 0.0064600108120842666
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 68 ("objectFFRFTest2.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP25, t = 0.0025s, timeToGo = 2.31151e-16s, Nit/step = 7.32
Solver terminated successfully after 1.07202 seconds.
solution of ObjectFFRFtest2= 0.03552188069018362
refsol= 0.03552188069017914
tol= 3e-11
******************************************
  TESTMODEL 68 ("objectFFRFTest2.py") FINISHED SUCCESSFUL
  RESULT = 0.03552188069018362
  ERROR = 4.475586568020162e-15
******************************************


******************************************
  START TESTMODEL 69 ("objectGenericODE2Test.py"):
******************************************
eigen freq.= [  0.      57.6318  57.6318 132.5577 132.5577 136.3306 187.8241 212.3297
 231.9987 231.9987 238.6879 261.7874 401.3941 401.3941]
eigen freq. first mode = 57.63178639764405
excitation node= 112
nMid= 110
nTopMid= 103
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP50, t = 0.05s, timeToGo = 0s, Nit/step = 3.18
Solver terminated successfully after 0.290419 seconds.
solution of ObjectGenericODE2= -2.3163788975245418e-05
refsol= -2.316378897486015e-05
tol= 3e-11
******************************************
  TESTMODEL 69 ("objectGenericODE2Test.py") FINISHED SUCCESSFUL
  RESULT = -2.3163788975245418e-05
  ERROR = -3.85267853860935e-16
******************************************


******************************************
  START TESTMODEL 70 ("PARTS_ATEs_moving.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP50, t = 0.05s, timeToGo = 0s, Nit/step = 2
Solver terminated successfully after 0.302651 seconds.
Solver iteration statistics:
total number of steps:        50
total number of Newton iterations: 100
total number of Newton Jacobians:  100
uy= 0.4465676276026208
refsol= 0.44656762760262214
tol= 3e-11
******************************************
  TESTMODEL 70 ("PARTS_ATEs_moving.py") FINISHED SUCCESSFUL
  RESULT = 0.4465676276026208
  ERROR = -1.3322676295501878e-15
******************************************


******************************************
  START TESTMODEL 71 ("pendulumFriction.py"):
******************************************
mass= 2.5
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP4000, t = 0.4s, timeToGo = 0s, Nit/step = 1.55975
Solver terminated successfully after 0.187018 seconds.
p0= [ 0.11878348 -0.38195612  0.        ]
p0= [ 0.11878348 -0.38195612  0.        ] (marker)
solution of pendulumFriction= 0.3999999877698229
refsol= 0.39999998776982304
tol= 3e-11
******************************************
  TESTMODEL 71 ("pendulumFriction.py") FINISHED SUCCESSFUL
  RESULT = 0.3999999877698229
  ERROR = -1.6653345369377348e-16
******************************************


******************************************
  START TESTMODEL 72 ("pickleCopyMbs.py"):
******************************************
h5py not available; skipping HDF5 test
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 7.377
Solver terminated successfully after 0.104872 seconds.
uTotal= 0.2583013564103506
refsol= 0.2583013564103496
tol= 3e-11
******************************************
  TESTMODEL 72 ("pickleCopyMbs.py") FINISHED SUCCESSFUL
  RESULT = 0.2583013564103506
  ERROR = 9.992007221626409e-16
******************************************


******************************************
  START TESTMODEL 73 ("plotSensorTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 1s, timeToGo = 0s, Nit/step = 6.13
Solver terminated successfully after 0.00679462 seconds.
remove file: solution/plotSensorLoad.txt
remove file: solution/plotSensorNode.txt
remove file: solution/plotSensorNodeRotation.txt
remove file: solution/plotSensorBody.txt
remove file: solution/plotSensorObject.txt
remove file: solution/plotSensorMarker.txt
refsol= 1
tol= 3e-11
******************************************
  TESTMODEL 73 ("plotSensorTest.py") FINISHED SUCCESSFUL
  RESULT = 1
  ERROR = 0
******************************************


******************************************
  START TESTMODEL 74 ("postNewtonStepContactTest.py"):
******************************************
EXUDYN version=1.10.0
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP181, t = 0.5s, timeToGo = 0s, Nit/step = 1.53591
Solver terminated successfully after 0.0129901 seconds.
Solver iteration statistics:
total number of steps:        181
total number of Newton iterations: 278
total number of Newton Jacobians:  278
postNewtonStepContactTest= 0.057286638346409235
refsol= 0.057286638346409235
tol= 3e-11
******************************************
  TESTMODEL 74 ("postNewtonStepContactTest.py") FINISHED SUCCESSFUL
  RESULT = 0.057286638346409235
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 75 ("reevingSystemSpringsTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP200, t = 2s, timeToGo = 0s, Nit/step = 6.255
Solver terminated successfully after 0.019235 seconds.
solution of ReevingSystemSprings= 2.215557571743299
refsol= 2.2155575717433007
tol= 3e-11
******************************************
  TESTMODEL 75 ("reevingSystemSpringsTest.py") FINISHED SUCCESSFUL
  RESULT = 2.215557571743299
  ERROR = -1.7763568394002505e-15
******************************************


******************************************
  START TESTMODEL 76 ("revoluteJointPrismaticJointTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP250, t = 0.25s, timeToGo = 0s, Nit/step = 6.46
Solver terminated successfully after 0.0234962 seconds.
u0= [-0.091739   -0.34905059  0.16378972] , rot0= [-0.00912885 -0.28756518  0.35260735]
solution of revoluteJointprismaticJointTest= 1.2538806799241744
refsol= 1.2538806799249342
tol= 3e-11
******************************************
  TESTMODEL 76 ("revoluteJointPrismaticJointTest.py") FINISHED SUCCESSFUL
  RESULT = 1.2538806799241744
  ERROR = -7.598366380534571e-13
******************************************


******************************************
  START TESTMODEL 77 ("rigidBody2Dtest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP400, t = 0.4s, timeToGo = 0s, Nit/step = 6.5275
Solver terminated successfully after 0.00893608 seconds.
Solver iteration statistics:
total number of steps:        400
total number of Newton iterations: 2611
total number of Newton Jacobians:  11
phis= -1.1255681257666585 -1.1255719708774685 -1.1255719708774687 , err= 2.220446049250313e-16
coms= [-0.78444738  0.54827598  0.        ] [-0.78444915  0.54827509  0.        ] [-0.78444915  0.54827509  0.        ] , err= [-1.11022302e-16  0.00000000e+00  0.00000000e+00]
solution of rigidBody2Dtest = -0.5055295700922446
refsol= -0.5055295700922415
tol= 3e-11
******************************************
  TESTMODEL 77 ("rigidBody2Dtest.py") FINISHED SUCCESSFUL
  RESULT = -0.5055295700922446
  ERROR = -3.1086244689504383e-15
******************************************


******************************************
  START TESTMODEL 78 ("rigidBodyAsUserFunctionTest.py"):
******************************************
M = [[2 0 0]
 [0 2 0]
 [0 0 2]]
J = [[6 0 1]
 [0 1 0]
 [1 0 6]]
<systemData: 
  Number of nodes= 3
  Number of objects = 4
  Number of markers = 4
  Number of loads = 1
  Number of sensors = 0
  Number of ODE2 coordinates = 14
  Number of ODE1 coordinates = 0
  Number of AE coordinates   = 2
  Number of data coordinates   = 0

For details see mbs.systemData, mbs.sys and mbs.variables
>

+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP50, t = 0.05s, timeToGo = 0s, Nit/step = 3
Solver terminated successfully after 0.125822 seconds.
u0= [0.0, 0.0, 0] , rot0= [-2.09660405  0.22104041  2.13552568]
u1= [0.5, 0.0, 0] , rot1= [-2.09660405  0.22104041  2.13552568]
solution of rigidBodyAsUserFunctionTest= 8.95086527155215
refsol= 8.950865271552148
tol= 3e-11
******************************************
  TESTMODEL 78 ("rigidBodyAsUserFunctionTest.py") FINISHED SUCCESSFUL
  RESULT = 8.95086527155215
  ERROR = 1.7763568394002505e-15
******************************************


******************************************
  START TESTMODEL 79 ("rigidBodyCOMtest.py"):
******************************************
AddRigidBody COM= [ 0.4   0.22 -0.35]
inertia6D= [np.float64(14.2725), np.float64(14.0625), np.float64(11.21), np.float64(4.925), np.float64(5.5), np.float64(-1.2000000000000002)]
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 1s, timeToGo = 0s, Nit/step = 7.8
Solver terminated successfully after 0.00941508 seconds.
solution of rigidBodyCOMtest= 3.409431467726291
refsol= 3.409431467726291
tol= 3e-11
******************************************
  TESTMODEL 79 ("rigidBodyCOMtest.py") FINISHED SUCCESSFUL
  RESULT = 3.409431467726291
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 80 ("rigidBodySpringDamperIntrinsic.py"):
******************************************
WARNING: bodyList in MainSystem Create functions is deprecated; use bodyNumbers instead!
WARNING: bodyList in MainSystem Create functions is deprecated; use bodyNumbers instead!
WARNING: bodyList in MainSystem Create functions is deprecated; use bodyNumbers instead!
p1= [ 0.16884241 -0.06286121  0.10721368]
p2= [ 0.16884241 -0.06286121  0.10721368]
omega3= [ 5.19166461 -2.72101417 11.37143664]
solution of rigidBodySpringDamperIntrinsic test= 0.5472368462481361
refsol= 0.5472368463500464
tol= 3e-11
******************************************
  TESTMODEL 80 ("rigidBodySpringDamperIntrinsic.py") *FAILED*
  RESULT = 0.5472368462481361
  ERROR = -1.0191036903250961e-10
******************************************


******************************************
  START TESTMODEL 81 ("rollingCoinTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 0.5s, timeToGo = 0s, Nit/step = 2.341
Solver terminated successfully after 0.014853 seconds.
force in rollingCoinTest= [ 0.98865237 -0.2204573   9.84614513]
solution of rollingCoinTest= 1.0634381189361193
refsol= 1.063438118935288
tol= 3e-11
******************************************
  TESTMODEL 81 ("rollingCoinTest.py") FINISHED SUCCESSFUL
  RESULT = 1.0634381189361193
  ERROR = 8.313350008393172e-13
******************************************


******************************************
  START TESTMODEL 82 ("rollingDiscTangentialForces.py"):
******************************************
omegaY= 2.0986106515184435
omegaZ= 3.4976844191974057
necessary torque= 317.09999999999997 , gyro torque= 317.0999999999999
-317.09999999999997
centrifugal force: 396.37499999999994
omega1 x (Theta * omega2) =  317.0999999999999
Mgyro                     =  317.0999999999999
omega1 x (Theta * omega1) =  [   0.    -396.375    0.   ]
-317.09999999999997
Theta * angAcc =  [    0.         -1388.47499978     0.        ]
Theta * angAcc + omega1 x (Theta * omega1) =  [    0.         -1784.84999978     0.        ]
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP100, t = 0.1s, timeToGo = 0s, Nit/step = 4.27
Solver terminated successfully after 0.105368 seconds.
rollingDiscTangentialForces: F= [-3.96375175e+02  1.00226174e-03  6.37825563e+02]
solution of rollingDiscTangentialForces= 1.0342017404650015
refsol= 1.0342017388721547
tol= 3e-11
******************************************
  TESTMODEL 82 ("rollingDiscTangentialForces.py") *FAILED*
  RESULT = 1.0342017404650015
  ERROR = 1.5928467433923288e-09
******************************************


******************************************
  START TESTMODEL 83 ("rollingCoinPenaltyTest.py"):
******************************************
solution of rollingCoinPenaltyTest= 0.03489603106786701
refsol= 0.03489603106689881
tol= 3e-11
******************************************
  TESTMODEL 83 ("rollingCoinPenaltyTest.py") FINISHED SUCCESSFUL
  RESULT = 0.03489603106786701
  ERROR = 9.682046830938873e-13
******************************************


******************************************
  START TESTMODEL 84 ("rotatingTableTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 5s, timeToGo = 0s, Nit/step = 6.708
Solver terminated successfully after 0.0515824 seconds.
Solver iteration statistics:
total number of steps:        1000
total number of Newton iterations: 6708
total number of Newton Jacobians:  33
rotatingTableTest mode 0 = 3.9199250593930524
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 5s, timeToGo = 0s, Nit/step = 7.002
Solver terminated successfully after 0.0492045 seconds.
Solver iteration statistics:
total number of steps:        1000
total number of Newton iterations: 7002
total number of Newton Jacobians:  41
rotatingTableTest mode 1 = 3.9187553156367994
rotatingTableTest= 7.838680375029852
refsol= 7.838680375029869
tol= 3e-11
******************************************
  TESTMODEL 84 ("rotatingTableTest.py") FINISHED SUCCESSFUL
  RESULT = 7.838680375029852
  ERROR = -1.687538997430238e-14
******************************************


******************************************
  START TESTMODEL 85 ("scissorPrismaticRevolute2D.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP500, t = 10s, timeToGo = 0s, Nit/step = 3.002
Solver terminated successfully after 0.0816802 seconds.
Solver iteration statistics:
total number of steps:        500
total number of Newton iterations: 1501
total number of Newton Jacobians:  1501
uy= 1.1310332041867346
solver.it.newtonStepsCount= 1501
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP500, t = 10s, timeToGo = 0s, Nit/step = 2.434
Solver terminated successfully after 0.101953 seconds.
Solver iteration statistics:
total number of steps:        500
total number of Newton iterations: 1217
total number of Newton Jacobians:  1217
uy= 1.1246157002373944
solver.it.newtonStepsCount= 1217
refsol= 27.20255648904422
tol= 3e-11
******************************************
  TESTMODEL 85 ("scissorPrismaticRevolute2D.py") FINISHED SUCCESSFUL
  RESULT = 27.20255648904424
  ERROR = 2.1316282072803006e-14
******************************************


******************************************
  START TESTMODEL 86 ("sensorUserFunctionTest.py"):
******************************************
sensor= 45.0
refsol= 45
tol= 3e-11
******************************************
  TESTMODEL 86 ("sensorUserFunctionTest.py") FINISHED SUCCESSFUL
  RESULT = 45.0
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 87 ("serialRobotTest.py"):
******************************************
WARNING: RigidBodyInertia: inertiaTensor does not fulfill triangule inequality! This may lead to unphysical and numerically unstable results!
WARNING: RigidBodyInertia: inertiaTensor does not fulfill triangule inequality! This may lead to unphysical and numerically unstable results!
WARNING: RigidBodyInertia: inertiaTensor does not fulfill triangule inequality! This may lead to unphysical and numerically unstable results!
WARNING: RigidBodyInertia: inertiaTensor does not fulfill triangule inequality! This may lead to unphysical and numerically unstable results!
WARNING: RigidBodyInertia: inertiaTensor does not fulfill triangule inequality! This may lead to unphysical and numerically unstable results!
WARNING: RigidBodyInertia: inertiaTensor does not fulfill triangule inequality! This may lead to unphysical and numerically unstable results!
WARNING: RigidBodyInertia: inertiaTensor does not fulfill triangule inequality! This may lead to unphysical and numerically unstable results!
WARNING: RigidBodyInertia: inertiaTensor does not fulfill triangule inequality! This may lead to unphysical and numerically unstable results!
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP200, t = 0.2s, timeToGo = 0s, Nit/step = 2.955
Solver terminated successfully after 0.224673 seconds.
torques at tEnd= 0.7681856909837331
refsol= 0.7681856909852399
tol= 3e-09
******************************************
  TESTMODEL 87 ("serialRobotTest.py") FINISHED SUCCESSFUL
  RESULT = 0.7681856909837331
  ERROR = -1.5067946890212625e-12
******************************************


******************************************
  START TESTMODEL 88 ("sliderCrank3Dtest.py"):
******************************************
slider initial position = 0.19999999999999996
vCB len= 0.3
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 0.2s, timeToGo = 0s, Nit/step = 2
Solver terminated successfully after 0.0855242 seconds.
solution of 3D slidercrank iftomm benchmark= 3.36427617809219
refsol= 3.3642761780921897
tol= 3e-11
******************************************
  TESTMODEL 88 ("sliderCrank3Dtest.py") FINISHED SUCCESSFUL
  RESULT = 3.36427617809219
  ERROR = 4.440892098500626e-16
******************************************


******************************************
  START TESTMODEL 89 ("sliderCrankFloatingTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP5000, t = 0.3s, timeToGo = 0s, Nit/step = 6.055
Solver terminated successfully after 0.142968 seconds.
sol = 0.29485998988749207
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP5000, t = 0.3s, timeToGo = 0s, Nit/step = 6.0214
Solver terminated successfully after 0.333064 seconds.
sol = 0.2967891734913415
solutionSliderCrankIndex2= 0.5916491633788336
refsol= 0.591649163378833
tol= 3e-11
******************************************
  TESTMODEL 89 ("sliderCrankFloatingTest.py") FINISHED SUCCESSFUL
  RESULT = 0.5916491633788336
  ERROR = 5.551115123125783e-16
******************************************


******************************************
  START TESTMODEL 90 ("solverExplicitODE1ODE2test.py"):
******************************************
EXUDYN version=1.10.0
solverExplicitODE1ODE2 err= 3.3767933275918947
refsol= 3.3767933275970896
tol= 3e-11
******************************************
  TESTMODEL 90 ("solverExplicitODE1ODE2test.py") FINISHED SUCCESSFUL
  RESULT = 3.3767933275918947
  ERROR = -5.1949555768260325e-12
******************************************


******************************************
  START TESTMODEL 91 ("sparseMatrixSpringDamperTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
*********************
Static solver (1 load steps):
*********************

Start steps solving loop

Write initial step to solution file and visualize ...
STEP0, factor = 0, timeToGo = 0s
+++++++++++++++ STEP FINISHED ++++++++++++++

+++++++++++++++ COMPUTE STEP +++++++++++++++
STEP1, factor = 1, step size = 1
  START discontinuous iteration 0:
Newton: initial residual = 0.515994; goals: relTol=1e-08, absTol=1e-10
    NEWTON STEP 1: residual = 660.542: relTol = 1280.14: contr. = 1280.14
    update initial residual with current residual; initial residual = 660.542
    NEWTON STEP 2: residual = 0.0172949: relTol = 2.61829e-05: contr. = 2.61829e-05
    NEWTON STEP 3: residual = 0.00015339: relTol = 2.32219e-07: contr. = 0.00886909
    NEWTON STEP 4: residual = 7.5745e-10: relTol = 1.14671e-12: contr. = 4.93806e-06
  Newton: converged after 4 steps; relative error = 1.14671e-12
  PostNewton step: run with 1 threads
  discontinuous iteration error = 0 (disc.it.=0, error goal = 1 ... REACHED)
STEP1, factor = 1, timeToGo = 0s, Nit/step = 4
+++++++++++++++ STEP FINISHED ++++++++++++++

Solver terminated successfully after 0.235467 seconds.
static tip displacement (y)= -6.779862812271389
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
*********************
Static solver (1 load steps):
*********************

Start steps solving loop

Write initial step to solution file and visualize ...
STEP0, factor = 0, timeToGo = 0s
+++++++++++++++ STEP FINISHED ++++++++++++++

+++++++++++++++ COMPUTE STEP +++++++++++++++
STEP1, factor = 1, step size = 1
  START discontinuous iteration 0:
Newton: initial residual = 0.515994; goals: relTol=1e-08, absTol=1e-10
    NEWTON STEP 1: residual = 660.542: relTol = 1280.14: contr. = 1280.14
    update initial residual with current residual; initial residual = 660.542
    NEWTON STEP 2: residual = 0.0172949: relTol = 2.61829e-05: contr. = 2.61829e-05
    NEWTON STEP 3: residual = 0.00015339: relTol = 2.32219e-07: contr. = 0.00886909
    NEWTON STEP 4: residual = 7.73411e-10: relTol = 1.17087e-12: contr. = 5.04211e-06
  Newton: converged after 4 steps; relative error = 1.17087e-12
  PostNewton step: run with 1 threads
  discontinuous iteration error = 0 (disc.it.=0, error goal = 1 ... REACHED)
STEP1, factor = 1, timeToGo = 0s, Nit/step = 4
+++++++++++++++ STEP FINISHED ++++++++++++++

Solver terminated successfully after 0.0127205 seconds.
static tip displacement (y)= -6.77986281227139
refsol= -0.06779862812271394
tol= 3e-11
******************************************
  TESTMODEL 91 ("sparseMatrixSpringDamperTest.py") FINISHED SUCCESSFUL
  RESULT = -0.06779862812271391
  ERROR = 2.7755575615628914e-17
******************************************


******************************************
  START TESTMODEL 92 ("sphereTriangleTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration

Python WARNING [file '/private/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/cibw-run-oz0i9d0f/cp312-macosx_universal2/venv-test-x86_64/lib/python3.12/site-packages/exudyn/solver.py', line 260]: 
Generalized alpha: initial accelerations due to initial velocities can only be computed in dense matrix mode!

  Solve steps: adaptive reduction to step size = 0.000120982, time = 0.0446
  Solve steps: adaptive reduction to step size = 3.7639e-07, time = 0.044721
  Solve steps: adaptive reduction to step size = 0.000111787, time = 0.0955715
  Solve steps: adaptive reduction to step size = 8.79614e-07, time = 0.0956832
  Solve steps: adaptive reduction to step size = 9.60045e-05, time = 0.0985263
  solution did not converge with full Newton
  Newton (time/load step #2606): convergence failed after 15 iterations; relative error = 1.76778e+88, time = 0.490006
  Solve steps: adaptive reduction to step size = 0.0001, time = 0.489806
  Newton (time/load step #2606): convergence failed after 25 iterations; relative error = 1.95382e+52, time = 0.489906
  Solve steps: adaptive reduction to step size = 5e-05, time = 0.489806
  solution did not converge with full Newton
  Newton (time/load step #2606): convergence failed after 16 iterations; relative error = 1.36906e+59, time = 0.489856
  Solve steps: adaptive reduction to step size = 2.5e-05, time = 0.489806
  solution did not converge with full Newton
  Newton (time/load step #2607): convergence failed after 8 iterations; relative error = 1.97051e+105, time = 0.489856
  Solve steps: adaptive reduction to step size = 1.25e-05, time = 0.489831
  solution did not converge with full Newton
  Newton (time/load step #2607): convergence failed after 11 iterations; relative error = 1.37348e+84, time = 0.489844
  Solve steps: adaptive reduction to step size = 6.25e-06, time = 0.489831
  solution did not converge with full Newton
  Newton (time/load step #2607): convergence failed after 23 iterations; relative error = 2.64318e+97, time = 0.489838
  Solve steps: adaptive reduction to step size = 3.125e-06, time = 0.489831
  solution did not converge with full Newton
  Newton (time/load step #2607): convergence failed after 14 iterations; relative error = 6.02951e+45, time = 0.489835
  Solve steps: adaptive reduction to step size = 1.5625e-06, time = 0.489831
  Newton (time/load step #2686): convergence failed after 25 iterations; relative error = 96.4668, time = 0.493816
  Solve steps: adaptive reduction to step size = 0.0001, time = 0.493616
  Newton (time/load step #2703): convergence failed after 25 iterations; relative error = 88.744, time = 0.496216
  Solve steps: adaptive reduction to step size = 0.0001, time = 0.496016
  Newton (time/load step #2715): convergence failed after 25 iterations; relative error = 70.7401, time = 0.497616
  Solve steps: adaptive reduction to step size = 0.0001, time = 0.497416
  Newton (time/load step #2731): convergence failed after 25 iterations; relative error = 104.319, time = 0.499816
  Solve steps: adaptive reduction to step size = 0.0001, time = 0.499616
STEP2734, t = 0.5s, timeToGo = 0s, Nit/step = 5.30505
Solver terminated successfully after 0.343272 seconds.
Solver iteration statistics:
total number of steps:        2734
total number of Newton iterations: 14504
total number of Newton Jacobians:  2066
rejected modified Newton steps:      108
solution of sphereTriangleTest= 1623.0467046847411
refsol= 3.8226410966196975
tol= 3e-11
******************************************
  TESTMODEL 92 ("sphereTriangleTest.py") *FAILED*
  RESULT = 1623.0467046847411
  ERROR = 1619.2240635881215
******************************************


******************************************
  START TESTMODEL 93 ("sphereTriangleTest2.py"):
******************************************


***********************************
*** Test solver: DynamicSolverType.GeneralizedAlpha ***
*** is explicit=False ***
***********************************

+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration

Python WARNING [file '/private/var/folders/y6/nj790rtn62lfktb1sh__79hc0000gn/T/cibw-run-oz0i9d0f/cp312-macosx_universal2/venv-test-x86_64/lib/python3.12/site-packages/exudyn/solver.py', line 260]: 
Generalized alpha: initial accelerations due to initial velocities can only be computed in dense matrix mode!

STEP1365, t = 0.25s, timeToGo = 0s, Nit/step = 6.80952
Solver terminated successfully after 0.375964 seconds.
Solver iteration statistics:
total number of steps:        1365
total number of Newton iterations: 9295
total number of Newton Jacobians:  386
rejected modified Newton steps:      13


***********************************
*** Test solver: DynamicSolverType.VelocityVerlet ***
*** is explicit=True ***
***********************************

+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (VelocityVerlet)
WARNING: VelocityVerlet: still under development
STEP12499, t = 0.25s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.580374 seconds.
Solver iteration statistics:
total number of steps:        12499
total number of Newton iterations: 0
total number of Newton Jacobians:  0
solution of sphereTriangleTest2= 4.356165974603894
solver= DynamicSolverType.GeneralizedAlpha 
sol= [ 2.28555584e-02 -8.46781176e-03 -1.90795166e-04 -4.21511032e-01
 -8.08801267e-01  5.80026017e-02]
solver= DynamicSolverType.VelocityVerlet 
sol= [ 2.29151221e-02  3.48762261e-03 -1.94918921e-04 -1.85820298e+00
  1.39886510e-01  2.00685841e-01]
refsol= 4.356128117693937
tol= 3e-11
******************************************
  TESTMODEL 93 ("sphereTriangleTest2.py") *FAILED*
  RESULT = 4.356165974603894
  ERROR = 3.785690995705693e-05
******************************************


******************************************
  START TESTMODEL 94 ("sphericalJointTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 6.77
Solver terminated successfully after 0.0672543 seconds.
solution of sphericalJointTest= 4.409080446575154
refsol= 4.409080446575089
tol= 3e-11
******************************************
  TESTMODEL 94 ("sphericalJointTest.py") FINISHED SUCCESSFUL
  RESULT = 4.409080446575154
  ERROR = 6.483702463810914e-14
******************************************


******************************************
  START TESTMODEL 95 ("springDamperUserFunctionTest.py"):
******************************************
EXUDYN version=1.10.0
resonance frequency = 50.0
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP5000, t = 50s, timeToGo = 1.04862e-14s, Nit/step = 1.98
Solver terminated successfully after 0.380535 seconds.
Solver iteration statistics:
total number of steps:        5000
total number of Newton iterations: 9900
total number of Newton Jacobians:  9900
uTotal= 0.506287227301098
refsol= 0.5062872273010911
tol= 3e-11
******************************************
  TESTMODEL 95 ("springDamperUserFunctionTest.py") FINISHED SUCCESSFUL
  RESULT = 0.506287227301098
  ERROR = 6.8833827526759706e-15
******************************************


******************************************
  START TESTMODEL 96 ("stiffFlyballGovernor.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP20, t = 0.001s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.0564072 seconds.
solution of stiffFlyballGovernor= 0.8962488779114737
refsol= 0.8962488779114738
tol= 3e-11
******************************************
  TESTMODEL 96 ("stiffFlyballGovernor.py") FINISHED SUCCESSFUL
  RESULT = 0.8962488779114737
  ERROR = -1.1102230246251565e-16
******************************************


******************************************
  START TESTMODEL 97 ("superElementRigidJointTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: implicit second order time integration
STEP5, t = 0.005s, timeToGo = 0s, Nit/step = 2.4
Solver terminated successfully after 0.0501547 seconds.
solution of superElementRigidJointTest= 0.015217208913989044
refsol= 0.015217208913989071
tol= 3e-11
******************************************
  TESTMODEL 97 ("superElementRigidJointTest.py") FINISHED SUCCESSFUL
  RESULT = 0.015217208913989044
  ERROR = -2.7755575615628914e-17
******************************************


******************************************
  START TESTMODEL 98 ("symbolicUserFunctionTest.py"):
******************************************
spring user function: ((((10 * damping) * deltaL_t) + ((stiffness * sign(deltaL)) * pow(abs(deltaL), 1.2))) + force)
load user function:   (load * sin((62.8319 * t)))
start simulation
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (RK44)
STEP10000, t = 50s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.0379279 seconds.
finished:  0.03837394714355469 seconds
u= 0.10039884426884882
solution of symbolicUserFunctionTest= 0.10039884426884882
refsol= 0.10039884426884882
tol= 3e-11
******************************************
  TESTMODEL 98 ("symbolicUserFunctionTest.py") FINISHED SUCCESSFUL
  RESULT = 0.10039884426884882
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 99 ("symbolicModuleTest.py"):
******************************************
Real.newCount= 904
Real.deleteCount= 904
Vector.newCount= 71
Vector.deleteCount= 71
Matrix.newCount= 29
Matrix.deleteCount= 29

finished 796 tests
WRONG results (after vectorTests): 0 

u= 0.9484129575069745
solution of symbolicModuleTest= 0.9484129575069745
refsol= 0.9484129575069745
tol= 3e-11
******************************************
  TESTMODEL 99 ("symbolicModuleTest.py") FINISHED SUCCESSFUL
  RESULT = 0.9484129575069745
  ERROR = 0.0
******************************************


******************************************
  START TESTMODEL 100 ("taskmanagerTest.py"):
******************************************
** CASE 0 **: [1, 1, 0, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 1 **: [2, 1, 0, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 2 **: [5, 1, 0, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 3 **: [1, 1, 0, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 4 **: [2, 1, 0, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 5 **: [5, 1, 0, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 6 **: [1, 1, 0, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 7 **: [2, 1, 0, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 8 **: [5, 1, 0, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 9 **: [1, 1, 0, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 10 **: [2, 1, 0, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 11 **: [5, 1, 0, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 12 **: [1, 0, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370896011591241), np.float64(-0.019429692092482388), np.float64(0.0)]
** CASE 13 **: [2, 0, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370896011591241), np.float64(-0.019429692092482388), np.float64(0.0)]
** CASE 14 **: [5, 0, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370896011591241), np.float64(-0.019429692092482388), np.float64(0.0)]
** CASE 15 **: [1, 1, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370895972813149), np.float64(-0.01942969200297922), np.float64(0.0)], ODE1=[np.float64(0.47267733728511585), np.float64(-8.738338182487565), np.float64(4.999999989331395)]
** CASE 16 **: [2, 1, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370895972813149), np.float64(-0.01942969200297922), np.float64(0.0)], ODE1=[np.float64(0.47267733728511585), np.float64(-8.738338182487565), np.float64(4.999999989331395)]
** CASE 17 **: [5, 1, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370895972813149), np.float64(-0.01942969200297922), np.float64(0.0)], ODE1=[np.float64(0.47267733728511585), np.float64(-8.738338182487565), np.float64(4.999999989331395)]
** CASE 18 **: [1, 0, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125735634), np.float64(-0.505784131203013), np.float64(0.0)]
** CASE 19 **: [2, 0, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125735634), np.float64(-0.505784131203013), np.float64(0.0)]
** CASE 20 **: [5, 0, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125735634), np.float64(-0.505784131203013), np.float64(0.0)]
** CASE 21 **: [1, 1, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125735634), np.float64(-0.505784131203013), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 22 **: [2, 1, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125735634), np.float64(-0.505784131203013), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 23 **: [5, 1, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125735634), np.float64(-0.505784131203013), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 24 **: [1, 0, 1, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.035426415819911045), np.float64(0.0)]
** CASE 25 **: [2, 0, 1, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.035426415819911045), np.float64(0.0)]
** CASE 26 **: [5, 0, 1, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.035426415819911045), np.float64(0.0)]
** CASE 27 **: [1, 0, 1, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.03542641581991131), np.float64(0.0)]
** CASE 28 **: [2, 0, 1, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.03542641581991131), np.float64(0.0)]
** CASE 29 **: [5, 0, 1, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.03542641581991131), np.float64(0.0)]
** CASE 30 **: [1, 0, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 31 **: [2, 0, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 32 **: [5, 0, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 33 **: [1, 1, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 34 **: [2, 1, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 35 **: [5, 1, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)]
** CASE 36 **: [1, 0, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(-2.4162855235097927e-18), np.float64(0.0)]
** CASE 37 **: [2, 0, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(-2.4162855235097927e-18), np.float64(0.0)]
** CASE 38 **: [5, 0, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(-2.4162855235097927e-18), np.float64(0.0)]
** CASE 39 **: [1, 1, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(2.8733242024602744e-18), np.float64(0.0)], ODE1=[np.float64(0.47267733728452793), np.float64(-8.738338182472436), np.float64(4.999999989331395)]
** CASE 40 **: [2, 1, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(2.8733242024602744e-18), np.float64(0.0)], ODE1=[np.float64(0.47267733728452793), np.float64(-8.738338182472436), np.float64(4.999999989331395)]
** CASE 41 **: [5, 1, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(2.8733242024602744e-18), np.float64(0.0)], ODE1=[np.float64(0.47267733728452793), np.float64(-8.738338182472436), np.float64(4.999999989331395)]
** CASE 42 **: [1, 0, 1, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 43 **: [2, 0, 1, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 44 **: [5, 0, 1, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 45 **: [1, 0, 1, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 46 **: [2, 0, 1, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 47 **: [5, 0, 1, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)]
** CASE 48 **: [1, 0, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.342349032618149), np.float64(0.0)]
** CASE 49 **: [2, 0, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.342349032618149), np.float64(0.0)]
** CASE 50 **: [5, 0, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.342349032618149), np.float64(0.0)]
** CASE 51 **: [1, 1, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.342349032618149), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)]
** CASE 52 **: [2, 1, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.342349032618149), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)]
** CASE 53 **: [5, 1, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.342349032618149), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)]
** CASE 54 **: [1, 0, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.0374686446114989), np.float64(0.3896272020876048), np.float64(0.0)]
** CASE 55 **: [2, 0, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.0374686446114989), np.float64(0.3896272020876048), np.float64(0.0)]
** CASE 56 **: [5, 0, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.0374686446114989), np.float64(0.3896272020876048), np.float64(0.0)]
** CASE 57 **: [1, 1, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.03560123860933073), np.float64(0.389039366028907), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)]
** CASE 58 **: [2, 1, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.03560123860933073), np.float64(0.389039366028907), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)]
** CASE 59 **: [5, 1, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.03560123860933073), np.float64(0.389039366028907), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)]
** CASE 60 **: [1, 0, 2, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)]
** CASE 61 **: [2, 0, 2, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)]
** CASE 62 **: [5, 0, 2, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)]
** CASE 63 **: [1, 0, 2, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)]
** CASE 64 **: [2, 0, 2, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)]
** CASE 65 **: [5, 0, 2, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)]
** CASE 66 **: [1, 0, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.953014372865994e-05), np.float64(-0.009952780225753872), np.float64(0.0)]
** CASE 67 **: [2, 0, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.953014372865994e-05), np.float64(-0.009952780225753872), np.float64(0.0)]
** CASE 68 **: [5, 0, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.953014372865994e-05), np.float64(-0.009952780225753872), np.float64(0.0)]
** CASE 69 **: [1, 1, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.95301377294588e-05), np.float64(-0.009952779623020318), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 70 **: [2, 1, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.95301377294588e-05), np.float64(-0.009952779623020318), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 71 **: [5, 1, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.95301377294588e-05), np.float64(-0.009952779623020318), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 72 **: [1, 0, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006309794201), np.float64(-0.018920074543546078), np.float64(0.0)]
** CASE 73 **: [2, 0, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006309794201), np.float64(-0.018920074543546078), np.float64(0.0)]
** CASE 74 **: [5, 0, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006309794201), np.float64(-0.018920074543546078), np.float64(0.0)]
** CASE 75 **: [1, 1, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006240192099), np.float64(-0.01892007417573045), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)]
** CASE 76 **: [2, 1, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006240192099), np.float64(-0.01892007417573045), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)]
** CASE 77 **: [5, 1, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006240192099), np.float64(-0.01892007417573045), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)]
** CASE 78 **: [1, 0, 2, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175337), np.float64(0.0)]
** CASE 79 **: [2, 0, 2, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175337), np.float64(0.0)]
** CASE 80 **: [5, 0, 2, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175337), np.float64(0.0)]
** CASE 81 **: [1, 0, 2, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175534), np.float64(0.0)]
** CASE 82 **: [2, 0, 2, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175534), np.float64(0.0)]
** CASE 83 **: [5, 0, 2, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175534), np.float64(0.0)]
** CASE 84 **: [1, 0, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217901037), np.float64(-0.5632157179128815), np.float64(0.0)]
** CASE 85 **: [2, 0, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217901037), np.float64(-0.5632157179128815), np.float64(0.0)]
** CASE 86 **: [5, 0, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217900993), np.float64(-0.5632157179128813), np.float64(0.0)]
** CASE 87 **: [1, 1, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217901037), np.float64(-0.5632157179128815), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 88 **: [2, 1, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217901037), np.float64(-0.5632157179128815), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 89 **: [5, 1, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217900993), np.float64(-0.5632157179128823), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 90 **: [1, 0, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060724308294), np.float64(-2.2642535240765094), np.float64(0.0)]
** CASE 91 **: [2, 0, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060724308294), np.float64(-2.2642535240765094), np.float64(0.0)]
** CASE 92 **: [5, 0, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.62906072430831), np.float64(-2.2642535240764947), np.float64(0.0)]
** CASE 93 **: [1, 1, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060725106281), np.float64(-2.264253523596042), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 94 **: [2, 1, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060725106281), np.float64(-2.264253523596042), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 95 **: [5, 1, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060725106272), np.float64(-2.2642535235960475), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 96 **: [1, 0, 4, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.4766649535974832), np.float64(-1.5245865369570917), np.float64(0.0)]
** CASE 97 **: [2, 0, 4, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.4766649535974832), np.float64(-1.5245865369570917), np.float64(0.0)]
** CASE 98 **: [5, 0, 4, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.4766649535974832), np.float64(-1.5245865369570917), np.float64(0.0)]
** CASE 99 **: [1, 0, 4, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.47666495359748495), np.float64(-1.5245865369570943), np.float64(0.0)]
** CASE 100 **: [2, 0, 4, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.47666495359748495), np.float64(-1.5245865369570943), np.float64(0.0)]
** CASE 101 **: [5, 0, 4, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.47666495359748406), np.float64(-1.5245865369570937), np.float64(0.0)]
** CASE 102 **: [1, 0, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539387343732), np.float64(-0.4378114618323164), np.float64(0.0)]
** CASE 103 **: [2, 0, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539387343732), np.float64(-0.4378114618323164), np.float64(0.0)]
** CASE 104 **: [5, 0, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539387343732), np.float64(-0.4378114618323164), np.float64(0.0)]
** CASE 105 **: [1, 1, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539396786267), np.float64(-0.4378114624794035), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 106 **: [2, 1, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539396786267), np.float64(-0.4378114624794035), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 107 **: [5, 1, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539396786267), np.float64(-0.4378114624794035), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)]
** CASE 108 **: [1, 0, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.1280987017615587), np.float64(-0.8436540946981768), np.float64(0.0)]
** CASE 109 **: [2, 0, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.1280987017615587), np.float64(-0.8436540946981768), np.float64(0.0)]
** CASE 110 **: [5, 0, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.1280987017615587), np.float64(-0.8436540946981768), np.float64(0.0)]
** CASE 111 **: [1, 1, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870233930543), np.float64(-0.8436540965761697), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)]
** CASE 112 **: [2, 1, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870233930543), np.float64(-0.8436540965761697), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)]
** CASE 113 **: [5, 1, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870233930543), np.float64(-0.8436540965761697), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)]
** CASE 114 **: [1, 0, 4, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.40092552484085653), np.float64(0.0)]
** CASE 115 **: [2, 0, 4, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.40092552484085653), np.float64(0.0)]
** CASE 116 **: [5, 0, 4, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.40092552484085653), np.float64(0.0)]
** CASE 117 **: [1, 0, 4, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.4009255248408582), np.float64(0.0)]
** CASE 118 **: [2, 0, 4, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.4009255248408582), np.float64(0.0)]
** CASE 119 **: [5, 0, 4, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.4009255248408582), np.float64(0.0)]

total cases: 120
result taskmanagerTest= -0.2340681427295032
refsol= -0.23406814272950335
tol= 3e-11
******************************************
  TESTMODEL 100 ("taskmanagerTest.py") FINISHED SUCCESSFUL
  RESULT = -0.2340681427295032
  ERROR = 1.6653345369377348e-16
******************************************


******************************************
  START TESTMODEL 101 ("velocityVerletTest.py"):
******************************************
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (VelocityVerlet)
STEP2000, t = 2s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.00203925 seconds.
p  = [np.float64(1.0912990667233304), np.float64(0.0), np.float64(0.0)]
h= 0.001 , err= 4.541650566514122e-06
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (VelocityVerlet)
STEP4000, t = 2s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.00331783 seconds.
p  = [np.float64(1.0912956605256894), np.float64(0.0), np.float64(0.0)]
h= 0.0005 , err= 1.1354529254603563e-06
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (VelocityVerlet)
STEP8000, t = 2s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.0058745 seconds.
p  = [np.float64(1.091294808938409), np.float64(0.0), np.float64(0.0)]
h= 0.00025 , err= 2.838656449899446e-07
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: explicit time integration (VelocityVerlet)
STEP16000, t = 2s, timeToGo = 0s, Nit/step = 0
Solver terminated successfully after 0.0112077 seconds.
p  = [np.float64(1.0912945960393574), np.float64(0.0), np.float64(0.0)]
h= 0.000125 , err= 7.096659349059564e-08
velocityVerletTest result= 4.365184132226787
velocityVerletTest error= 0.0
refsol= 4.365184132226787
tol= 3e-11
******************************************
  TESTMODEL 101 ("velocityVerletTest.py") FINISHED SUCCESSFUL
  RESULT = 4.365184132226787
  ERROR = 0.0
******************************************


******************************************
  START MINI EXAMPLE 0 ("ObjectMassPoint.py"):
example for ObjectMassPoint completed, test result = 2.0
  MINI EXAMPLE 0 ("ObjectMassPoint.py") FINISHED SUCCESSFUL
  RESULT = 2.0
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 1 ("ObjectMassPoint2D.py"):
example for ObjectMassPoint2D completed, test result = 2.0
  MINI EXAMPLE 1 ("ObjectMassPoint2D.py") FINISHED SUCCESSFUL
  RESULT = 2.0
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 2 ("ObjectMass1D.py"):
example for ObjectMass1D completed, test result = 2.0
  MINI EXAMPLE 2 ("ObjectMass1D.py") FINISHED SUCCESSFUL
  RESULT = 2.0
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 3 ("ObjectRotationalMass1D.py"):
example for ObjectRotationalMass1D completed, test result = 2.0
  MINI EXAMPLE 3 ("ObjectRotationalMass1D.py") FINISHED SUCCESSFUL
  RESULT = 2.0
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 4 ("ObjectRigidBody2D.py"):
example for ObjectRigidBody2D completed, test result = 4.356194490192344
  MINI EXAMPLE 4 ("ObjectRigidBody2D.py") FINISHED SUCCESSFUL
  RESULT = 4.356194490192344
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 5 ("ObjectGenericODE2.py"):
example for ObjectGenericODE2 completed, test result = 1.0039999999354785
  MINI EXAMPLE 5 ("ObjectGenericODE2.py") FINISHED SUCCESSFUL
  RESULT = 1.0039999999354785
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 6 ("ObjectGenericODE1.py"):
example for ObjectGenericODE1 completed, test result = -0.8206847097689384
  MINI EXAMPLE 6 ("ObjectGenericODE1.py") FINISHED SUCCESSFUL
  RESULT = -0.8206847097689384
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 7 ("ObjectKinematicTree.py"):
example for ObjectKinematicTree completed, test result = -3.134018551808591
  MINI EXAMPLE 7 ("ObjectKinematicTree.py") FINISHED SUCCESSFUL
  RESULT = -3.134018551808591
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 8 ("ObjectANCFCable.py"):
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
STEP1, factor = 1, timeToGo = 0s, Nit/step = 6
Solver terminated successfully after 0.00595567 seconds.
example for ObjectANCFCable completed, test result = -0.5013058140308919
  MINI EXAMPLE 8 ("ObjectANCFCable.py") FINISHED SUCCESSFUL
  RESULT = -0.5013058140308919
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 9 ("ObjectANCFCable2D.py"):
+++++++++++++++++++++++++++++++
EXUDYN V1.10.0 solver: nonlinear static solver
STEP1, factor = 1, timeToGo = 0s, Nit/step = 6
Solver terminated successfully after 0.00217408 seconds.
example for ObjectANCFCable2D completed, test result = -0.5013058140308901
  MINI EXAMPLE 9 ("ObjectANCFCable2D.py") FINISHED SUCCESSFUL
  RESULT = -0.5013058140308901
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 10 ("ObjectANCFThinPlate.py"):
example for ObjectANCFThinPlate completed, test result = 0
  MINI EXAMPLE 10 ("ObjectANCFThinPlate.py") FINISHED SUCCESSFUL
  RESULT = 0
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 11 ("ObjectConnectorSpringDamper.py"):
example for ObjectConnectorSpringDamper completed, test result = 0.9733828995763039
  MINI EXAMPLE 11 ("ObjectConnectorSpringDamper.py") FINISHED SUCCESSFUL
  RESULT = 0.9733828995763039
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 12 ("ObjectConnectorCartesianSpringDamper.py"):
example for ObjectConnectorCartesianSpringDamper completed, test result = -0.0009999999999750209
  MINI EXAMPLE 12 ("ObjectConnectorCartesianSpringDamper.py") FINISHED SUCCESSFUL
  RESULT = -0.0009999999999750209
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 13 ("ObjectConnectorRigidBodySpringDamper.py"):
example for ObjectConnectorRigidBodySpringDamper completed, test result = -0.534929955894111
  MINI EXAMPLE 13 ("ObjectConnectorRigidBodySpringDamper.py") FINISHED SUCCESSFUL
  RESULT = -0.534929955894111
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 14 ("ObjectConnectorLinearSpringDamper.py"):
example for ObjectConnectorLinearSpringDamper completed, test result = 0.0004999866342440002
  MINI EXAMPLE 14 ("ObjectConnectorLinearSpringDamper.py") FINISHED SUCCESSFUL
  RESULT = 0.0004999866342440002
  ERROR  = 7.134050294954619e-17


******************************************
  START MINI EXAMPLE 15 ("ObjectConnectorTorsionalSpringDamper.py"):
example for ObjectConnectorTorsionalSpringDamper completed, test result = 0.0004999866342439678
  MINI EXAMPLE 15 ("ObjectConnectorTorsionalSpringDamper.py") FINISHED SUCCESSFUL
  RESULT = 0.0004999866342439678
  ERROR  = 1.5070410197548512e-17


******************************************
  START MINI EXAMPLE 16 ("ObjectConnectorCoordinateSpringDamper.py"):
example for ObjectConnectorCoordinateSpringDamper completed, test result = 0.0019995154213252597
  MINI EXAMPLE 16 ("ObjectConnectorCoordinateSpringDamper.py") FINISHED SUCCESSFUL
  RESULT = 0.0019995154213252597
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 17 ("ObjectConnectorGravity.py"):
example for ObjectConnectorGravity completed, test result = 1.0000000000000484
  MINI EXAMPLE 17 ("ObjectConnectorGravity.py") FINISHED SUCCESSFUL
  RESULT = 1.0000000000000484
  ERROR  = 4.440892098500626e-16


******************************************
  START MINI EXAMPLE 18 ("ObjectConnectorDistance.py"):
example for ObjectConnectorDistance completed, test result = -0.9861806726069355
  MINI EXAMPLE 18 ("ObjectConnectorDistance.py") FINISHED SUCCESSFUL
  RESULT = -0.9861806726069355
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 19 ("ObjectConnectorCoordinate.py"):
example for ObjectConnectorCoordinate completed, test result = 0.04999999999999982
  MINI EXAMPLE 19 ("ObjectConnectorCoordinate.py") FINISHED SUCCESSFUL
  RESULT = 0.04999999999999982
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 20 ("ObjectJointRevoluteZ.py"):
example for ObjectJointRevoluteZ completed, test result = 0.49999999999999795
  MINI EXAMPLE 20 ("ObjectJointRevoluteZ.py") FINISHED SUCCESSFUL
  RESULT = 0.49999999999999795
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 21 ("MarkerSuperElementPosition.py"):
example for MarkerSuperElementPosition completed, test result = 1.0039999999354785
  MINI EXAMPLE 21 ("MarkerSuperElementPosition.py") FINISHED SUCCESSFUL
  RESULT = 1.0039999999354785
  ERROR  = 0.0


******************************************
  START MINI EXAMPLE 22 ("LoadMassProportional.py"):
example for LoadMassProportional completed, test result = -4.904999999999998
  MINI EXAMPLE 22 ("LoadMassProportional.py") FINISHED SUCCESSFUL
  RESULT = -4.904999999999998
  ERROR  = 0.0


