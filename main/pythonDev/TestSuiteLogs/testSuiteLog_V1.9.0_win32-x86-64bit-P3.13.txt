
+++++++++++++++++++++++++++++++++++++++++++ 
+++++        EXUDYN TEST SUITE        +++++ 
+++++++++++++++++++++++++++++++++++++++++++ 
EXUDYN version      = 1.9.0 
EXUDYN build date   = 2024-10-10 09:53:32 
architecture        = 64bit 
processor           = x86 
platform            = win32 
Python version      = 3.13.0 
NumPy version       = 2.1.2 
test tolerance      = 5e-14 
testsuite date (now)= 2024-10-10 10:47:33 
+++++++++++++++++++++++++++++++++++++++++++ 


****************************************** 
  START EXAMPLE 0 ("abaqusImportTest.py"): 
****************************************** 
u-tip for C3D4 =  [-1.39347559e-05 -8.82980001e-05  9.93821996e-07] , nNodes= 214 
u-tip for C3D10 =  [-1.71922325e-05 -1.04097141e-04  6.59659428e-08] , nNodes= 257 
u-tip for C3D8 =  [-1.70918395e-05 -1.03190186e-04 -3.91019710e-09] , nNodes= 176 
u-tip for C3D20 =  [-1.72036326e-05 -1.04325934e-04  1.00487432e-08] , nNodes= 171 
u-tip for C3D20R =  [-1.72590204e-05 -1.04848917e-04  5.46592204e-09] , nNodes= 171 
solution of abaqusImportTest= 0.0005885208722205832 
refsol= 0.0005885208722206333 
tol= 5e-14 
****************************************** 
  EXAMPLE 0 ("abaqusImportTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.0005885208722205832 
  ERROR = -5.0090140368830305e-17 
****************************************** 


****************************************** 
  START EXAMPLE 1 ("ANCFBeamTest.py"): 
****************************************** 
case= 0 CantileverLinear2011 
ne= 8 , ux= 1.8706537496804287e-07 , uy= 0.0008068839288072378 
ne= 8 , ux= 0.14904162148449163 , uy= 0.7068152604035266 
ne= 8 , u= [np.float64(-0.00010900977085270824), np.float64(-0.0001902100879430593), np.float64(-0.018117327797989705)] 
ne= 8 , beta= 45.0 , u= [-0.0142313 -0.0088751  0.1085444] 
ne= 8 , beta= 45.0 , u= [-0.0299886 -0.0153356  0.1557702] 
Solution of ANCFBeam3Dtest= 1.0104863123004535 
refsol= 1.010486312300459 
tol= 5e-14 
****************************************** 
  EXAMPLE 1 ("ANCFBeamTest.py") FINISHED SUCCESSFUL 
  RESULT = 1.0104863123004535 
  ERROR = -5.551115123125783e-15 
****************************************** 


****************************************** 
  START EXAMPLE 2 ("ANCFcable2DuserFunction.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 0.5s, timeToGo = 0s, Nit/step = 5.8
solver finished after 0.163674 seconds.
ANCFcable2DuserFunction test tip pos= [ 1.66562358 -1.06406475  0.        ] 
solution of ANCFcable2DuserFunction test = 0.6015588367721232 
refsol= 0.6015588367721232 
tol= 5e-14 
****************************************** 
  EXAMPLE 2 ("ANCFcable2DuserFunction.py") FINISHED SUCCESSFUL 
  RESULT = 0.6015588367721232 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 3 ("ANCFcontactCircleTest.py"): 
****************************************** 
load f=0.012937500000000003 
EI=0.01725 
tip displacement: x=-0.10207143792176661, y=-0.4842698420787613 
refsol= -0.4842698420787613 
tol= 5e-14 
****************************************** 
  EXAMPLE 3 ("ANCFcontactCircleTest.py") FINISHED SUCCESSFUL 
  RESULT = -0.4842698420787613 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 4 ("ANCFcontactFrictionTest.py"): 
****************************************** 
load f=129.37500000000003 
EI=172.50000000000003 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP300, t = 0.15s, timeToGo = 0s, Nit/step = 3.21333
solver finished after 0.341829 seconds.
Solver iteration statistics:
total number of steps:        300
total number of Newton iterations: 964
total number of Newton Jacobians:  964
tip displacement: y=-0.014187561328096092 
test result= -0.014187561328096092 
refsol= -0.014187561328096003 
tol= 5e-14 
****************************************** 
  EXAMPLE 4 ("ANCFcontactFrictionTest.py") FINISHED SUCCESSFUL 
  RESULT = -0.014187561328096092 
  ERROR = -8.847089727481716e-17 
****************************************** 


****************************************** 
  START EXAMPLE 5 ("ANCFgeneralContactCircle.py"): 
****************************************** 
exudyn version= 1.9.0 
pre-stretch force= -80.0 
beam mass per length= 0.004 
auto computed searchTree box={[-0.5,-0.5,-0.5], [2.5,0.5,0.5]}
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
  Solve steps: adaptive increase to step size = 0.0005 due to fast convergence, time = 0.00725
  Solve steps: adaptive increase to step size = 0.001 due to fast convergence, time = 0.01825
STEP130, t = 0.1s, timeToGo = 0s, Nit/step = 8.22308
solver finished after 0.307024 seconds.
Solver iteration statistics:
total number of steps:        130
total number of Newton iterations: 1069
total number of Newton Jacobians:  119
rejected modified Newton steps:      6
node0 pos:  [-0.09227833 -0.48937593  0.        ] 
ANCFgeneralContactCircle sol= -0.5816542531620952 
refsol= -0.5816542531620952 
tol= 5e-14 
****************************************** 
  EXAMPLE 5 ("ANCFgeneralContactCircle.py") FINISHED SUCCESSFUL 
  RESULT = -0.5816542531620952 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 6 ("ANCFmovingRigidBodyTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
STEP2, factor = 1, timeToGo = 0s, Nit/step = 14
solver finished after 0.0184581 seconds.
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP200, t = 0.1s, timeToGo = 0s, Nit/step = 1.16
solver finished after 0.249262 seconds.
static deflection  = -0.06446474690615722 
dynamic deflection = -0.06446622244371993 
ANCFmovingRigidBodyTest= -0.12893096934987713 
refsol= -0.12893096934983617 
tol= 5e-14 
****************************************** 
  EXAMPLE 6 ("ANCFmovingRigidBodyTest.py") FINISHED SUCCESSFUL 
  RESULT = -0.12893096934987713 
  ERROR = -4.0967229608668276e-14 
****************************************** 


****************************************** 
  START EXAMPLE 7 ("ANCFslidingAndALEjointTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
WARNING: JointALEMoving2D: sliding coordinate < 0; further warnings suppressed!

Python WARNING [file 'C:\Users\c8501009\Anaconda\envs\venvP313\Lib\site-packages\exudyn\solver.py', line 166]: 
WARNING: SlidingJoint2D: sliding coordinate < 0; further warnings suppressed!


STEP10, factor = 1, timeToGo = 0s, Nit/step = 4.7
solver finished after 0.130775 seconds.
select cable coordinate 42 
static solution of cable1 = -2.1973218891272532 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP400, t = 0.8s, timeToGo = 0s, Nit/step = 4.9925
solver finished after 1.133 seconds.
Solver iteration statistics:
total number of steps:        400
total number of Newton iterations: 1997
total number of Newton Jacobians:  1997
dynamic solution of cable1 = -2.2290865056280076 
result of ANCFslidingAndALEjointTest= -4.426408394755261 
refsol= -4.426408394755261 
tol= 5e-14 
****************************************** 
  EXAMPLE 7 ("ANCFslidingAndALEjointTest.py") FINISHED SUCCESSFUL 
  RESULT = -4.426408394755261 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 8 ("bricardMechanism.py"): 
****************************************** 
dof {'degreeOfFreedom': np.int64(1), 'redundantConstraints': np.int64(1), 'nODE2': 35, 'nODE1': 0, 'nAE': 36, 'nPureAE': np.int64(1)} 
eigenvalues= [0.] 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 6.298
solver finished after 0.157309 seconds.
====================
CPU-time statistics:
  total time   = 0.157 seconds
  measured time= 0.154 seconds (=98.1%) 
  non-zero timer [__ sub-timer]:
  factorization     = 1.42%
  newtonIncrement   = 11.8%
  integrationFormula= 0.524%
  ODE2RHS           = 26.3%
  ODE1RHS           = 0.119%
  AERHS             = 8.24%
  totalJacobian     = 0.278%
  __jacobianODE2    = 0.149%
  __jacobianODE1    = 0.000778%
  __jacobianAE      = 0.0948%
  massMatrix        = 13.2%
  reactionForces    = 38.1%
  overhead          = 0.0393%
  visualization/user= 0.0182%
Solver iteration statistics:
total number of steps:        1000
total number of Newton iterations: 6298
total number of Newton Jacobians:  16
solution of bricardMechanism test= 4.172189649307425 
refsol= 4.172189649307425 
tol= 5e-14 
****************************************** 
  EXAMPLE 8 ("bricardMechanism.py") FINISHED SUCCESSFUL 
  RESULT = 4.172189649307425 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 9 ("carRollingDiscTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP250, t = 0.5s, timeToGo = 0s, Nit/step = 2.336
solver finished after 0.140251 seconds.
carRollingDiscTest u= -0.23940048717113896 
refsol= -0.23940048717113782 
tol= 5e-14 
****************************************** 
  EXAMPLE 9 ("carRollingDiscTest.py") FINISHED SUCCESSFUL 
  RESULT = -0.23940048717113896 
  ERROR = -1.1379786002407855e-15 
****************************************** 


****************************************** 
  START EXAMPLE 10 ("compareAbaqusAnsysRotorEigenfrequencies.py"): 
****************************************** 
natural frequencies from Ansys model, sparse= False : 104.63701055079027 
natural frequencies from Abaqus model, sparse= False : 104.6370132606254 
natural frequencies from Ansys model, sparse= True : 104.63701055079076 
natural frequencies from Abaqus model, sparse= True : 104.637013260633 
error of compareAbaqusAnsysRotorEigenfrequencies (due to sparse solver)= -3.1121771826292413e-18 
solution of compareAbaqusAnsysRotorEigenfrequencies (with treshold)= 0 
refsol= 0.0004185480476228555 
tol= 5e-14 
****************************************** 
  EXAMPLE 10 ("compareAbaqusAnsysRotorEigenfrequencies.py") FINISHED SUCCESSFUL 
  RESULT = 0.0004185480476228394 
  ERROR = -1.610040226140974e-17 
****************************************** 


****************************************** 
  START EXAMPLE 11 ("compareFullModifiedNewton.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 2s, timeToGo = 0s, Nit/step = 6.13
solver finished after 0.0022291 seconds.
Solver iteration statistics:
total number of steps:        100
total number of Newton iterations: 613
total number of Newton Jacobians:  49
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 2s, timeToGo = 0s, Nit/step = 2.78
solver finished after 0.0017797 seconds.
Solver iteration statistics:
total number of steps:        100
total number of Newton iterations: 278
total number of Newton Jacobians:  278
compareFullModifiedNewton u= 0.00020079676000188396 
refsol= 0.00020079676000188396 
tol= 5e-14 
****************************************** 
  EXAMPLE 11 ("compareFullModifiedNewton.py") FINISHED SUCCESSFUL 
  RESULT = 0.00020079676000188396 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 12 ("complexEigenvaluesTest.py"): 
****************************************** 
dRel = 0.05 , decay= 0.7301153801794058 
resonance frequency = 50.0 
static displacement = 0.02 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 1
solver finished after 0.0132045 seconds.
MSD analytical eigenvalues: (-2.5+49.937460888595446j) 
MSD complex eigenvalues: [-2.5-49.93746089j -2.5+49.93746089j] 
MSD numerical eigenfrequency in Hz: 7.947793745878157 
numerical damping dRel           : 0.04999999999999998 
*********************
 
numerical eigenfrequency (in Hz) : 12.327934783008315 
numerical eigenfrequency damped  : 12.305725604590139 
numerical damping dRel           : 0.05999850003749908 
numerical eigenfrequency GE      : 12.327934783008315 
analytical eigenfrequency (in Hz): 12.327934783008317 
error eigenvalues: 0.0400465912833908 
*********************
 
numerical eigenvalues in Hz: [ 38.81173295  38.81173295 123.126052   123.126052   128.4712102
 128.4712102 ] 
numerical eigenvalues GE: [ 38.81173295 123.126052   128.4712102 ] 
result of computeODE2AEeigenvaluesTest2: 0.42816392078752485 
refsol= 0.42816392078752413 
tol= 5e-14 
****************************************** 
  EXAMPLE 12 ("complexEigenvaluesTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.42816392078752485 
  ERROR = 7.216449660063518e-16 
****************************************** 


****************************************** 
  START EXAMPLE 13 ("computeODE2AEeigenvaluesTest.py"): 
****************************************** 
numerical eigenvalues in Hz: 12.327934783008315 
analytical eigenvalues in Hz: 12.327934783008317 
error eigenvalues: 1.44092004919479e-16 
numerical eigenvalues in Hz: [ 38.81173295 123.126052   128.4712102 ] 
result of computeODE2AEeigenvaluesTest: 0.3881173295041342 
refsol= 0.38811732950413347 
tol= 5e-14 
****************************************** 
  EXAMPLE 13 ("computeODE2AEeigenvaluesTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.3881173295041342 
  ERROR = 7.216449660063518e-16 
****************************************** 


****************************************** 
  START EXAMPLE 14 ("computeODE2EigenvaluesTest.py"): 
****************************************** 
EI=172.50000000000003 
rhoA=0.78 
eigenvalues= [ 83.17966445 229.28844646 449.50021798] 
omega analytical = [ 83.17963697 229.28787233 449.4959069 ] 
omega difference= -2.747979063144612e-05 
refsol= -2.749026293713541e-11 
tol= 5e-14 
****************************************** 
  EXAMPLE 14 ("computeODE2EigenvaluesTest.py") FINISHED SUCCESSFUL 
  RESULT = -2.747979063144612e-11 
  ERROR = 1.047230568928986e-14 
****************************************** 


****************************************** 
  START EXAMPLE 15 ("connectorGravityTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (RK67)
STEP1000, t = 1e+06s, timeToGo = 0s, Nit/step = 0
solver finished after 0.0217583 seconds.
Solver iteration statistics:
total number of steps:        1000
total number of Newton iterations: 0
total number of Newton Jacobians:  0
result for ObjectConnectorGravity = 1014867.2330320379 
refsol= 1014867.2330320379 
tol= 5e-14 
****************************************** 
  EXAMPLE 15 ("connectorGravityTest.py") FINISHED SUCCESSFUL 
  RESULT = 1014867.2330320379 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 16 ("connectorRigidBodySpringDamperTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 0.1s, timeToGo = 0s, Nit/step = 1
solver finished after 0.0055383 seconds.
Solver iteration statistics:
total number of steps:        100
total number of Newton iterations: 100
total number of Newton Jacobians:  100
solution of connectorRigidBodySpringDamperTest= 0.1827622474318292 
refsol= 0.1827622474318292 
tol= 5e-14 
****************************************** 
  EXAMPLE 16 ("connectorRigidBodySpringDamperTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.1827622474318292 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 17 ("contactCoordinateTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1281, t = 0.25s, timeToGo = 0s, Nit/step = 1.01874
solver finished after 0.0024826 seconds.
Solver iteration statistics:
total number of steps:        1281
total number of Newton iterations: 1305
total number of Newton Jacobians:  1305
contactCoordinateTest= 0.0553131995062827 
refsol= 0.0553131995062827 
tol= 5e-14 
****************************************** 
  EXAMPLE 17 ("contactCoordinateTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.0553131995062827 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 18 ("ConvexContactTest.py"): 
****************************************** 
PostNewton Connector 2: 0.0005: changed from gap 0 to 0.000920964
PostNewton Connector 2: 0.014: changed from gap 2.8254e-05 to -3.91898e-05
PostNewton Connector 2: 0.027: changed from gap -3.66667e-05 to 5.02363e-06
PostNewton Connector 2: 0.0385: changed from gap 5.76866e-06 to -3.62366e-05
result of ConvexContactTest= 0.011770267410694153 
refsol= 0.011770267410694153 
tol= 5e-14 
****************************************** 
  EXAMPLE 18 ("ConvexContactTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.011770267410694153 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 19 ("coordinateSpringDamperExt.py"): 
****************************************** 
fMu= 1.4715 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
  Newton (time/load step #1): convergence failed after 25 iterations; relative error = 1.60196e-08, time = 0.002
  Solve steps: adaptive reduction to step size = 0.001, time = 0
  Newton (time/load step #618): convergence failed after 25 iterations; relative error = 0.14723, time = 1.003
  Solve steps: adaptive reduction to step size = 0.001, time = 1.001
STEP1122, t = 2s, timeToGo = 0s, Nit/step = 4.26025
solver finished after 0.0347854 seconds.
result of coordinateSpringDamperExt= 17.084935539925155 
refsol= 17.084935539925155 
tol= 5e-14 
****************************************** 
  EXAMPLE 19 ("coordinateSpringDamperExt.py") FINISHED SUCCESSFUL 
  RESULT = 17.084935539925155 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 20 ("coordinateVectorConstraint.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 1.989
solver finished after 0.0712906 seconds.
p0= [np.float64(-0.705683638452107), np.float64(-0.3768429413177273), np.float64(0.0)] 
solution of coordinateVectorConstraint= -1.0825265797698342 
refsol= -1.0825265797698322 
tol= 5e-14 
****************************************** 
  EXAMPLE 20 ("coordinateVectorConstraint.py") FINISHED SUCCESSFUL 
  RESULT = -1.0825265797698342 
  ERROR = -1.9984014443252818e-15 
****************************************** 


****************************************** 
  START EXAMPLE 21 ("coordinateVectorConstraintGenericODE2.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 1.989
solver finished after 0.0563186 seconds.
p0= [np.float64(-0.705683638452107), np.float64(-0.3768429413177273), np.float64(0.0)] 
solution of coordinateVectorConstraint= -1.0825265797698342 
refsol= -1.0825265797698322 
tol= 5e-14 
****************************************** 
  EXAMPLE 21 ("coordinateVectorConstraintGenericODE2.py") FINISHED SUCCESSFUL 
  RESULT = -1.0825265797698342 
  ERROR = -1.9984014443252818e-15 
****************************************** 


****************************************** 
  START EXAMPLE 22 ("distanceSensor.py"): 
****************************************** 
auto computed searchTree box={[-1.03536,-1,-0.1], [1.9,1,0.1]}
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (RK44)
STEP2500, t = 0.25s, timeToGo = 1.22037e-14s, Nit/step = 0
solver finished after 0.272004 seconds.
pLast= [np.float64(-0.6061511314921347), np.float64(-0.2754081005309402), np.float64(0.0)] 
 
sensors= [ 1.56720969e-01 -4.00266307e-18] [1.08660730e-01 4.46753745e-17] [0.11237434 0.41190196] [0.2754081  0.93573925] [ 2.00000000e-01  4.00266307e-18 -4.46753745e-17] 
 
solution of distanceSensor= 1.867764310778691 
refsol= 1.867764310778691 
tol= 5e-14 
****************************************** 
  EXAMPLE 22 ("distanceSensor.py") FINISHED SUCCESSFUL 
  RESULT = 1.867764310778691 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 23 ("driveTrainTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 0.1s, timeToGo = 0s, Nit/step = 6.413
solver finished after 0.509689 seconds.
phiCrank 0.881319652069214 
phiFlyWheel 0.8813197447677692 
solution of driveTrainTest= -9.269855516524927e-08 
refsol= -9.269855516524927e-08 
tol= 5e-14 
****************************************** 
  EXAMPLE 23 ("driveTrainTest.py") FINISHED SUCCESSFUL 
  RESULT = -9.269855516524927e-08 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 24 ("explicitLieGroupIntegratorPythonTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP400, t = 0.01s, timeToGo = 0s, Nit/step = 0
solver finished after 0.229161 seconds.
explicitLieGroupIntegratorPythonTest= 149.8473939540758 
refsol= 149.8473939540758 
tol= 5e-14 
****************************************** 
  EXAMPLE 24 ("explicitLieGroupIntegratorPythonTest.py") FINISHED SUCCESSFUL 
  RESULT = 149.8473939540758 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 25 ("explicitLieGroupIntegratorTest.py"): 
****************************************** 
DynamicSolverType.ExplicitMidpoint,h= 0.001 :
  omega = [  -9.25903319 -100.05787564 -111.56014921] 
  coords= [  0.           0.         -19.62        -0.29022561   1.22720976
  -2.81489467] 
DynamicSolverType.RK44,h= 0.001 :
  omega = [ -27.67663523 -106.16651966 -102.45471373] 
  coords= [  0.           0.         -19.62        -1.43361238   1.02208338
  -2.29792145] 
DynamicSolverType.RK67,h= 0.001 :
  omega = [ -27.65849136 -106.16380496 -102.46246956] 
  coords= [  0.           0.         -19.62        -1.43257991   1.02227719
  -2.29872218] 
DynamicSolverType.DOPRI5,h= 0.001 :
  omega = [ -27.65851484 -106.16380357 -102.46246458] 
  coords= [  0.           0.         -19.62        -1.43258163   1.02227688
  -2.29872073] 
nSteps= 8517 
explicitLieGrouIntegratorTest result= 0.16164013319819145 
explicitLieGrouIntegratorTest error= 6.938893903907228e-16 
refsol= 0.16164013319819065 
tol= 5e-14 
****************************************** 
  EXAMPLE 25 ("explicitLieGroupIntegratorTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.16164013319819145 
  ERROR = 8.049116928532385e-16 
****************************************** 


****************************************** 
  START EXAMPLE 26 ("fourBarMechanismTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP2000, t = 2s, timeToGo = 0s, Nit/step = 1.8385
solver finished after 0.0547662 seconds.
solution of fourbar mechanism = -2.3763357805181795 
refsol= -2.376335780518213 
tol= 5e-14 
****************************************** 
  EXAMPLE 26 ("fourBarMechanismTest.py") FINISHED SUCCESSFUL 
  RESULT = -2.3763357805181795 
  ERROR = 3.3306690738754696e-14 
****************************************** 


****************************************** 
  START EXAMPLE 27 ("fourBarMechanismIftomm.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP400, t = 4s, timeToGo = 0s, Nit/step = 6.8475
solver finished after 0.0554411 seconds.
max energy error= 0.11401559727742239 
pos first bar= [np.float64(0.05815092990659491), np.float64(0.49660695660597587), np.float64(0.0)] 
fourBarMechanismIftomm result: 0.1721665271840173 
refsol= 0.1721665271840173 
tol= 5e-14 
****************************************** 
  EXAMPLE 27 ("fourBarMechanismIftomm.py") FINISHED SUCCESSFUL 
  RESULT = 0.1721665271840173 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 28 ("generalContactCylinderTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (ExplicitEuler)
STEP2000, t = 2s, timeToGo = 5.11486e-14s, Nit/step = 0
solver finished after 0.934513 seconds.
solution of generalContactCylinderTest = 12.246626442545603 
refsol= 12.246626442545603 
tol= 5e-14 
****************************************** 
  EXAMPLE 28 ("generalContactCylinderTest.py") FINISHED SUCCESSFUL 
  RESULT = 12.246626442545603 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 29 ("generalContactCylinderTrigsTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (ExplicitEuler)
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 0
solver finished after 0.213421 seconds.
solution of generalContactCylinderTest = 5.486908430912642 
refsol= 5.486908430912642 
tol= 5e-14 
****************************************** 
  EXAMPLE 29 ("generalContactCylinderTrigsTest.py") FINISHED SUCCESSFUL 
  RESULT = 5.486908430912642 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 30 ("generalContactFrictionTests.py"): 
****************************************** 
expect u0z= 0.001 
expect uFy= 0.010000000000000002 
force rolling= 0.5 , torque= 0.020000000000000004 
auto computed searchTree box={[-1.25,-0.5125,-0.05], [0.5125,0.649,0.1875]}
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (ExplicitEuler)
STEP4000, t = 0.8s, timeToGo = 2.58477e-14s, Nit/step = 0
solver finished after 0.372497 seconds.
coords node2 = [ 2.81737349e-02  5.88826146e-01 -9.17937852e-04 -3.32251694e+00
 -2.45886311e-01  1.08994410e+00] 
coords node5 = [ 0.         -0.00991814  0.          0.          0.          0.        ] 
coords node7 = [0.        0.        0.        2.2391945 0.        0.       ] 
coords node8 = [-2.30993773e-01  9.74098645e-04 -7.50000341e-02  1.05480710e-02
  2.52477480e+00  4.83000432e-03] 
coords node9 = [-7.37214266e-01  7.43545965e-02 -1.88095494e-02 -3.09909401e-04
  8.05061689e-05 -8.24472921e-01] 
solution of generalContactFrictionTest= 12.027740342293988 
refsol= 12.027740342293988 
tol= 5e-14 
****************************************** 
  EXAMPLE 30 ("generalContactFrictionTests.py") FINISHED SUCCESSFUL 
  RESULT = 12.027740342293988 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 31 ("generalContactSpheresTest.py"): 
****************************************** 
create mass 0 
generalContactSpheresTest: create bodies: 0.028218507766723633 seconds 
treesize= 8000 
generalContactSpheresTest: gContact: 0.0014760494232177734 seconds 
finish gContact 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (ExplicitEuler)
STEP500, t = 0.1s, timeToGo = 0s, Nit/step = 0
solver finished after 0.462208 seconds.
====================
CPU-time statistics:
  total time   = 0.462 seconds
  measured time= 0.46 seconds (=99.4%) 
  non-zero timer [__ sub-timer]:
  newtonIncrement   = 0.258%
  integrationFormula= 0.0882%
  ODE2RHS           = 98.1%
  writeSolution     = 1.44%
  overhead          = 0.0657%
  visualization/user= 0.00759%
special timers:
  Contact:BoundingBoxes = 0.08251s
  Contact:SearchTree = 0.019881s
  Contact:ODE2RHS = 0.37145s

u = [ 0.11531681 -0.26257086 -0.96660072] 
solution of generalContactSpheresTest= -1.1138547720263723 
refsol= -1.1138547720263323 
tol= 5e-14 
****************************************** 
  EXAMPLE 31 ("generalContactSpheresTest.py") FINISHED SUCCESSFUL 
  RESULT = -1.1138547720263723 
  ERROR = -3.9968028886505635e-14 
****************************************** 


****************************************** 
  START EXAMPLE 32 ("genericJointUserFunctionTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP500, t = 2.5s, timeToGo = 0s, Nit/step = 7.578
solver finished after 0.187948 seconds.
pos= [0.23743829 0.6528568  0.30194331] 
solution of GenericJointTest= 1.1922383967562717 
refsol= 1.1922383967562884 
tol= 5e-14 
****************************************** 
  EXAMPLE 32 ("genericJointUserFunctionTest.py") FINISHED SUCCESSFUL 
  RESULT = 1.1922383967562717 
  ERROR = -1.6653345369377348e-14 
****************************************** 


****************************************** 
  START EXAMPLE 33 ("genericODE2test.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP2000, t = 1s, timeToGo = 0s, Nit/step = 1
solver finished after 0.147493 seconds.
solution of genericODE2test= 0.036045463499024655 
refsol= 0.036045463499024655 
tol= 5e-14 
****************************************** 
  EXAMPLE 33 ("genericODE2test.py") FINISHED SUCCESSFUL 
  RESULT = 0.036045463499024655 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 34 ("geneticOptimizationTest.py"): 
****************************************** 
--- 0.010780096054077148 seconds --- 
[pOpt, vOpt]= [{'mass': 2.532848072009533, 'spring': 6921.681730138393, 'force': 217.16911303068966}, np.float64(0.0030262381366063158)] 
optimum= 0.0030262381366063158 
geneticOptimizationTest testResult= 0.10117518366826603 
geneticOptimizationTest error= 0.0 
refsol= 0.10117518366826603 
tol= 5e-14 
****************************************** 
  EXAMPLE 34 ("geneticOptimizationTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.10117518366826603 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 35 ("geometricallyExactBeam2Dtest.py"): 
****************************************** 
n0= [0. 0. 0.] 
p= [0.04419417 0.04419417 0.        ] 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
STEP10, factor = 1, timeToGo = 0s, Nit/step = 4.3
solver finished after 0.0032578 seconds.
n = 16 , uTip = [-1.19715078 -2.21150284] 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
STEP10, factor = 1, timeToGo = 0s, Nit/step = 4.3
solver finished after 0.0029035 seconds.
n = 16 , uTip = [-1.19715078 -2.21150284] 
solution of geometricallyExactBeam2Dtest= -2.2115028353806543 
refsol= -2.2115028353806547 
tol= 5e-14 
****************************************** 
  EXAMPLE 35 ("geometricallyExactBeam2Dtest.py") FINISHED SUCCESSFUL 
  RESULT = -2.2115028353806543 
  ERROR = 4.440892098500626e-16 
****************************************** 


****************************************** 
  START EXAMPLE 36 ("geometricallyExactBeamTest.py"): 
****************************************** 
case= 0 CantileverLinear2011 
ne= 8 , ux= 1.8764659426295793e-07 , uy= 0.0008068840238244317 
ne= 8 , ux= 0.15016895118681473 , uy= 0.7082974219968227 
ne= 8 , u= [np.float64(-0.00010943825970310961), np.float64(-0.00018866092698509803), np.float64(-0.018117408242732932)] 
ne= 8 , beta= 45.0 , u= [-0.014319  -0.0089257  0.1086972] 
ne= 8 , beta= 45.0 , u= [-0.0302598 -0.0155055  0.1561971] 
Solution of geometricallyExactBeamTest= 1.0128209428598958 
refsol= 1.0128209428598958 
tol= 5e-14 
****************************************** 
  EXAMPLE 36 ("geometricallyExactBeamTest.py") FINISHED SUCCESSFUL 
  RESULT = 1.0128209428598958 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 37 ("gridGeomExactBeam2D.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 0.1s, timeToGo = 0s, Nit/step = 7.2
solver finished after 0.0300143 seconds.
grid = (16, 4) , uTip = [-0.1474196  -1.58279657] 
solution of gridGeomExactBeam2D= -1.582796574326255 
refsol= -1.582796574326255 
tol= 5e-14 
****************************************** 
  EXAMPLE 37 ("gridGeomExactBeam2D.py") FINISHED SUCCESSFUL 
  RESULT = -1.582796574326255 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 38 ("heavyTop.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP2000, t = 0.2s, timeToGo = 0s, Nit/step = 2.8585
solver finished after 0.105742 seconds.
solution of heavy top = 33.42312575174431 
refsol= 33.42312575174431 
tol= 5e-14 
****************************************** 
  EXAMPLE 38 ("heavyTop.py") FINISHED SUCCESSFUL 
  RESULT = 33.42312575174431 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 39 ("hydraulicActuatorSimpleTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP400, t = 0.4s, timeToGo = 0s, Nit/step = 2.405
solver finished after 0.0068522 seconds.
Solver iteration statistics:
total number of steps:        400
total number of Newton iterations: 962
total number of Newton Jacobians:  1
hydraulics C++: 
pressures= [6443407.76152315 2988633.30906247] 
velocity= [-0.00506708  0.20480658  0.        ] 
solution of hydraulicActuatorSimpleTest = 7.130440021870289 
refsol= 7.130440021870293 
tol= 5e-14 
****************************************** 
  EXAMPLE 39 ("hydraulicActuatorSimpleTest.py") FINISHED SUCCESSFUL 
  RESULT = 7.130440021870289 
  ERROR = -4.440892098500626e-15 
****************************************** 


****************************************** 
  START EXAMPLE 40 ("kinematicTreeAndMBStest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP500, t = 0.5s, timeToGo = 0s, Nit/step = 7.336
solver finished after 0.145992 seconds.
Solver iteration statistics:
total number of steps:        500
total number of Newton iterations: 3668
total number of Newton Jacobians:  32
sensor MBS 0= [np.float64(0.09649755382210752), np.float64(0.2), np.float64(0.3)] 
sensor KT 0 = [np.float64(0.09649755964889589), np.float64(0.2), np.float64(0.3)] 
sensor MBS 1= [np.float64(-0.03649986435032849), np.float64(-3.130056650664611e-47), np.float64(7.357294867323679e-20)] 
sensor KT 1 = [np.float64(-0.03658902403217006), np.float64(0.0), np.float64(0.0)] 
sensor MBS 2= [np.float64(4.343389812175632), np.float64(-1.5195634813771444), np.float64(-2.7864975602889025e-19)] 
sensor KT 2 = [np.float64(4.344370428538827), np.float64(-1.5199923515106548), np.float64(0.0)] 
sensor MBS 3= [np.float64(-4.871588865687116), np.float64(11.5755116267634), np.float64(9.572785856157163)] 
sensor KT 3 = [np.float64(-4.8710822096676445), np.float64(11.57479831109662), np.float64(9.573370704366607)] 
sensor MBS 4= [np.float64(0.40968772041623003), np.float64(0.5407346039060374), np.float64(-0.055733977059001794)] 
sensor KT 4 = [np.float64(0.40968637829673915), np.float64(0.5407251680994525), np.float64(-0.05572705501765407)] 
sensor MBS 5= [np.float64(-0.12931282908348632), np.float64(0.7769427592762067), np.float64(0.9383230151464277)] 
sensor KT 5 = [np.float64(-0.12930401977404432), np.float64(0.7769439243217635), np.float64(0.9383506256106637)] 
sensor MBS 6= [np.float64(0.9828403825907992), np.float64(-3.520885678829745), np.float64(-0.46080266227700206)] 
sensor KT 6 = [np.float64(0.9827936303138654), np.float64(-3.520942263370709), np.float64(-0.4606867367813206)] 
sensor MBS 7= [np.float64(-9.762331477980439), np.float64(-1.2803761283879307), np.float64(-9.967031406616648)] 
sensor KT 7 = [np.float64(-9.762063351236938), np.float64(-1.2802252295518066), np.float64(-9.96699256692536)] 
sensor MBS 8= [np.float64(0.062345809918613604), np.float64(-0.05869332788731185), np.float64(-14.009884441701978)] 
sensor KT 8 = [np.float64(0.06248813958425033), np.float64(-0.05879655347455574), np.float64(-14.009655118481698)] 
sensor MBS 9= [np.float64(-7.230122631571808), np.float64(-28.751191719226874), np.float64(20.003568336464944)] 
sensor KT 9 = [np.float64(-7.230364341111877), np.float64(-28.75131454087252), np.float64(20.004135590274515)] 
sensor MBS 10= [np.float64(-14.727606452124796), np.float64(-0.7291540052505052), np.float64(-35.429776648997596)] 
sensor KT 10 = [np.float64(-14.725446877365563), np.float64(-0.7262283175771538), np.float64(-35.43283157505498)] 
solution of kinematicTreeAndMBStest 1= 257.1080071516817 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP500, t = 0.5s, timeToGo = 0s, Nit/step = 6.694
solver finished after 0.226475 seconds.
sensor MBS 0= [0.22016409 1.41968647 0.        ] 
sensor KT 0 = [0.22016733 1.41968519 0.        ] 
solution of kinematicTreeAndMBStest 2= 2.8733122322318465 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP250, t = 0.25s, timeToGo = 0s, Nit/step = 6.508
solver finished after 0.27758 seconds.
sensor MBS 0= [-0.56035361  1.86769344  0.        ] 
sensor KT 0 = [-0.56035363  1.86769408  0.        ] 
solution of kinematicTreeAndMBStest 3= 3.8998852105799457 
solution of kinematicTreeAndMBStest all= 2.638812045944935e-05 
refsol= 2.6388120463802767e-05 
tol= 5e-14 
****************************************** 
  EXAMPLE 40 ("kinematicTreeAndMBStest.py") FINISHED SUCCESSFUL 
  RESULT = 2.638812045944935e-05 
  ERROR = -4.35341731197178e-15 
****************************************** 


****************************************** 
  START EXAMPLE 41 ("kinematicTreeConstraintTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP125, t = 0.5s, timeToGo = 0s, Nit/step = 8.2
solver finished after 0.0768453 seconds.
sensor MBS 0= [ 0.77858018 -0.46489694  0.        ] 
sensor KT 0 = [ 0.77853324 -0.46490618  0.        ] 
solution of kinematicTreeConstraintTest= 1.81359753846204 
refsol= 1.8135975384620484 
tol= 5e-14 
****************************************** 
  EXAMPLE 41 ("kinematicTreeConstraintTest.py") FINISHED SUCCESSFUL 
  RESULT = 1.81359753846204 
  ERROR = -8.43769498715119e-15 
****************************************** 


****************************************** 
  START EXAMPLE 42 ("kinematicTreeTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (RK44)
STEP200, t = 1s, timeToGo = 0s, Nit/step = 0
solver finished after 0.0069402 seconds.
coordinates= [-1.31995028 -0.03667128 -0.0406166  -0.60654163  0.69439583] 
solution of genericODE2test= -1.309383960216405 
refsol= -1.309383960216414 
tol= 5e-14 
****************************************** 
  EXAMPLE 42 ("kinematicTreeTest.py") FINISHED SUCCESSFUL 
  RESULT = -1.309383960216405 
  ERROR = 8.881784197001252e-15 
****************************************** 


****************************************** 
  START EXAMPLE 43 ("laserScannerTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP250, t = 0.5s, timeToGo = 0s, Nit/step = 16.88
solver finished after 0.593894 seconds.
solution of mecanumWheelRollingDiscTest= 2.695064443768281 
refsol= 2.695064443768281 
tol= 5e-14 
****************************************** 
  EXAMPLE 43 ("laserScannerTest.py") FINISHED SUCCESSFUL 
  RESULT = 2.695064443768281 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 44 ("linearFEMgenericODE2.py"): 
****************************************** 
nodesLeftPlane [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175] 
nodesRightPlane [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP10, t = 0.1s, timeToGo = 0s, Nit/step = 1
solver finished after 0.144473 seconds.
====================
CPU-time statistics:
  total time   = 0.144 seconds
  measured time= 0.144 seconds (=100%) 
  non-zero timer [__ sub-timer]:
  factorization     = 3.05%
  newtonIncrement   = 0.611%
  integrationFormula= 0.0122%
  ODE2RHS           = 2.08%
  ODE1RHS           = 0.000692%
  AERHS             = 0.512%
  totalJacobian     = 92.3%
  __jacobianODE2    = 92.2%
  __jacobianODE1    = 0.000554%
  __jacobianAE      = 0.0711%
  massMatrix        = 0.00533%
  reactionForces    = 1.43%
  writeSolution     = 0.0045%
  overhead          = 0.0135%
  visualization/user= 0.000692%
uTip= [np.float64(-0.06836115476416493), np.float64(-0.38159700689999654), np.float64(0.00018486213838645423)] 
solution of linearFEMgenericODE2= 0.3876719712975602 
refsol= 0.3876719712975609 
tol= 5e-14 
****************************************** 
  EXAMPLE 44 ("linearFEMgenericODE2.py") FINISHED SUCCESSFUL 
  RESULT = 0.3876719712975602 
  ERROR = -7.216449660063518e-16 
****************************************** 


****************************************** 
  START EXAMPLE 45 ("LShapeGeomExactBeam2D.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
STEP10, factor = 1, timeToGo = 0s, Nit/step = 4.9
solver finished after 0.0022781 seconds.
uTip = [ 0.85895237 -0.91814745] 
solution of LShapeGeomExactBeam2D= -0.9181474511543884 
refsol= -0.9181474511543884 
tol= 5e-14 
****************************************** 
  EXAMPLE 45 ("LShapeGeomExactBeam2D.py") FINISHED SUCCESSFUL 
  RESULT = -0.9181474511543884 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 46 ("mainSystemExtensionsTests.py"): 
****************************************** 
solution of mainSystemExtensions test MP= 10.418464378208578 
solution of mainSystemExtensions test RB= 10.494301123181476 
solution of mainSystemExtensions test SD= 0.12013162200851009 
solution of mainSystemExtensions test CSD= 1.145425261630096 
solution of mainSystemExtensions test RJ= 0.02140306132448017 
solution of mainSystemExtensions test PJ= 11.61999999999991 
solution of mainSystemExtensions test SJ= 1.2067248842334428 
solution of mainSystemExtensions test GJ= 1.4291626567210618 
solution of mainSystemExtensions test LinEig= 10.024968827881711 
numpy, networkx and matplotlib required for DrawSystemGraph(...); skipping test 
solution of mainSystemExtensions test DOF= 9 
solution of mainSystemExtensions test DC= 2.165812654226271 
solution of mainSystemExtensions TOTAL= 57.64639446941554 
refsol= 57.64639446941554 
tol= 5e-14 
****************************************** 
  EXAMPLE 46 ("mainSystemExtensionsTests.py") FINISHED SUCCESSFUL 
  RESULT = 57.64639446941554 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 47 ("manualExplicitIntegrator.py"): 
****************************************** 


++++++++++++++++++++++++++
Start EXUDYN version 1.9.0
 
load f=12.937500000000005 
EI=17.250000000000007 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
ev= 2.2801835384819484 
solver finished after 0 seconds.
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP5000, t = 0.05s, timeToGo = 0s, Nit/step = 0
solver finished after 0.254148 seconds.
uy= -0.2204849087896498 
testResult= 2.0596986296922988 
refsol= 2.059698629692295 
tol= 5e-14 
****************************************** 
  EXAMPLE 47 ("manualExplicitIntegrator.py") FINISHED SUCCESSFUL 
  RESULT = 2.0596986296922988 
  ERROR = 3.9968028886505635e-15 
****************************************** 


****************************************** 
  START EXAMPLE 48 ("matrixContainerTest.py"): 
****************************************** 
[[13.3  0.   0. ]
 [ 0.   4.2 42. ]] 
mc= [[1.5 0.  0. ]
 [0.  1.5 0. ]
 [0.  0.  1. ]] 
mc= [[1. 2.]
 [3. 4.]
 [0. 0.]
 [0. 0.]] 
solution of matrixContainerTest= 56.5 
refsol= 56.5 
tol= 5e-14 
****************************************** 
  EXAMPLE 48 ("matrixContainerTest.py") FINISHED SUCCESSFUL 
  RESULT = 56.5 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 49 ("mecanumWheelRollingDiscTest.py"): 
****************************************** 
solution of mecanumWheelRollingDiscTest= 0.2714267238324342 
refsol= 0.2714267238324343 
tol= 5e-14 
****************************************** 
  EXAMPLE 49 ("mecanumWheelRollingDiscTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.2714267238324342 
  ERROR = -1.1102230246251565e-16 
****************************************** 


****************************************** 
  START EXAMPLE 50 ("objectFFRFreducedOrderAccelerations.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP10, t = 0.001s, timeToGo = 0s, Nit/step = 7.4
solver finished after 0.0739823 seconds.
solution of ObjectFFRFreducedOrderAccelerations= 61579.777475624905 
ObjectFFRFreducedOrderAccelerations test result= 0.10000570245889281 
refsol= 0.1000057024588858 
tol= 5e-14 
****************************************** 
  EXAMPLE 50 ("objectFFRFreducedOrderAccelerations.py") FINISHED SUCCESSFUL 
  RESULT = 0.10000570245889281 
  ERROR = 7.008282842946301e-15 
****************************************** 


****************************************** 
  START EXAMPLE 51 ("objectFFRFreducedOrderTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 0.01s, timeToGo = 0s, Nit/step = 7.99
solver finished after 0.0529813 seconds.
solution of ObjectFFRFreducedOrder= 0.5355233268061623 
refsol= 0.0053552332680605694 
tol= 5e-14 
****************************************** 
  EXAMPLE 51 ("objectFFRFreducedOrderTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.005355233268061623 
  ERROR = 1.0538445116559103e-15 
****************************************** 


****************************************** 
  START EXAMPLE 52 ("objectFFRFTest.py"): 
****************************************** 
nodes size= (115, 3) 
elements size= (48, 8) 
nNodes= 115 , nODE2= 345 
eigenvalues = [np.float64(1.8063906026065282e-05), np.float64(1.8411117983052317e-05), np.float64(2.2671593350594126e-05), np.float64(3.2383818622560775e-05), np.float64(3.253813228109076e-05), np.float64(3.818901212522753e-05), np.float64(104.38283651620335), np.float64(104.61719002457001), np.float64(187.80080789125307), np.float64(212.28354226405685), np.float64(224.18335038650395), np.float64(237.76424090025532), np.float64(284.0318283421682), np.float64(284.1686514704403), np.float64(394.1400845378555), np.float64(394.5041682997171), np.float64(405.47173299626826), np.float64(406.4219361063554)] 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP10, t = 0.001s, timeToGo = 0s, Nit/step = 5.4
solver finished after 1.01345 seconds.
solution of ObjectFFRF= 0.006460010812084559 
refsol= 0.0064600108120842666 
tol= 5e-14 
****************************************** 
  EXAMPLE 52 ("objectFFRFTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.006460010812084559 
  ERROR = 2.92300905702092e-16 
****************************************** 


****************************************** 
  START EXAMPLE 53 ("objectFFRFTest2.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP25, t = 0.0025s, timeToGo = 2.62561e-16s, Nit/step = 7.32
solver finished after 1.20939 seconds.
solution of ObjectFFRFtest2= 0.03552188069017122 
refsol= 0.03552188069017914 
tol= 5e-14 
****************************************** 
  EXAMPLE 53 ("objectFFRFTest2.py") FINISHED SUCCESSFUL 
  RESULT = 0.03552188069017122 
  ERROR = -7.924216838262055e-15 
****************************************** 


****************************************** 
  START EXAMPLE 54 ("objectGenericODE2Test.py"): 
****************************************** 
eigen freq.= [  0.      57.6318  57.6318 132.5577 132.5577 136.3306 187.8241 212.3297
 231.9987 231.9987 238.6879 261.7874 401.3941 401.3941] 
eigen freq. first mode = 57.6317863976405 
excitation node= 112 
nMid= 110 
nTopMid= 103 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP50, t = 0.05s, timeToGo = 0s, Nit/step = 3.18
solver finished after 0.35205 seconds.
solution of ObjectGenericODE2= -2.3163788975850257e-05 
refsol= -2.316378897486015e-05 
tol= 5e-14 
****************************************** 
  EXAMPLE 54 ("objectGenericODE2Test.py") FINISHED SUCCESSFUL 
  RESULT = -2.3163788975850257e-05 
  ERROR = -9.901069764409187e-16 
****************************************** 


****************************************** 
  START EXAMPLE 55 ("PARTS_ATEs_moving.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP50, t = 0.05s, timeToGo = 0s, Nit/step = 2
solver finished after 0.421092 seconds.
Solver iteration statistics:
total number of steps:        50
total number of Newton iterations: 100
total number of Newton Jacobians:  100
uy= 0.4465676276026206 
refsol= 0.44656762760262214 
tol= 5e-14 
****************************************** 
  EXAMPLE 55 ("PARTS_ATEs_moving.py") FINISHED SUCCESSFUL 
  RESULT = 0.4465676276026206 
  ERROR = -1.5543122344752192e-15 
****************************************** 


****************************************** 
  START EXAMPLE 56 ("pendulumFriction.py"): 
****************************************** 
mass= 2.5 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP4000, t = 0.4s, timeToGo = 0s, Nit/step = 1.55975
solver finished after 0.153311 seconds.
p0= [ 0.11878348 -0.38195612  0.        ] 
p0= [ 0.11878348 -0.38195612  0.        ] (marker) 
solution of pendulumFriction= 0.39999998776982304 
refsol= 0.39999998776982304 
tol= 5e-14 
****************************************** 
  EXAMPLE 56 ("pendulumFriction.py") FINISHED SUCCESSFUL 
  RESULT = 0.39999998776982304 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 57 ("plotSensorTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 1s, timeToGo = 0s, Nit/step = 6.13
solver finished after 0.0066032 seconds.
remove file: solution/plotSensorLoad.txt 
remove file: solution/plotSensorNode.txt 
remove file: solution/plotSensorNodeRotation.txt 
remove file: solution/plotSensorBody.txt 
remove file: solution/plotSensorObject.txt 
remove file: solution/plotSensorMarker.txt 
refsol= 1 
tol= 5e-14 
****************************************** 
  EXAMPLE 57 ("plotSensorTest.py") FINISHED SUCCESSFUL 
  RESULT = 1 
  ERROR = 0 
****************************************** 


****************************************** 
  START EXAMPLE 58 ("postNewtonStepContactTest.py"): 
****************************************** 
EXUDYN version=1.9.0 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP181, t = 0.5s, timeToGo = 0s, Nit/step = 1.53591
solver finished after 0.0143451 seconds.
Solver iteration statistics:
total number of steps:        181
total number of Newton iterations: 278
total number of Newton Jacobians:  278
postNewtonStepContactTest= 0.057286638346409235 
refsol= 0.057286638346409235 
tol= 5e-14 
****************************************** 
  EXAMPLE 58 ("postNewtonStepContactTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.057286638346409235 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 59 ("reevingSystemSpringsTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP200, t = 2s, timeToGo = 0s, Nit/step = 6.255
solver finished after 0.0362647 seconds.
solution of ReevingSystemSprings= 2.2155575717433007 
refsol= 2.2155575717433007 
tol= 5e-14 
****************************************** 
  EXAMPLE 59 ("reevingSystemSpringsTest.py") FINISHED SUCCESSFUL 
  RESULT = 2.2155575717433007 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 60 ("revoluteJointPrismaticJointTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP250, t = 0.25s, timeToGo = 0s, Nit/step = 6.46
solver finished after 0.0463962 seconds.
u0= [-0.091739   -0.34905059  0.16378972] , rot0= [-0.00912885 -0.28756518  0.35260735] 
solution of revoluteJointprismaticJointTest= 1.2538806799249347 
refsol= 1.2538806799249342 
tol= 5e-14 
****************************************** 
  EXAMPLE 60 ("revoluteJointPrismaticJointTest.py") FINISHED SUCCESSFUL 
  RESULT = 1.2538806799249347 
  ERROR = 4.440892098500626e-16 
****************************************** 


****************************************** 
  START EXAMPLE 61 ("rigidBodyAsUserFunctionTest.py"): 
****************************************** 
M = [[2 0 0]
 [0 2 0]
 [0 0 2]] 
J = [[6 0 1]
 [0 1 0]
 [1 0 6]] 
<systemData: 
  Number of nodes= 3
  Number of objects = 4
  Number of markers = 4
  Number of loads = 1
  Number of sensors = 0
  Number of ODE2 coordinates = 14
  Number of ODE1 coordinates = 0
  Number of AE coordinates   = 2
  Number of data coordinates   = 0

For details see mbs.systemData, mbs.sys and mbs.variables
>
 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP50, t = 0.05s, timeToGo = 0s, Nit/step = 3
solver finished after 0.0615825 seconds.
u0= [0.0, 0.0, 0] , rot0= [-2.09660405  0.22104041  2.13552568] 
u1= [0.5, 0.0, 0] , rot1= [-2.09660405  0.22104041  2.13552568] 
solution of rigidBodyAsUserFunctionTest= 8.95086527155215 
refsol= 8.950865271552148 
tol= 5e-14 
****************************************** 
  EXAMPLE 61 ("rigidBodyAsUserFunctionTest.py") FINISHED SUCCESSFUL 
  RESULT = 8.95086527155215 
  ERROR = 1.7763568394002505e-15 
****************************************** 


****************************************** 
  START EXAMPLE 62 ("rigidBodyCOMtest.py"): 
****************************************** 
AddRigidBody COM= [ 0.4   0.22 -0.35] 
inertia6D= [np.float64(14.2725), np.float64(14.0625), np.float64(11.21), np.float64(4.925), np.float64(5.5), np.float64(-1.2000000000000002)] 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 1s, timeToGo = 0s, Nit/step = 7.8
solver finished after 0.017521 seconds.
solution of rigidBodyCOMtest= 3.409431467726292 
refsol= 3.409431467726291 
tol= 5e-14 
****************************************** 
  EXAMPLE 62 ("rigidBodyCOMtest.py") FINISHED SUCCESSFUL 
  RESULT = 3.409431467726292 
  ERROR = 8.881784197001252e-16 
****************************************** 


****************************************** 
  START EXAMPLE 63 ("rigidBodySpringDamperIntrinsic.py"): 
****************************************** 
p1= [ 0.16884241 -0.06286121  0.10721368] 
p2= [ 0.16884241 -0.06286121  0.10721368] 
omega3= [ 5.19166462 -2.72101417 11.37143665] 
solution of rigidBodySpringDamperIntrinsic test= 0.5472368463500464 
refsol= 0.5472368463500464 
tol= 5e-14 
****************************************** 
  EXAMPLE 63 ("rigidBodySpringDamperIntrinsic.py") FINISHED SUCCESSFUL 
  RESULT = 0.5472368463500464 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 64 ("rollingCoinTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 0.5s, timeToGo = 0s, Nit/step = 2.341
solver finished after 0.0205632 seconds.
force in rollingCoinTest= [ 0.98865237 -0.2204573   9.84614513] 
solution of rollingCoinTest= 1.063438118935288 
refsol= 1.063438118935288 
tol= 5e-14 
****************************************** 
  EXAMPLE 64 ("rollingCoinTest.py") FINISHED SUCCESSFUL 
  RESULT = 1.063438118935288 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 65 ("rollingDiscTangentialForces.py"): 
****************************************** 
omegaY= 2.0986106515184435 
omegaZ= 3.4976844191974057 
necessary torque= 317.09999999999997 , gyro torque= 317.0999999999999 
-317.09999999999997 
centrifugal force: 396.37499999999994 
omega1 x (Theta * omega2) =  317.0999999999999 
Mgyro                     =  317.0999999999999 
omega1 x (Theta * omega1) =  [   0.    -396.375    0.   ] 
-317.09999999999997 
Theta * angAcc =  [    0.         -1388.47499978     0.        ] 
Theta * angAcc + omega1 x (Theta * omega1) =  [    0.         -1784.84999978     0.        ] 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP100, t = 0.1s, timeToGo = 0s, Nit/step = 4.27
solver finished after 0.101828 seconds.
rollingDiscTangentialForces: F= [-3.96375174e+02  1.00214806e-03  6.37825563e+02] 
solution of rollingDiscTangentialForces= 1.0342017388721547 
refsol= 1.0342017388721547 
tol= 5e-14 
****************************************** 
  EXAMPLE 65 ("rollingDiscTangentialForces.py") FINISHED SUCCESSFUL 
  RESULT = 1.0342017388721547 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 66 ("rollingCoinPenaltyTest.py"): 
****************************************** 
solution of rollingCoinPenaltyTest= 0.03489603106689881 
refsol= 0.03489603106689881 
tol= 5e-14 
****************************************** 
  EXAMPLE 66 ("rollingCoinPenaltyTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.03489603106689881 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 67 ("rotatingTableTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 5s, timeToGo = 0s, Nit/step = 6.708
solver finished after 0.0914515 seconds.
Solver iteration statistics:
total number of steps:        1000
total number of Newton iterations: 6708
total number of Newton Jacobians:  33
rotatingTableTest mode 0 = 3.919925059393056 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 5s, timeToGo = 0s, Nit/step = 7.002
solver finished after 0.0882483 seconds.
Solver iteration statistics:
total number of steps:        1000
total number of Newton iterations: 7002
total number of Newton Jacobians:  41
rotatingTableTest mode 1 = 3.9187553156368122 
rotatingTableTest= 7.838680375029869 
refsol= 7.838680375029869 
tol= 5e-14 
****************************************** 
  EXAMPLE 67 ("rotatingTableTest.py") FINISHED SUCCESSFUL 
  RESULT = 7.838680375029869 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 68 ("scissorPrismaticRevolute2D.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP500, t = 10s, timeToGo = 0s, Nit/step = 3.002
solver finished after 0.140867 seconds.
Solver iteration statistics:
total number of steps:        500
total number of Newton iterations: 1501
total number of Newton Jacobians:  1501
uy= 1.1310332041867308 
solver.it.newtonStepsCount= 1501 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP500, t = 10s, timeToGo = 0s, Nit/step = 2.434
solver finished after 0.14634 seconds.
Solver iteration statistics:
total number of steps:        500
total number of Newton iterations: 1217
total number of Newton Jacobians:  1217
uy= 1.1246157002349664 
solver.it.newtonStepsCount= 1217 
refsol= 27.20255648904422 
tol= 5e-14 
****************************************** 
  EXAMPLE 68 ("scissorPrismaticRevolute2D.py") FINISHED SUCCESSFUL 
  RESULT = 27.20255648904422 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 69 ("sensorUserFunctionTest.py"): 
****************************************** 
sensor= 45.0 
refsol= 45 
tol= 5e-14 
****************************************** 
  EXAMPLE 69 ("sensorUserFunctionTest.py") FINISHED SUCCESSFUL 
  RESULT = 45.0 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 70 ("serialRobotTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP200, t = 0.2s, timeToGo = 0s, Nit/step = 2.955
solver finished after 0.238712 seconds.
torques at tEnd= 0.7681856909829226 
refsol= 0.7681856909852399 
tol= 5.0000000000000005e-12 
****************************************** 
  EXAMPLE 70 ("serialRobotTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.7681856909829226 
  ERROR = -2.3173685193000892e-12 
****************************************** 


****************************************** 
  START EXAMPLE 71 ("sliderCrank3Dtest.py"): 
****************************************** 
slider initial position = 0.19999999999999996 
vCB len= 0.3 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 0.2s, timeToGo = 0s, Nit/step = 2
solver finished after 0.122537 seconds.
solution of 3D slidercrank iftomm benchmark= 3.3642761780921897 
refsol= 3.3642761780921897 
tol= 5e-14 
****************************************** 
  EXAMPLE 71 ("sliderCrank3Dtest.py") FINISHED SUCCESSFUL 
  RESULT = 3.3642761780921897 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 72 ("sliderCrankFloatingTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP5000, t = 0.3s, timeToGo = 0s, Nit/step = 6.055
solver finished after 0.202664 seconds.
sol = 0.2948599898874913 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP5000, t = 0.3s, timeToGo = 0s, Nit/step = 6.0214
solver finished after 0.576063 seconds.
sol = 0.2967891734913421 
solutionSliderCrankIndex2= 0.5916491633788334 
refsol= 0.591649163378833 
tol= 5e-14 
****************************************** 
  EXAMPLE 72 ("sliderCrankFloatingTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.5916491633788334 
  ERROR = 4.440892098500626e-16 
****************************************** 


****************************************** 
  START EXAMPLE 73 ("solverExplicitODE1ODE2test.py"): 
****************************************** 
EXUDYN version=1.9.0 
solverExplicitODE1ODE2 err= 3.3767933275970896 
refsol= 3.3767933275970896 
tol= 5e-14 
****************************************** 
  EXAMPLE 73 ("solverExplicitODE1ODE2test.py") FINISHED SUCCESSFUL 
  RESULT = 3.3767933275970896 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 74 ("sparseMatrixSpringDamperTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
*********************
Static solver (1 load steps):
*********************

Start steps solving loop

Write initial step to solution file and visualize ...
STEP0, factor = 0, timeToGo = 0s
+++++++++++++++ STEP FINISHED ++++++++++++++

+++++++++++++++ COMPUTE STEP +++++++++++++++
STEP1, factor = 1, step size = 1
  START discontinuous iteration 0:
Newton: initial residual = 0.515994; goals: relTol=1e-08, absTol=1e-10
    NEWTON STEP 1: residual = 660.542: relTol = 1280.14: contr. = 1280.14
    update initial residual with current residual; initial residual = 660.542
    NEWTON STEP 2: residual = 0.0172949: relTol = 2.61829e-05: contr. = 2.61829e-05
    NEWTON STEP 3: residual = 0.00015339: relTol = 2.32219e-07: contr. = 0.00886909
    NEWTON STEP 4: residual = 7.5745e-10: relTol = 1.14671e-12: contr. = 4.93806e-06
  Newton: converged after 4 steps; relative error = 1.14671e-12
  PostNewton step: run with 1 threads
  discontinuous iteration error = 0 (disc.it.=0, error goal = 1 ... REACHED)
STEP1, factor = 1, timeToGo = 0s, Nit/step = 4
+++++++++++++++ STEP FINISHED ++++++++++++++

solver finished after 0.464272 seconds.
static tip displacement (y)= -6.779862812271389 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
*********************
Static solver (1 load steps):
*********************

Start steps solving loop

Write initial step to solution file and visualize ...
STEP0, factor = 0, timeToGo = 0s
+++++++++++++++ STEP FINISHED ++++++++++++++

+++++++++++++++ COMPUTE STEP +++++++++++++++
STEP1, factor = 1, step size = 1
  START discontinuous iteration 0:
Newton: initial residual = 0.515994; goals: relTol=1e-08, absTol=1e-10
    NEWTON STEP 1: residual = 660.542: relTol = 1280.14: contr. = 1280.14
    update initial residual with current residual; initial residual = 660.542
    NEWTON STEP 2: residual = 0.0172949: relTol = 2.61829e-05: contr. = 2.61829e-05
    NEWTON STEP 3: residual = 0.00015339: relTol = 2.32219e-07: contr. = 0.00886909
    NEWTON STEP 4: residual = 8.55837e-10: relTol = 1.29566e-12: contr. = 5.57947e-06
  Newton: converged after 4 steps; relative error = 1.29566e-12
  PostNewton step: run with 1 threads
  discontinuous iteration error = 0 (disc.it.=0, error goal = 1 ... REACHED)
STEP1, factor = 1, timeToGo = 0s, Nit/step = 4
+++++++++++++++ STEP FINISHED ++++++++++++++

solver finished after 0.0137551 seconds.
static tip displacement (y)= -6.779862812271393 
refsol= -0.06779862812271394 
tol= 5e-14 
****************************************** 
  EXAMPLE 74 ("sparseMatrixSpringDamperTest.py") FINISHED SUCCESSFUL 
  RESULT = -0.06779862812271394 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 75 ("sphericalJointTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP1000, t = 1s, timeToGo = 0s, Nit/step = 6.77
solver finished after 0.12396 seconds.
solution of sphericalJointTest= 4.409080446575089 
refsol= 4.409080446575089 
tol= 5e-14 
****************************************** 
  EXAMPLE 75 ("sphericalJointTest.py") FINISHED SUCCESSFUL 
  RESULT = 4.409080446575089 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 76 ("springDamperUserFunctionTest.py"): 
****************************************** 
EXUDYN version=1.9.0 
resonance frequency = 50.0 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP5000, t = 50s, timeToGo = 0s, Nit/step = 1.98
solver finished after 0.155541 seconds.
Solver iteration statistics:
total number of steps:        5000
total number of Newton iterations: 9900
total number of Newton Jacobians:  9900
displacement= 0.5062872273010911 
refsol= 0.5062872273010911 
tol= 5e-14 
****************************************** 
  EXAMPLE 76 ("springDamperUserFunctionTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.5062872273010911 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 77 ("stiffFlyballGovernor.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP20, t = 0.001s, timeToGo = 0s, Nit/step = 0
solver finished after 0.0357808 seconds.
solution of stiffFlyballGovernor= 0.8962488779114737 
refsol= 0.8962488779114738 
tol= 5e-14 
****************************************** 
  EXAMPLE 77 ("stiffFlyballGovernor.py") FINISHED SUCCESSFUL 
  RESULT = 0.8962488779114737 
  ERROR = -1.1102230246251565e-16 
****************************************** 


****************************************** 
  START EXAMPLE 78 ("superElementRigidJointTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: implicit second order time integration
STEP5, t = 0.005s, timeToGo = 0s, Nit/step = 2.4
solver finished after 0.0654101 seconds.
solution of superElementRigidJointTest= 0.01521720891398902 
refsol= 0.015217208913989071 
tol= 5e-14 
****************************************** 
  EXAMPLE 78 ("superElementRigidJointTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.01521720891398902 
  ERROR = -5.204170427930421e-17 
****************************************** 


****************************************** 
  START EXAMPLE 79 ("symbolicUserFunctionTest.py"): 
****************************************** 
spring user function: ((((10 * damping) * deltaL_t) + ((stiffness * sign(deltaL)) * pow(abs(deltaL), 1.2))) + force) 
load user function:   (load * sin((62.8319 * t))) 
start simulation 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (RK44)
STEP10000, t = 50s, timeToGo = 0s, Nit/step = 0
solver finished after 0.0822452 seconds.
finished:  0.08241534233093262 seconds 
u= 0.10039884426884882 
solution of symbolicUserFunctionTest= 0.10039884426884882 
refsol= 0.10039884426884882 
tol= 5e-14 
****************************************** 
  EXAMPLE 79 ("symbolicUserFunctionTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.10039884426884882 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 80 ("symbolicModuleTest.py"): 
****************************************** 
. res sym:
 9.7476 ,
  res Py:
 9.747600000000002 \diff:
-1.7763568394002505e-15 
. res sym:
 9.7476 ,
  res Py:
 9.747600000000002 \diff:
-1.7763568394002505e-15 
Real.newCount= 904 
Real.deleteCount= 904 
Vector.newCount= 71 
Vector.deleteCount= 71 
Matrix.newCount= 29 
Matrix.deleteCount= 29 

finished 796 tests 
WRONG results (after vectorTests): 2 
 
u= 0.9484129575069745 
solution of symbolicModuleTest= 0.9484129575069745 
refsol= 0.9484129575069745 
tol= 5e-14 
****************************************** 
  EXAMPLE 80 ("symbolicModuleTest.py") FINISHED SUCCESSFUL 
  RESULT = 0.9484129575069745 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 81 ("taskmanagerTest.py"): 
****************************************** 
** CASE 0 **: [1, 1, 0, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 1 **: [2, 1, 0, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 2 **: [5, 1, 0, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 3 **: [1, 1, 0, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 4 **: [2, 1, 0, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 5 **: [5, 1, 0, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 6 **: [1, 1, 0, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 7 **: [2, 1, 0, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 8 **: [5, 1, 0, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 9 **: [1, 1, 0, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 10 **: [2, 1, 0, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 11 **: [5, 1, 0, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 12 **: [1, 0, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370896011591241), np.float64(-0.019429692092482336), np.float64(0.0)] 
** CASE 13 **: [2, 0, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370896011591241), np.float64(-0.019429692092482336), np.float64(0.0)] 
** CASE 14 **: [5, 0, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370896011591241), np.float64(-0.019429692092482336), np.float64(0.0)] 
** CASE 15 **: [1, 1, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370895972813149), np.float64(-0.019429692002979417), np.float64(0.0)], ODE1=[np.float64(0.47267733728511585), np.float64(-8.738338182487565), np.float64(4.999999989331395)] 
** CASE 16 **: [2, 1, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370895972813149), np.float64(-0.019429692002979417), np.float64(0.0)], ODE1=[np.float64(0.47267733728511585), np.float64(-8.738338182487565), np.float64(4.999999989331395)] 
** CASE 17 **: [5, 1, 1, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.004370895972813149), np.float64(-0.019429692002979417), np.float64(0.0)], ODE1=[np.float64(0.47267733728511585), np.float64(-8.738338182487565), np.float64(4.999999989331395)] 
** CASE 18 **: [1, 0, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125736766), np.float64(-0.5057841312030248), np.float64(0.0)] 
** CASE 19 **: [2, 0, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125736766), np.float64(-0.5057841312030248), np.float64(0.0)] 
** CASE 20 **: [5, 0, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125736766), np.float64(-0.5057841312030248), np.float64(0.0)] 
** CASE 21 **: [1, 1, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125736766), np.float64(-0.5057841312030248), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 22 **: [2, 1, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125736766), np.float64(-0.5057841312030248), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 23 **: [5, 1, 1, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.26268952125736766), np.float64(-0.5057841312030248), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 24 **: [1, 0, 1, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.035426415819911045), np.float64(0.0)] 
** CASE 25 **: [2, 0, 1, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.035426415819911045), np.float64(0.0)] 
** CASE 26 **: [5, 0, 1, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.035426415819911045), np.float64(0.0)] 
** CASE 27 **: [1, 0, 1, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.03542641581991131), np.float64(0.0)] 
** CASE 28 **: [2, 0, 1, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.03542641581991131), np.float64(0.0)] 
** CASE 29 **: [5, 0, 1, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.008449856540029499), np.float64(-0.03542641581991131), np.float64(0.0)] 
** CASE 30 **: [1, 0, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 31 **: [2, 0, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 32 **: [5, 0, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 33 **: [1, 1, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 34 **: [2, 1, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 35 **: [5, 1, 1, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)], ODE1=[np.float64(0.47267733728576694), np.float64(-8.73833818199301), np.float64(4.999999989331395)] 
** CASE 36 **: [1, 0, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(-2.6556738658198276e-18), np.float64(0.0)] 
** CASE 37 **: [2, 0, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(-2.6556738658198276e-18), np.float64(0.0)] 
** CASE 38 **: [5, 0, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(-2.6556738658198276e-18), np.float64(0.0)] 
** CASE 39 **: [1, 1, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(2.8842569129158978e-18), np.float64(0.0)], ODE1=[np.float64(0.47267733728452793), np.float64(-8.738338182472436), np.float64(4.999999989331395)] 
** CASE 40 **: [2, 1, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(2.8842569129158978e-18), np.float64(0.0)], ODE1=[np.float64(0.47267733728452793), np.float64(-8.738338182472436), np.float64(4.999999989331395)] 
** CASE 41 **: [5, 1, 1, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(2.8842569129158978e-18), np.float64(0.0)], ODE1=[np.float64(0.47267733728452793), np.float64(-8.738338182472436), np.float64(4.999999989331395)] 
** CASE 42 **: [1, 0, 1, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 43 **: [2, 0, 1, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 44 **: [5, 0, 1, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 45 **: [1, 0, 1, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 46 **: [2, 0, 1, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 47 **: [5, 0, 1, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(0.0), np.float64(0.0), np.float64(0.0)] 
** CASE 48 **: [1, 0, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.3423490326181492), np.float64(0.0)] 
** CASE 49 **: [2, 0, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.3423490326181492), np.float64(0.0)] 
** CASE 50 **: [5, 0, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.3423490326181492), np.float64(0.0)] 
** CASE 51 **: [1, 1, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.3423490326181492), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)] 
** CASE 52 **: [2, 1, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.3423490326181492), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)] 
** CASE 53 **: [5, 1, 2, 0, 0, 0, 1] ; RESULTS: tip-disp=[np.float64(-0.0880363468401495), np.float64(-0.3423490326181492), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)] 
************
WARNING: VelocityVerlet: CHECK CONVERGENCE !!!
************
************
WARNING: VelocityVerlet: ADD Lie group formulas !!!
************
** CASE 54 **: [1, 0, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.0374686446114989), np.float64(0.3896272020876037), np.float64(0.0)] 
** CASE 55 **: [2, 0, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.0374686446114989), np.float64(0.3896272020876037), np.float64(0.0)] 
** CASE 56 **: [5, 0, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.0374686446114989), np.float64(0.3896272020876037), np.float64(0.0)] 
** CASE 57 **: [1, 1, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.035601238609331176), np.float64(0.38903936602890654), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)] 
** CASE 58 **: [2, 1, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.035601238609331176), np.float64(0.38903936602890654), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)] 
** CASE 59 **: [5, 1, 2, 0, 1, 0, 1] ; RESULTS: tip-disp=[np.float64(0.035601238609331176), np.float64(0.38903936602890654), np.float64(0.0)], ODE1=[np.float64(0.4140156905407226), np.float64(-9.038078350533263), np.float64(4.999999989694047)] 
** CASE 60 **: [1, 0, 2, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)] 
** CASE 61 **: [2, 0, 2, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)] 
** CASE 62 **: [5, 0, 2, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)] 
** CASE 63 **: [1, 0, 2, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)] 
** CASE 64 **: [2, 0, 2, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)] 
** CASE 65 **: [5, 0, 2, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.04041427402236719), np.float64(-0.19022533128584024), np.float64(0.0)] 
** CASE 66 **: [1, 0, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.953014372865994e-05), np.float64(-0.009952780225753351), np.float64(0.0)] 
** CASE 67 **: [2, 0, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.953014372865994e-05), np.float64(-0.009952780225753351), np.float64(0.0)] 
** CASE 68 **: [5, 0, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.953014372865994e-05), np.float64(-0.009952780225753351), np.float64(0.0)] 
** CASE 69 **: [1, 1, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.9530137729236756e-05), np.float64(-0.009952779623020913), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 70 **: [2, 1, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.9530137729236756e-05), np.float64(-0.009952779623020913), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 71 **: [5, 1, 2, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.9530137729236756e-05), np.float64(-0.009952779623020913), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 72 **: [1, 0, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006309794201), np.float64(-0.018920074543545454), np.float64(0.0)] 
** CASE 73 **: [2, 0, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006309794201), np.float64(-0.018920074543545454), np.float64(0.0)] 
** CASE 74 **: [5, 0, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006309794201), np.float64(-0.018920074543545454), np.float64(0.0)] 
** CASE 75 **: [1, 1, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006240192099), np.float64(-0.018920074175729506), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)] 
** CASE 76 **: [2, 1, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006240192099), np.float64(-0.018920074175729506), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)] 
** CASE 77 **: [5, 1, 2, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.0001790006240192099), np.float64(-0.018920074175729506), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)] 
** CASE 78 **: [1, 0, 2, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175337), np.float64(0.0)] 
** CASE 79 **: [2, 0, 2, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175337), np.float64(0.0)] 
** CASE 80 **: [5, 0, 2, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175337), np.float64(0.0)] 
** CASE 81 **: [1, 0, 2, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175534), np.float64(0.0)] 
** CASE 82 **: [2, 0, 2, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175534), np.float64(0.0)] 
** CASE 83 **: [5, 0, 2, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.00012515034665194769), np.float64(-0.015820399195175534), np.float64(0.0)] 
** CASE 84 **: [1, 0, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217900993), np.float64(-0.5632157179128835), np.float64(0.0)] 
** CASE 85 **: [2, 0, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217900993), np.float64(-0.5632157179128835), np.float64(0.0)] 
** CASE 86 **: [5, 0, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217900948), np.float64(-0.5632157179128819), np.float64(0.0)] 
** CASE 87 **: [1, 1, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217900993), np.float64(-0.5632157179128835), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 88 **: [2, 1, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217900993), np.float64(-0.5632157179128835), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 89 **: [5, 1, 4, 0, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.08146932217900993), np.float64(-0.5632157179128826), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 90 **: [1, 0, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060724308288), np.float64(-2.2642535240765134), np.float64(0.0)] 
** CASE 91 **: [2, 0, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060724308288), np.float64(-2.2642535240765134), np.float64(0.0)] 
** CASE 92 **: [5, 0, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060724308282), np.float64(-2.2642535240765183), np.float64(0.0)] 
** CASE 93 **: [1, 1, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.6290607251062745), np.float64(-2.264253523596047), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 94 **: [2, 1, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.6290607251062745), np.float64(-2.264253523596047), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 95 **: [5, 1, 4, 0, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-4.629060725106295), np.float64(-2.26425352359603), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 96 **: [1, 0, 4, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.4766649535974832), np.float64(-1.5245865369570917), np.float64(0.0)] 
** CASE 97 **: [2, 0, 4, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.4766649535974832), np.float64(-1.5245865369570917), np.float64(0.0)] 
** CASE 98 **: [5, 0, 4, 0, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.47666495359748273), np.float64(-1.524586536957091), np.float64(0.0)] 
** CASE 99 **: [1, 0, 4, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.47666495359748495), np.float64(-1.5245865369570943), np.float64(0.0)] 
** CASE 100 **: [2, 0, 4, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.47666495359748495), np.float64(-1.5245865369570943), np.float64(0.0)] 
** CASE 101 **: [5, 0, 4, 0, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.47666495359748406), np.float64(-1.524586536957093), np.float64(0.0)] 
** CASE 102 **: [1, 0, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539387343776), np.float64(-0.43781146183231673), np.float64(0.0)] 
** CASE 103 **: [2, 0, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539387343776), np.float64(-0.43781146183231673), np.float64(0.0)] 
** CASE 104 **: [5, 0, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539387343776), np.float64(-0.43781146183231673), np.float64(0.0)] 
** CASE 105 **: [1, 1, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539396786267), np.float64(-0.43781146247940317), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 106 **: [2, 1, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539396786267), np.float64(-0.43781146247940317), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 107 **: [5, 1, 4, 1, 0, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.03350539396786267), np.float64(-0.43781146247940317), np.float64(0.0)], ODE1=[np.float64(0.4726773372847805), np.float64(-8.738338182470347), np.float64(4.999999989331395)] 
** CASE 108 **: [1, 0, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870176155957), np.float64(-0.8436540946981786), np.float64(0.0)] 
** CASE 109 **: [2, 0, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870176155957), np.float64(-0.8436540946981786), np.float64(0.0)] 
** CASE 110 **: [5, 0, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870176155957), np.float64(-0.8436540946981786), np.float64(0.0)] 
** CASE 111 **: [1, 1, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870233930543), np.float64(-0.8436540965761705), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)] 
** CASE 112 **: [2, 1, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870233930543), np.float64(-0.8436540965761705), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)] 
** CASE 113 **: [5, 1, 4, 1, 1, 0, 0] ; RESULTS: tip-disp=[np.float64(-0.12809870233930543), np.float64(-0.8436540965761705), np.float64(0.0)], ODE1=[np.float64(0.4726773372847803), np.float64(-8.738338182470343), np.float64(4.999999989331395)] 
** CASE 114 **: [1, 0, 4, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.40092552484085653), np.float64(0.0)] 
** CASE 115 **: [2, 0, 4, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.40092552484085653), np.float64(0.0)] 
** CASE 116 **: [5, 0, 4, 1, 0, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.40092552484085653), np.float64(0.0)] 
** CASE 117 **: [1, 0, 4, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.4009255248408582), np.float64(0.0)] 
** CASE 118 **: [2, 0, 4, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.4009255248408582), np.float64(0.0)] 
** CASE 119 **: [5, 0, 4, 1, 1, 1, 0] ; RESULTS: tip-disp=[np.float64(-0.02806829714518555), np.float64(-0.4009255248408582), np.float64(0.0)] 

total cases: 120 
result taskmanagerTest= -0.23406814272950335 
refsol= -0.23406814272950335 
tol= 5e-14 
****************************************** 
  EXAMPLE 81 ("taskmanagerTest.py") FINISHED SUCCESSFUL 
  RESULT = -0.23406814272950335 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START EXAMPLE 82 ("velocityVerletTest.py"): 
****************************************** 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (VelocityVerlet)
STEP2000, t = 2s, timeToGo = 0s, Nit/step = 0
solver finished after 0.0039838 seconds.
p  = [np.float64(1.0912990667233304), np.float64(0.0), np.float64(0.0)] 
h= 0.001 , err= 4.541650566514122e-06 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (VelocityVerlet)
STEP4000, t = 2s, timeToGo = 0s, Nit/step = 0
solver finished after 0.0053194 seconds.
p  = [np.float64(1.0912956605256894), np.float64(0.0), np.float64(0.0)] 
h= 0.0005 , err= 1.1354529254603563e-06 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (VelocityVerlet)
STEP8000, t = 2s, timeToGo = 0s, Nit/step = 0
solver finished after 0.0078102 seconds.
p  = [np.float64(1.091294808938409), np.float64(0.0), np.float64(0.0)] 
h= 0.00025 , err= 2.838656449899446e-07 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: explicit time integration (VelocityVerlet)
STEP16000, t = 2s, timeToGo = 0s, Nit/step = 0
solver finished after 0.0130832 seconds.
p  = [np.float64(1.0912945960393574), np.float64(0.0), np.float64(0.0)] 
h= 0.000125 , err= 7.096659349059564e-08 
velocityVerletTest result= 4.365184132226787 
velocityVerletTest error= 0.0 
refsol= 4.365184132226787 
tol= 5e-14 
****************************************** 
  EXAMPLE 82 ("velocityVerletTest.py") FINISHED SUCCESSFUL 
  RESULT = 4.365184132226787 
  ERROR = 0.0 
****************************************** 


****************************************** 
  START MINI EXAMPLE 0 ("ObjectMassPoint.py"): 
example for ObjectMassPoint completed, test result = 2.0 
  MINI EXAMPLE 0 ("ObjectMassPoint.py") FINISHED SUCCESSFUL 
  RESULT = 2.0 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 1 ("ObjectMassPoint2D.py"): 
example for ObjectMassPoint2D completed, test result = 2.0 
  MINI EXAMPLE 1 ("ObjectMassPoint2D.py") FINISHED SUCCESSFUL 
  RESULT = 2.0 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 2 ("ObjectMass1D.py"): 
example for ObjectMass1D completed, test result = 2.0 
  MINI EXAMPLE 2 ("ObjectMass1D.py") FINISHED SUCCESSFUL 
  RESULT = 2.0 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 3 ("ObjectRotationalMass1D.py"): 
example for ObjectRotationalMass1D completed, test result = 2.0 
  MINI EXAMPLE 3 ("ObjectRotationalMass1D.py") FINISHED SUCCESSFUL 
  RESULT = 2.0 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 4 ("ObjectRigidBody2D.py"): 
example for ObjectRigidBody2D completed, test result = 4.356194490192344 
  MINI EXAMPLE 4 ("ObjectRigidBody2D.py") FINISHED SUCCESSFUL 
  RESULT = 4.356194490192344 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 5 ("ObjectGenericODE2.py"): 
example for ObjectGenericODE2 completed, test result = 1.0039999999354785 
  MINI EXAMPLE 5 ("ObjectGenericODE2.py") FINISHED SUCCESSFUL 
  RESULT = 1.0039999999354785 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 6 ("ObjectGenericODE1.py"): 
example for ObjectGenericODE1 completed, test result = -0.8206847097689384 
  MINI EXAMPLE 6 ("ObjectGenericODE1.py") FINISHED SUCCESSFUL 
  RESULT = -0.8206847097689384 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 7 ("ObjectKinematicTree.py"): 
example for ObjectKinematicTree completed, test result = -3.134018551808591 
  MINI EXAMPLE 7 ("ObjectKinematicTree.py") FINISHED SUCCESSFUL 
  RESULT = -3.134018551808591 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 8 ("ObjectANCFCable.py"): 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
STEP1, factor = 1, timeToGo = 0s, Nit/step = 6
solver finished after 0.0089555 seconds.
example for ObjectANCFCable completed, test result = -0.5013058140308919 
  MINI EXAMPLE 8 ("ObjectANCFCable.py") FINISHED SUCCESSFUL 
  RESULT = -0.5013058140308919 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 9 ("ObjectANCFCable2D.py"): 
+++++++++++++++++++++++++++++++
EXUDYN V1.9.0 solver: nonlinear static solver
STEP1, factor = 1, timeToGo = 0s, Nit/step = 6
solver finished after 0.0037688 seconds.
example for ObjectANCFCable2D completed, test result = -0.5013058140308901 
  MINI EXAMPLE 9 ("ObjectANCFCable2D.py") FINISHED SUCCESSFUL 
  RESULT = -0.5013058140308901 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 10 ("ObjectANCFThinPlate.py"): 
example for ObjectANCFThinPlate completed, test result = 0 
  MINI EXAMPLE 10 ("ObjectANCFThinPlate.py") FINISHED SUCCESSFUL 
  RESULT = 0 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 11 ("ObjectConnectorSpringDamper.py"): 
example for ObjectConnectorSpringDamper completed, test result = 0.9733828995763039 
  MINI EXAMPLE 11 ("ObjectConnectorSpringDamper.py") FINISHED SUCCESSFUL 
  RESULT = 0.9733828995763039 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 12 ("ObjectConnectorCartesianSpringDamper.py"): 
example for ObjectConnectorCartesianSpringDamper completed, test result = -0.0009999999999750209 
  MINI EXAMPLE 12 ("ObjectConnectorCartesianSpringDamper.py") FINISHED SUCCESSFUL 
  RESULT = -0.0009999999999750209 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 13 ("ObjectConnectorRigidBodySpringDamper.py"): 
example for ObjectConnectorRigidBodySpringDamper completed, test result = -0.5349299545315868 
  MINI EXAMPLE 13 ("ObjectConnectorRigidBodySpringDamper.py") FINISHED SUCCESSFUL 
  RESULT = -0.5349299545315868 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 14 ("ObjectConnectorLinearSpringDamper.py"): 
example for ObjectConnectorLinearSpringDamper completed, test result = 0.0004999866342439289 
  MINI EXAMPLE 14 ("ObjectConnectorLinearSpringDamper.py") FINISHED SUCCESSFUL 
  RESULT = 0.0004999866342439289 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 15 ("ObjectConnectorTorsionalSpringDamper.py"): 
example for ObjectConnectorTorsionalSpringDamper completed, test result = 0.0004999866342439527 
  MINI EXAMPLE 15 ("ObjectConnectorTorsionalSpringDamper.py") FINISHED SUCCESSFUL 
  RESULT = 0.0004999866342439527 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 16 ("ObjectConnectorCoordinateSpringDamper.py"): 
example for ObjectConnectorCoordinateSpringDamper completed, test result = 0.0019995154213252597 
  MINI EXAMPLE 16 ("ObjectConnectorCoordinateSpringDamper.py") FINISHED SUCCESSFUL 
  RESULT = 0.0019995154213252597 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 17 ("ObjectConnectorGravity.py"): 
example for ObjectConnectorGravity completed, test result = 1.000000000000048 
  MINI EXAMPLE 17 ("ObjectConnectorGravity.py") FINISHED SUCCESSFUL 
  RESULT = 1.000000000000048 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 18 ("ObjectConnectorDistance.py"): 
example for ObjectConnectorDistance completed, test result = -0.9861806726069355 
  MINI EXAMPLE 18 ("ObjectConnectorDistance.py") FINISHED SUCCESSFUL 
  RESULT = -0.9861806726069355 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 19 ("ObjectConnectorCoordinate.py"): 
example for ObjectConnectorCoordinate completed, test result = 0.04999999999999982 
  MINI EXAMPLE 19 ("ObjectConnectorCoordinate.py") FINISHED SUCCESSFUL 
  RESULT = 0.04999999999999982 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 20 ("ObjectJointRevoluteZ.py"): 
example for ObjectJointRevoluteZ completed, test result = 0.49999999999999795 
  MINI EXAMPLE 20 ("ObjectJointRevoluteZ.py") FINISHED SUCCESSFUL 
  RESULT = 0.49999999999999795 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 21 ("MarkerSuperElementPosition.py"): 
example for MarkerSuperElementPosition completed, test result = 1.0039999999354785 
  MINI EXAMPLE 21 ("MarkerSuperElementPosition.py") FINISHED SUCCESSFUL 
  RESULT = 1.0039999999354785 
  ERROR  = 0.0 


****************************************** 
  START MINI EXAMPLE 22 ("LoadMassProportional.py"): 
example for LoadMassProportional completed, test result = -4.904999999999998 
  MINI EXAMPLE 22 ("LoadMassProportional.py") FINISHED SUCCESSFUL 
  RESULT = -4.904999999999998 
  ERROR  = 0.0 

 
****************************************** 
TEST SUITE RESULTS SUMMARY: 
****************************************** 
time elapsed = 22.891 seconds 
UNIT TESTS SKIPPED 
ALL 83 TestModel TESTS SUCCESSFUL 
ALL 23 MINI EXAMPLE TESTS SUCCESSFUL 
******************************************
 
CPP UNIT TESTS SKIPPED 
