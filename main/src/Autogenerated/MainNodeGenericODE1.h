/** ***********************************************************************************************
* @class        MainNodeGenericODE1Parameters
* @brief        Parameter class for MainNodeGenericODE1
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-07-21  19:36:20 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINNODEGENERICODE1PARAMETERS__H
#define MAINNODEGENERICODE1PARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CNodeGenericODE1.h"

#include "Autogenerated/VisuNodeGenericODE1.h"

//! AUTO: Parameters for class MainNodeGenericODE1Parameters
class MainNodeGenericODE1Parameters // AUTO: 
{
public: // AUTO: 
    Vector initialCoordinates;                    //!< AUTO: initial displacement coordinates; must be consistent with numberOfODE1Coordinates
    //! AUTO: default constructor with parameter initialization
    MainNodeGenericODE1Parameters()
    {
        initialCoordinates = Vector();
    };
};


/** ***********************************************************************************************
* @class        MainNodeGenericODE1
* @brief        A node containing a number of \hac{ODE1} variables; use e.g. linear state space systems. Note that referenceCoordinates and initialCoordinates must be initialized, because no default values exist.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainNodeGenericODE1
class MainNodeGenericODE1: public MainNode // AUTO: 
{
protected: // AUTO: 
    CNodeGenericODE1* cNodeGenericODE1; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationNodeGenericODE1* visualizationNodeGenericODE1; //pointer to computational object (initialized in object factory) AUTO:
    MainNodeGenericODE1Parameters parameters; //! AUTO: contains all parameters for MainNodeGenericODE1

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainNodeGenericODE1()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CNodeGenericODE1* GetCNodeGenericODE1() { return cNodeGenericODE1; }
    //! AUTO: Get const pointer to computational class
    const CNodeGenericODE1* GetCNodeGenericODE1() const { return cNodeGenericODE1; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCNodeGenericODE1(CNodeGenericODE1* pCNodeGenericODE1) { cNodeGenericODE1 = pCNodeGenericODE1; }

    //! AUTO: Get pointer to visualization class
    VisualizationNodeGenericODE1* GetVisualizationNodeGenericODE1() { return visualizationNodeGenericODE1; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationNodeGenericODE1* GetVisualizationNodeGenericODE1() const { return visualizationNodeGenericODE1; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationNodeGenericODE1(VisualizationNodeGenericODE1* pVisualizationNodeGenericODE1) { visualizationNodeGenericODE1 = pVisualizationNodeGenericODE1; }

    //! AUTO: Get const pointer to computational base class object
    virtual CNode* GetCNode() const { return cNodeGenericODE1; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCNode(CNode* pCNode) { cNodeGenericODE1 = (CNodeGenericODE1*)pCNode; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationNode* GetVisualizationNode() const { return visualizationNodeGenericODE1; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationNode(VisualizationNode* pVisualizationNode) { visualizationNodeGenericODE1 = (VisualizationNodeGenericODE1*)pVisualizationNode; }

    //! AUTO: Write (Reference) access to parameters
    virtual MainNodeGenericODE1Parameters& GetParameters() { return parameters; }
    //! AUTO: Read access to parameters
    virtual const MainNodeGenericODE1Parameters& GetParameters() const { return parameters; }

    //! AUTO:  Get type name of node (without keyword 'Node'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "GenericODE1";
    }

    //! AUTO:  return internally stored initial coordinates (displacements) of node
    virtual LinkedDataVector GetInitialCoordinateVector() const override
    {
        return parameters.initialCoordinates;
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cNodeGenericODE1->GetParameters().referenceCoordinates = py::cast<std::vector<Real>>(d["referenceCoordinates"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cNodeGenericODE1->GetParameters().numberOfODE1Coordinates = py::cast<Index>(d["numberOfODE1Coordinates"]); /* AUTO:  read out dictionary and cast to C++ type*/
        GetParameters().initialCoordinates = py::cast<std::vector<Real>>(d["initialCoordinates"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationNodeGenericODE1->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["nodeType"] = (std::string)GetTypeName();
        d["referenceCoordinates"] = EPyUtils::Vector2NumPy(cNodeGenericODE1->GetParameters().referenceCoordinates); //! AUTO: cast variables into python (not needed for standard types) 
        d["numberOfODE1Coordinates"] = (Index)cNodeGenericODE1->GetParameters().numberOfODE1Coordinates; //! AUTO: cast variables into python (not needed for standard types) 
        d["initialCoordinates"] = EPyUtils::Vector2NumPy(GetParameters().initialCoordinates); //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationNodeGenericODE1->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("referenceCoordinates") == 0) { return EPyUtils::Vector2NumPy(cNodeGenericODE1->GetParameters().referenceCoordinates);} //! AUTO: get parameter
        else if (parameterName.compare("initialCoordinates") == 0) { return EPyUtils::Vector2NumPy(GetParameters().initialCoordinates);} //! AUTO: get parameter
        else if (parameterName.compare("numberOfODE1Coordinates") == 0) { return py::cast((Index)cNodeGenericODE1->GetParameters().numberOfODE1Coordinates);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationNodeGenericODE1->GetShow());} //! AUTO: get parameter
        else  {PyError(STDstring("NodeGenericODE1::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("referenceCoordinates") == 0) { cNodeGenericODE1->GetParameters().referenceCoordinates = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("initialCoordinates") == 0) { GetParameters().initialCoordinates = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("numberOfODE1Coordinates") == 0) { cNodeGenericODE1->GetParameters().numberOfODE1Coordinates = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationNodeGenericODE1->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("NodeGenericODE1::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
    }

};



#endif //#ifdef include once...
