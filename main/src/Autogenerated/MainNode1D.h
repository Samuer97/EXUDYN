/** ***********************************************************************************************
* @class        MainNode1DParameters
* @brief        Parameter class for MainNode1D
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-07-21  19:36:20 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINNODE1DPARAMETERS__H
#define MAINNODE1DPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CNode1D.h"

#include "Autogenerated/VisuNode1D.h"

//! AUTO: Parameters for class MainNode1DParameters
class MainNode1DParameters // AUTO: 
{
public: // AUTO: 
    Vector initialCoordinates;                    //!< AUTO: initial displacement coordinate (in vector form)
    Vector initialCoordinates_t;                  //!< AUTO: initial velocity coordinate (in vector form)
    //! AUTO: default constructor with parameter initialization
    MainNode1DParameters()
    {
        initialCoordinates = Vector({0.});
        initialCoordinates_t = Vector({0.});
    };
};


/** ***********************************************************************************************
* @class        MainNode1D
* @brief        A node with one \hac{ODE2} coordinate for one dimensional (1D) problems; use e.g. for scalar dynamic equations (Mass1D) and mass-spring-damper mechanisms, representing either translational or rotational degrees of freedom: in most cases, Node1D is equivalent to NodeGenericODE2 using one coordinate, however, it offers a transformation to 3D translational or rotational motion and allows to couple this node to 2D or 3D bodies.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainNode1D
class MainNode1D: public MainNode // AUTO: 
{
protected: // AUTO: 
    CNode1D* cNode1D; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationNode1D* visualizationNode1D; //pointer to computational object (initialized in object factory) AUTO:
    MainNode1DParameters parameters; //! AUTO: contains all parameters for MainNode1D

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainNode1D()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CNode1D* GetCNode1D() { return cNode1D; }
    //! AUTO: Get const pointer to computational class
    const CNode1D* GetCNode1D() const { return cNode1D; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCNode1D(CNode1D* pCNode1D) { cNode1D = pCNode1D; }

    //! AUTO: Get pointer to visualization class
    VisualizationNode1D* GetVisualizationNode1D() { return visualizationNode1D; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationNode1D* GetVisualizationNode1D() const { return visualizationNode1D; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationNode1D(VisualizationNode1D* pVisualizationNode1D) { visualizationNode1D = pVisualizationNode1D; }

    //! AUTO: Get const pointer to computational base class object
    virtual CNode* GetCNode() const { return cNode1D; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCNode(CNode* pCNode) { cNode1D = (CNode1D*)pCNode; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationNode* GetVisualizationNode() const { return visualizationNode1D; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationNode(VisualizationNode* pVisualizationNode) { visualizationNode1D = (VisualizationNode1D*)pVisualizationNode; }

    //! AUTO: Write (Reference) access to parameters
    virtual MainNode1DParameters& GetParameters() { return parameters; }
    //! AUTO: Read access to parameters
    virtual const MainNode1DParameters& GetParameters() const { return parameters; }

    //! AUTO:  Get type name of node (without keyword 'Node'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "1D";
    }

    //! AUTO:  return internally stored initial coordinates (displacements) of node
    virtual LinkedDataVector GetInitialCoordinateVector() const override
    {
        return parameters.initialCoordinates;
    }

    //! AUTO:  return internally stored initial coordinates (velocities) of node
    virtual LinkedDataVector GetInitialCoordinateVector_t() const override
    {
        return parameters.initialCoordinates_t;
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cNode1D->GetParameters().referenceCoordinates = py::cast<std::vector<Real>>(d["referenceCoordinates"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "initialCoordinates")) { GetParameters().initialCoordinates = py::cast<std::vector<Real>>(d["initialCoordinates"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "initialVelocities")) { GetParameters().initialCoordinates_t = py::cast<std::vector<Real>>(d["initialVelocities"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationNode1D->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["nodeType"] = (std::string)GetTypeName();
        d["referenceCoordinates"] = EPyUtils::Vector2NumPy(cNode1D->GetParameters().referenceCoordinates); //! AUTO: cast variables into python (not needed for standard types) 
        d["initialCoordinates"] = EPyUtils::Vector2NumPy(GetParameters().initialCoordinates); //! AUTO: cast variables into python (not needed for standard types) 
        d["initialVelocities"] = EPyUtils::Vector2NumPy(GetParameters().initialCoordinates_t); //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationNode1D->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("referenceCoordinates") == 0) { return EPyUtils::Vector2NumPy(cNode1D->GetParameters().referenceCoordinates);} //! AUTO: get parameter
        else if (parameterName.compare("initialCoordinates") == 0) { return EPyUtils::Vector2NumPy(GetParameters().initialCoordinates);} //! AUTO: get parameter
        else if (parameterName.compare("initialVelocities") == 0) { return EPyUtils::Vector2NumPy(GetParameters().initialCoordinates_t);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationNode1D->GetShow());} //! AUTO: get parameter
        else  {PyError(STDstring("Node1D::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("referenceCoordinates") == 0) { cNode1D->GetParameters().referenceCoordinates = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("initialCoordinates") == 0) { GetParameters().initialCoordinates = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("initialVelocities") == 0) { GetParameters().initialCoordinates_t = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationNode1D->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("Node1D::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
    }

};



#endif //#ifdef include once...
