/** ***********************************************************************************************
* @class        CObjectANCFBeam3DParameters
* @brief        Parameter class for CObjectANCFBeam3D
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-10-17  16:28:10 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef COBJECTANCFBEAM3DPARAMETERS__H
#define COBJECTANCFBEAM3DPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include "Main/StructuralElementsDataStructures.h"
#include "Autogenerated/BeamSectionGeometry.h"

//! AUTO: Parameters for class CObjectANCFBeam3DParameters
class CObjectANCFBeam3DParameters // AUTO: 
{
public: // AUTO: 
    Index2 nodeNumbers;                           //!< AUTO: two node numbers for beam element
    Real physicsLength;                           //!< AUTO:  [SI:m] reference length of beam; such that the total volume (e.g. for volume load) gives \f$\rho A L\f$; must be positive
    Vector3D crossSectionPenaltyFactor;           //!< AUTO:  [SI:1] additional penalty factors for cross section deformation, which are in total \f$k_{cs} = [f_{yy}\cdot k_{yy},\, f_{zz}\cdot k_{zz},\, f_{yz}\cdot k_{yz}]\tp\f$
    Vector2D testBeamRectangularSize;             //!< AUTO:  [SI:m] test dimensions for mass matrix and other terms using standard rectangular cross section
    Real physicsMassPerLength;                    //!< AUTO:  [SI:kg/m] mass per length of beam; this data is used internally for computation
    Matrix3D physicsCrossSectionInertia;          //!< AUTO:  [SI:kg m] cross section mass moment of inertia tensor; this data is used internally for computation
    Vector3D physicsTorsionalBendingStiffness;    //!< AUTO:  [SI:Nm\f$^2\f$] bending and torsional stiffness vector;
    Vector3D physicsAxialShearStiffness;          //!< AUTO:  [SI:N] axial and shear stiffness;
    //! AUTO: default constructor with parameter initialization
    CObjectANCFBeam3DParameters()
    {
        nodeNumbers = Index2({EXUstd::InvalidIndex, EXUstd::InvalidIndex});
        physicsLength = 0.;
        crossSectionPenaltyFactor = Vector3D({1.,1.,1.});
        testBeamRectangularSize = Vector2D({-1.,-1.});
        physicsMassPerLength = 0.;
        physicsCrossSectionInertia = EXUmath::zeroMatrix3D;
        physicsTorsionalBendingStiffness = 0.;
        physicsAxialShearStiffness = 0.;
    };
};


/** ***********************************************************************************************
* @class        CObjectANCFBeam3D
* @brief        OBJECT UNDER CONSTRUCTION: A 3D beam finite element based on the absolute nodal coordinate formulation, using two . The localPosition \f$x\f$ of the beam ranges from \f$-L/2\f$ (at node 0) to \f$L/2\f$ (at node 1). The axial coordinate is \f$x\f$ (first coordinate) and the cross section is spanned by local \f$y\f$/\f$z\f$ axes; assuming dimensions \f$w_y\f$ and \f$w_z\f$ in cross section, the local position range is \f$\in [[-L/2,L/2],\, [-wy/2,wy/2],\, [-wz/2,wz/2] ]\f$.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: CObjectANCFBeam3D
class CObjectANCFBeam3D: public CObjectBody // AUTO: 
{
protected: // AUTO: 
    mutable bool massMatrixComputed; //!< flag which shows that mass matrix has been computed; will be set to false at time when parameters are set
    CObjectANCFBeam3DParameters parameters; //! AUTO: contains all parameters for CObjectANCFBeam3D

public: // AUTO: 
    static constexpr Index nODE2perNode = 9;//AUTO: number of element coordinates
    static constexpr Index nNodes = 2;//AUTO: number of nodes for templates
    static constexpr Index nODE2coordinates = nNodes * nODE2perNode;//AUTO: number of nodes for templates
    static constexpr Index nSFperNode = 3;//AUTO: number of shape functions per node
    mutable ConstSizeMatrix<nODE2coordinates*nODE2coordinates> precomputedMassMatrix; //!< if massMatrixComputed=true, this contains the (constant) mass matrix for faster computation (should be in protected area, but needs nODE2perNode)

    // AUTO: access functions
    //! AUTO: Write (Reference) access to parameters
    virtual CObjectANCFBeam3DParameters& GetParameters() { return parameters; }
    //! AUTO: Read access to parameters
    virtual const CObjectANCFBeam3DParameters& GetParameters() const { return parameters; }

    //! AUTO:  Computational function: compute mass matrix
    virtual void ComputeMassMatrix(EXUmath::MatrixContainer& massMatrixC, const ArrayIndex& ltg, Index objectNumber) const override;

    //! AUTO:  Computational function: compute left-hand-side (LHS) of second order ordinary differential equations (ODE) to 'ode2Lhs'
    virtual void ComputeODE2LHS(Vector& ode2Lhs, Index objectNumber) const override;

    //! AUTO:  Computational function: compute left-hand-side (LHS) of second order ordinary differential equations (ODE) to 'ode2Lhs'
    template<class TReal> void ComputeODE2LHStemplate(VectorBase<TReal>& ode2Lhs, const ConstSizeVectorBase<TReal, nODE2coordinates>& qANCF, const ConstSizeVectorBase<TReal, nODE2coordinates>& qANCF_t) const;

    //! AUTO:  return the available jacobian dependencies and the jacobians which are available as a function; if jacobian dependencies exist but are not available as a function, it is computed numerically; can be combined with 2^i enum flags
    virtual JacobianType::Type GetAvailableJacobians() const override
    {
        return (JacobianType::Type)(JacobianType::ODE2_ODE2 + JacobianType::ODE2_ODE2_t);
    }

    //! AUTO:  Flags to determine, which access (forces, moments, connectors, ...) to object are possible
    virtual AccessFunctionType GetAccessFunctionTypes() const override;

    //! AUTO:  provide Jacobian at localPosition in 'value' according to object access
    virtual void GetAccessFunctionBody(AccessFunctionType accessType, const Vector3D& localPosition, Matrix& value) const override;

    //! AUTO:  provide according output variable in 'value'
    virtual void GetOutputVariableBody(OutputVariableType variableType, const Vector3D& localPosition, ConfigurationType configuration, Vector& value, Index objectNumber) const override;

    //! AUTO:  return the (global) position of 'localPosition' according to configuration type
    virtual Vector3D GetPosition(const Vector3D& localPosition, ConfigurationType configuration = ConfigurationType::Current) const override;

    //! AUTO:  return the (global) displacement of 'localPosition' according to configuration type
    virtual Vector3D GetDisplacement(const Vector3D& localPosition, ConfigurationType configuration = ConfigurationType::Current) const override;

    //! AUTO:  return the (global) velocity of 'localPosition' according to configuration type
    virtual Vector3D GetVelocity(const Vector3D& localPosition, ConfigurationType configuration = ConfigurationType::Current) const override;

    //! AUTO:  return the (global) acceleration of 'localPosition' according to configuration type
    Vector3D GetAcceleration(const Vector3D& localPosition, ConfigurationType configuration = ConfigurationType::Current) const;

    //! AUTO:  return configuration dependent rotation matrix of node; returns always a 3D Matrix, independent of 2D or 3D object; for rigid bodies, the argument localPosition has no effect
    virtual Matrix3D GetRotationMatrix(const Vector3D& localPosition, ConfigurationType configuration = ConfigurationType::Current) const override;

    //! AUTO:  return configuration dependent angular velocity of node; returns always a 3D Vector, independent of 2D or 3D object; for rigid bodies, the argument localPosition has no effect
    virtual Vector3D GetAngularVelocity(const Vector3D& localPosition, ConfigurationType configuration = ConfigurationType::Current) const override;

    //! AUTO:  Get global node number (with local node index); needed for every object ==> does local mapping
    virtual Index GetNodeNumber(Index localIndex) const override
    {
        release_assert(localIndex <= 1);
        return parameters.nodeNumbers[localIndex];
    }

    //! AUTO:  number of nodes; needed for every object
    virtual Index GetNumberOfNodes() const override
    {
        return nNodes;
    }

    //! AUTO:  number of \hac{ODE2} coordinates
    virtual Index GetODE2Size() const override
    {
        return nODE2coordinates;
    }

    //! AUTO:  Get type of object, e.g. to categorize and distinguish during assembly and computation
    virtual CObjectType GetType() const override
    {
        return (CObjectType)((Index)CObjectType::Body + (Index)CObjectType::MultiNoded);
    }

    //! AUTO:  return true if object has time and coordinate independent (=constant) mass matrix
    virtual bool HasConstantMassMatrix() const override
    {
        return true;
    }

    //! AUTO:  This flag is reset upon change of parameters; says that mass matrix (future: other pre-computed values) need to be recomputed
    virtual void ParametersHaveChanged() override
    {
        massMatrixComputed = false;
    }

    //! AUTO:  precompute mass terms if it has not been done yet
    void PreComputeMassTerms() const;

    //! AUTO:  Get frame as homogeneous transformation at some localPosition[0]
    HomogeneousTransformation GetLocalPositionFrame(const Vector3D& localPosition, ConfigurationType configuration) const;

    //! AUTO:  get compressed shape function vector \f$\Sm_v\f$, depending local position \f$\in [[-L/2,L/2],\, [-wy/2,wy/2],\, [-wz/2,wz/2] ]\f$
    static SlimVector<nSFperNode*nNodes> ComputeShapeFunctions(const Vector3D& localPosition, Real L);

    //! AUTO:  get first derivative of compressed shape function vector \f$\frac{\partial \Sm_v}{\partial x}\f$, depending local position \f$\in [[-L/2,L/2],\, [-wy/2,wy/2],\, [-wz/2,wz/2] ]\f$
    static SlimVector<nSFperNode*nNodes> ComputeShapeFunctions_x(const Vector3D& localPosition, Real L);

    //! AUTO:  get first derivative of compressed shape function vector \f$\frac{\partial \Sm_v}{\partial y}\f$, depending local position
    static SlimVector<nSFperNode*nNodes> ComputeShapeFunctions_y(const Vector3D& localPosition, Real L);

    //! AUTO:  get first derivative of compressed shape function vector \f$\frac{\partial \Sm_v}{\partial z}\f$, depending local position
    static SlimVector<nSFperNode*nNodes> ComputeShapeFunctions_z(const Vector3D& localPosition, Real L);

    //! AUTO:  get first derivative of compressed shape function vector \f$\frac{\partial \Sm_v}{\partial y}\f$, depending local position
    static SlimVector<nSFperNode*nNodes> ComputeShapeFunctions_yx(const Vector3D& localPosition, Real L);

    //! AUTO:  get first derivative of compressed shape function vector \f$\frac{\partial \Sm_v}{\partial z}\f$, depending local position
    static SlimVector<nSFperNode*nNodes> ComputeShapeFunctions_zx(const Vector3D& localPosition, Real L);

    //! AUTO:  Compute node coordinates in current configuration including reference coordinates
    void ComputeCurrentNodeCoordinates(ConstSizeVector<nODE2perNode>& qNode0, ConstSizeVector<nODE2perNode>& qNode1) const;

    //! AUTO:  Compute node velocity coordinates in current configuration
    void ComputeCurrentNodeVelocities(ConstSizeVector<nODE2perNode>& qNode0, ConstSizeVector<nODE2perNode>& qNode1) const;

    //! AUTO:  Compute object (finite element) coordinates in current configuration including reference coordinates
    void ComputeCurrentObjectCoordinates(ConstSizeVector<2*nODE2perNode>& qANCF) const;

    //! AUTO:  Compute object (finite element) velocities in current configuration
    void ComputeCurrentObjectVelocities(ConstSizeVector<2*nODE2perNode>& qANCF_t) const;

    //! AUTO:  compute the slope vector at a certain position, for given configuration
    void ComputeSlopeVectors(Real x, ConfigurationType configuration, Vector3D& slopeX,  Vector3D& slopeY,  Vector3D& slopeZ) const;

    //! AUTO:  compute twist and curvature and its variation
    void GetDeltaLocalTwistAndCurvature(Real x, ConstSizeMatrix<EXUstd::dim3D * nODE2coordinates>& deltaKappa, ConstSizeVector<EXUstd::dim3D>& kappa) const;

    //! AUTO:  compute twist and curvature and its variation
    void GetDeltaLocalAxialShearDeformation(Real x, ConstSizeMatrix<EXUstd::dim3D * nODE2coordinates>& deltaAxialShearDeformation, ConstSizeVector<EXUstd::dim3D>& axialShearDeformation) const;

    //! AUTO:  compute twist and curvature and its variation
    void GetDeltaCrossSectionDeformation(Real x, ConstSizeMatrix<EXUstd::dim3D * nODE2coordinates>& deltaCrossSectionDeformation, ConstSizeVector<EXUstd::dim3D>& crossSectionDeformation) const;

    virtual OutputVariableType GetOutputVariableTypes() const override
    {
        return (OutputVariableType)(
            (Index)OutputVariableType::Position +
            (Index)OutputVariableType::Displacement +
            (Index)OutputVariableType::Velocity +
            (Index)OutputVariableType::VelocityLocal +
            (Index)OutputVariableType::AngularVelocity +
            (Index)OutputVariableType::AngularVelocityLocal +
            (Index)OutputVariableType::Acceleration +
            (Index)OutputVariableType::Rotation +
            (Index)OutputVariableType::RotationMatrix );
    }

};



#endif //#ifdef include once...
