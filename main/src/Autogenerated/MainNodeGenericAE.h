/** ***********************************************************************************************
* @class        MainNodeGenericAEParameters
* @brief        Parameter class for MainNodeGenericAE
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2024-02-03  15:35:21 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINNODEGENERICAEPARAMETERS__H
#define MAINNODEGENERICAEPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CNodeGenericAE.h"

#include "Autogenerated/VisuNodeGenericAE.h"

//! AUTO: Parameters for class MainNodeGenericAEParameters
class MainNodeGenericAEParameters // AUTO: 
{
public: // AUTO: 
    Vector initialCoordinates;                    //!< AUTO: initial displacement coordinates; must be consistent with numberOfAECoordinates
    //! AUTO: default constructor with parameter initialization
    MainNodeGenericAEParameters()
    {
        initialCoordinates = Vector();
    };
};


/** ***********************************************************************************************
* @class        MainNodeGenericAE
* @brief        A node containing a number of \hac{AE} variables; use e.g. linear state space systems. Note that referenceCoordinates and initialCoordinates must be initialized, because no default values exist.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainNodeGenericAE
class MainNodeGenericAE: public MainNode // AUTO: 
{
protected: // AUTO: 
    CNodeGenericAE* cNodeGenericAE; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationNodeGenericAE* visualizationNodeGenericAE; //pointer to computational object (initialized in object factory) AUTO:
    MainNodeGenericAEParameters parameters; //! AUTO: contains all parameters for MainNodeGenericAE

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainNodeGenericAE()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CNodeGenericAE* GetCNodeGenericAE() { return cNodeGenericAE; }
    //! AUTO: Get const pointer to computational class
    const CNodeGenericAE* GetCNodeGenericAE() const { return cNodeGenericAE; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCNodeGenericAE(CNodeGenericAE* pCNodeGenericAE) { cNodeGenericAE = pCNodeGenericAE; }

    //! AUTO: Get pointer to visualization class
    VisualizationNodeGenericAE* GetVisualizationNodeGenericAE() { return visualizationNodeGenericAE; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationNodeGenericAE* GetVisualizationNodeGenericAE() const { return visualizationNodeGenericAE; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationNodeGenericAE(VisualizationNodeGenericAE* pVisualizationNodeGenericAE) { visualizationNodeGenericAE = pVisualizationNodeGenericAE; }

    //! AUTO: Get const pointer to computational base class object
    virtual CNode* GetCNode() const { return cNodeGenericAE; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCNode(CNode* pCNode) { cNodeGenericAE = (CNodeGenericAE*)pCNode; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationNode* GetVisualizationNode() const { return visualizationNodeGenericAE; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationNode(VisualizationNode* pVisualizationNode) { visualizationNodeGenericAE = (VisualizationNodeGenericAE*)pVisualizationNode; }

    //! AUTO: Write (Reference) access to parameters
    virtual MainNodeGenericAEParameters& GetParameters() { return parameters; }
    //! AUTO: Read access to parameters
    virtual const MainNodeGenericAEParameters& GetParameters() const { return parameters; }

    //! AUTO:  Get type name of node (without keyword 'Node'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "GenericAE";
    }

    //! AUTO:  return internally stored initial coordinates (displacements) of node
    virtual LinkedDataVector GetInitialCoordinateVector() const override
    {
        return parameters.initialCoordinates;
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cNodeGenericAE->GetParameters().referenceCoordinates = py::cast<std::vector<Real>>(d["referenceCoordinates"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cNodeGenericAE->GetParameters().numberOfAECoordinates = py::cast<Index>(d["numberOfAECoordinates"]); /* AUTO:  read out dictionary and cast to C++ type*/
        GetParameters().initialCoordinates = py::cast<std::vector<Real>>(d["initialCoordinates"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationNodeGenericAE->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["nodeType"] = (std::string)GetTypeName();
        d["referenceCoordinates"] = EPyUtils::Vector2NumPy(cNodeGenericAE->GetParameters().referenceCoordinates); //! AUTO: cast variables into python (not needed for standard types) 
        d["numberOfAECoordinates"] = (Index)cNodeGenericAE->GetParameters().numberOfAECoordinates; //! AUTO: cast variables into python (not needed for standard types) 
        d["initialCoordinates"] = EPyUtils::Vector2NumPy(GetParameters().initialCoordinates); //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationNodeGenericAE->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("referenceCoordinates") == 0) { return EPyUtils::Vector2NumPy(cNodeGenericAE->GetParameters().referenceCoordinates);} //! AUTO: get parameter
        else if (parameterName.compare("initialCoordinates") == 0) { return EPyUtils::Vector2NumPy(GetParameters().initialCoordinates);} //! AUTO: get parameter
        else if (parameterName.compare("numberOfAECoordinates") == 0) { return py::cast((Index)cNodeGenericAE->GetParameters().numberOfAECoordinates);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationNodeGenericAE->GetShow());} //! AUTO: get parameter
        else  {PyError(STDstring("NodeGenericAE::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("referenceCoordinates") == 0) { cNodeGenericAE->GetParameters().referenceCoordinates = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("initialCoordinates") == 0) { GetParameters().initialCoordinates = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("numberOfAECoordinates") == 0) { cNodeGenericAE->GetParameters().numberOfAECoordinates = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationNodeGenericAE->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("NodeGenericAE::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
    }

};



#endif //#ifdef include once...
