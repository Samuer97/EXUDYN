/** ***********************************************************************************************
* @class        MainObjectANCFThinPlateParameters
* @brief        Parameter class for MainObjectANCFThinPlate
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2024-02-03  15:35:22 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTANCFTHINPLATEPARAMETERS__H
#define MAINOBJECTANCFTHINPLATEPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectANCFThinPlate.h"

#include "Autogenerated/VisuObjectANCFThinPlate.h"

//! AUTO: Parameters for class MainObjectANCFThinPlateParameters
class MainObjectANCFThinPlateParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectANCFThinPlate
* @brief        A 3D thin Kirchhoff plate finite element based on the absolute nodal coordinate formulation, using 4 nodes of type NodePointSlope12. The geometry as well as (deformed and distorted) reference configuration is given by the nodes. The localPosition follows unit-coordinates in the range [-1,1] for X, Y and Z coordinates; the thickness of the plate is h; This element is under construction.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectANCFThinPlate
class MainObjectANCFThinPlate: public MainObjectBody // AUTO: 
{
protected: // AUTO: 
    CObjectANCFThinPlate* cObjectANCFThinPlate; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectANCFThinPlate* visualizationObjectANCFThinPlate; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectANCFThinPlate()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectANCFThinPlate* GetCObjectANCFThinPlate() { return cObjectANCFThinPlate; }
    //! AUTO: Get const pointer to computational class
    const CObjectANCFThinPlate* GetCObjectANCFThinPlate() const { return cObjectANCFThinPlate; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectANCFThinPlate(CObjectANCFThinPlate* pCObjectANCFThinPlate) { cObjectANCFThinPlate = pCObjectANCFThinPlate; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectANCFThinPlate* GetVisualizationObjectANCFThinPlate() { return visualizationObjectANCFThinPlate; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectANCFThinPlate* GetVisualizationObjectANCFThinPlate() const { return visualizationObjectANCFThinPlate; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectANCFThinPlate(VisualizationObjectANCFThinPlate* pVisualizationObjectANCFThinPlate) { visualizationObjectANCFThinPlate = pVisualizationObjectANCFThinPlate; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectANCFThinPlate; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectANCFThinPlate = (CObjectANCFThinPlate*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectANCFThinPlate; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectANCFThinPlate = (VisualizationObjectANCFThinPlate*)pVisualizationObject; }

    //! AUTO:  Get type name of object; could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "ANCFCable";
    }

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return (Node::Type)(Node::Position + Node::PointSlope1);
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectANCFThinPlate->GetParameters().physicsThickness = py::cast<Real>(d["physicsThickness"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFThinPlate->GetParameters().physicsDensity = py::cast<Real>(d["physicsDensity"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetConstMatrixTemplateSafely<3,3>(d, "physicsStrainCoefficients", cObjectANCFThinPlate->GetParameters().physicsStrainCoefficients); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetConstMatrixTemplateSafely<3,3>(d, "physicsCurvatureCoefficients", cObjectANCFThinPlate->GetParameters().physicsCurvatureCoefficients); /*! AUTO:  safely cast to C++ type*/
        cObjectANCFThinPlate->GetParameters().strainIsRelativeToReference = py::cast<Real>(d["strainIsRelativeToReference"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFThinPlate->GetParameters().nodeNumbers = py::cast<NodeIndex4>(d["nodeNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFThinPlate->GetParameters().useReducedOrderIntegration = py::cast<Index>(d["useReducedOrderIntegration"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectANCFThinPlate->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectANCFThinPlate->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["physicsThickness"] = (Real)cObjectANCFThinPlate->GetParameters().physicsThickness; //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsDensity"] = (Real)cObjectANCFThinPlate->GetParameters().physicsDensity; //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsStrainCoefficients"] = EPyUtils::Matrix2NumPyTemplate(cObjectANCFThinPlate->GetParameters().physicsStrainCoefficients); //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsCurvatureCoefficients"] = EPyUtils::Matrix2NumPyTemplate(cObjectANCFThinPlate->GetParameters().physicsCurvatureCoefficients); //! AUTO: cast variables into python (not needed for standard types) 
        d["strainIsRelativeToReference"] = (Real)cObjectANCFThinPlate->GetParameters().strainIsRelativeToReference; //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumbers"] = (NodeIndex4)cObjectANCFThinPlate->GetParameters().nodeNumbers; //! AUTO: cast variables into python (not needed for standard types) 
        d["useReducedOrderIntegration"] = (Index)cObjectANCFThinPlate->GetParameters().useReducedOrderIntegration; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectANCFThinPlate->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectANCFThinPlate->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("physicsThickness") == 0) { return py::cast((Real)cObjectANCFThinPlate->GetParameters().physicsThickness);} //! AUTO: get parameter
        else if (parameterName.compare("physicsDensity") == 0) { return py::cast((Real)cObjectANCFThinPlate->GetParameters().physicsDensity);} //! AUTO: get parameter
        else if (parameterName.compare("physicsStrainCoefficients") == 0) { return EPyUtils::Matrix2NumPyTemplate(cObjectANCFThinPlate->GetParameters().physicsStrainCoefficients);} //! AUTO: get parameter
        else if (parameterName.compare("physicsCurvatureCoefficients") == 0) { return EPyUtils::Matrix2NumPyTemplate(cObjectANCFThinPlate->GetParameters().physicsCurvatureCoefficients);} //! AUTO: get parameter
        else if (parameterName.compare("strainIsRelativeToReference") == 0) { return py::cast((Real)cObjectANCFThinPlate->GetParameters().strainIsRelativeToReference);} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { return py::cast((NodeIndex4)cObjectANCFThinPlate->GetParameters().nodeNumbers);} //! AUTO: get parameter
        else if (parameterName.compare("useReducedOrderIntegration") == 0) { return py::cast((Index)cObjectANCFThinPlate->GetParameters().useReducedOrderIntegration);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectANCFThinPlate->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectANCFThinPlate->GetColor());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectANCFThinPlate::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsThickness") == 0) { cObjectANCFThinPlate->GetParameters().physicsThickness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsDensity") == 0) { cObjectANCFThinPlate->GetParameters().physicsDensity = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsStrainCoefficients") == 0) { EPyUtils::SetConstMatrixTemplateSafely<3,3>(value, cObjectANCFThinPlate->GetParameters().physicsStrainCoefficients); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsCurvatureCoefficients") == 0) { EPyUtils::SetConstMatrixTemplateSafely<3,3>(value, cObjectANCFThinPlate->GetParameters().physicsCurvatureCoefficients); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("strainIsRelativeToReference") == 0) { cObjectANCFThinPlate->GetParameters().strainIsRelativeToReference = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { cObjectANCFThinPlate->GetParameters().nodeNumbers = py::cast<NodeIndex4>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("useReducedOrderIntegration") == 0) { cObjectANCFThinPlate->GetParameters().useReducedOrderIntegration = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectANCFThinPlate->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectANCFThinPlate->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectANCFThinPlate::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
