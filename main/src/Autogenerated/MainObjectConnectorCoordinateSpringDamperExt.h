/** ***********************************************************************************************
* @class        MainObjectConnectorCoordinateSpringDamperExtParameters
* @brief        Parameter class for MainObjectConnectorCoordinateSpringDamperExt
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2024-02-03  15:37:35 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTCONNECTORCOORDINATESPRINGDAMPEREXTPARAMETERS__H
#define MAINOBJECTCONNECTORCOORDINATESPRINGDAMPEREXTPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include <pybind11/functional.h> //! AUTO: for function handling ... otherwise gives a python error (no compilation error in C++ !)
#include "Autogenerated/CObjectConnectorCoordinateSpringDamperExt.h"

#include "Autogenerated/VisuObjectConnectorCoordinateSpringDamperExt.h"

//! AUTO: Parameters for class MainObjectConnectorCoordinateSpringDamperExtParameters
class MainObjectConnectorCoordinateSpringDamperExtParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectConnectorCoordinateSpringDamperExt
* @brief        A 1D (scalar) spring-damper element acting on single \hac{ODE2} coordinates; same as ObjectConnectorCoordinateSpringDamper but with extended features, such as limit stop and improved friction; has different user function interface and additional data node as compared to ObjectConnectorCoordinateSpringDamper, but otherwise behaves very similar. The CoordinateSpringDamperExt is very useful for a single axis of a robot or similar machine modelled with a KinematicTree, as it can add friction and limits based on physical properties. It is highly recommended, to use the bristle model for friction with frictionProportionalZone=0 in case of implicit integrators (GeneralizedAlpha) as it converges better.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectConnectorCoordinateSpringDamperExt
class MainObjectConnectorCoordinateSpringDamperExt: public MainObjectConnector // AUTO: 
{
protected: // AUTO: 
    CObjectConnectorCoordinateSpringDamperExt* cObjectConnectorCoordinateSpringDamperExt; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectConnectorCoordinateSpringDamperExt* visualizationObjectConnectorCoordinateSpringDamperExt; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectConnectorCoordinateSpringDamperExt()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectConnectorCoordinateSpringDamperExt* GetCObjectConnectorCoordinateSpringDamperExt() { return cObjectConnectorCoordinateSpringDamperExt; }
    //! AUTO: Get const pointer to computational class
    const CObjectConnectorCoordinateSpringDamperExt* GetCObjectConnectorCoordinateSpringDamperExt() const { return cObjectConnectorCoordinateSpringDamperExt; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectConnectorCoordinateSpringDamperExt(CObjectConnectorCoordinateSpringDamperExt* pCObjectConnectorCoordinateSpringDamperExt) { cObjectConnectorCoordinateSpringDamperExt = pCObjectConnectorCoordinateSpringDamperExt; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectConnectorCoordinateSpringDamperExt* GetVisualizationObjectConnectorCoordinateSpringDamperExt() { return visualizationObjectConnectorCoordinateSpringDamperExt; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectConnectorCoordinateSpringDamperExt* GetVisualizationObjectConnectorCoordinateSpringDamperExt() const { return visualizationObjectConnectorCoordinateSpringDamperExt; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectConnectorCoordinateSpringDamperExt(VisualizationObjectConnectorCoordinateSpringDamperExt* pVisualizationObjectConnectorCoordinateSpringDamperExt) { visualizationObjectConnectorCoordinateSpringDamperExt = pVisualizationObjectConnectorCoordinateSpringDamperExt; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectConnectorCoordinateSpringDamperExt; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectConnectorCoordinateSpringDamperExt = (CObjectConnectorCoordinateSpringDamperExt*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectConnectorCoordinateSpringDamperExt; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectConnectorCoordinateSpringDamperExt = (VisualizationObjectConnectorCoordinateSpringDamperExt*)pVisualizationObject; }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return Node::GenericData;
    }

    //! AUTO:  Get type name of node (without keyword 'Object'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "ConnectorCoordinateSpringDamperExt";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectConnectorCoordinateSpringDamperExt->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(d["markerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorCoordinateSpringDamperExt->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(d["nodeNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorCoordinateSpringDamperExt->GetParameters().stiffness = py::cast<Real>(d["stiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "damping")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().damping = py::cast<Real>(d["damping"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "offset")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().offset = py::cast<Real>(d["offset"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "velocityOffset")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().velocityOffset = py::cast<Real>(d["velocityOffset"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "factor0")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().factor0 = py::cast<Real>(d["factor0"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "factor1")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().factor1 = py::cast<Real>(d["factor1"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "fDynamicFriction")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().fDynamicFriction = py::cast<Real>(d["fDynamicFriction"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "fStaticFrictionOffset")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().fStaticFrictionOffset = py::cast<Real>(d["fStaticFrictionOffset"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "stickingStiffness")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().stickingStiffness = py::cast<Real>(d["stickingStiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "stickingDamping")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().stickingDamping = py::cast<Real>(d["stickingDamping"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "exponentialDecayStatic")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().exponentialDecayStatic = py::cast<Real>(d["exponentialDecayStatic"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "fViscousFriction")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().fViscousFriction = py::cast<Real>(d["fViscousFriction"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "frictionProportionalZone")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().frictionProportionalZone = py::cast<Real>(d["frictionProportionalZone"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "limitStopsUpper")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsUpper = py::cast<Real>(d["limitStopsUpper"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "limitStopsLower")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsLower = py::cast<Real>(d["limitStopsLower"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "limitStopsStiffness")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsStiffness = py::cast<Real>(d["limitStopsStiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "limitStopsDamping")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsDamping = py::cast<Real>(d["limitStopsDamping"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "useLimitStops")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().useLimitStops = py::cast<bool>(d["useLimitStops"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "activeConnector")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().activeConnector = py::cast<bool>(d["activeConnector"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "springForceUserFunction")) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().springForceUserFunction = d["springForceUserFunction"]; /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectConnectorCoordinateSpringDamperExt->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VdrawSize")) { visualizationObjectConnectorCoordinateSpringDamperExt->GetDrawSize() = py::cast<float>(d["VdrawSize"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectConnectorCoordinateSpringDamperExt->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["markerNumbers"] = EPyUtils::GetArrayMarkerIndex(cObjectConnectorCoordinateSpringDamperExt->GetParameters().markerNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumber"] = (NodeIndex)cObjectConnectorCoordinateSpringDamperExt->GetParameters().nodeNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["stiffness"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().stiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["damping"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().damping; //! AUTO: cast variables into python (not needed for standard types) 
        d["offset"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().offset; //! AUTO: cast variables into python (not needed for standard types) 
        d["velocityOffset"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().velocityOffset; //! AUTO: cast variables into python (not needed for standard types) 
        d["factor0"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().factor0; //! AUTO: cast variables into python (not needed for standard types) 
        d["factor1"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().factor1; //! AUTO: cast variables into python (not needed for standard types) 
        d["fDynamicFriction"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().fDynamicFriction; //! AUTO: cast variables into python (not needed for standard types) 
        d["fStaticFrictionOffset"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().fStaticFrictionOffset; //! AUTO: cast variables into python (not needed for standard types) 
        d["stickingStiffness"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().stickingStiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["stickingDamping"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().stickingDamping; //! AUTO: cast variables into python (not needed for standard types) 
        d["exponentialDecayStatic"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().exponentialDecayStatic; //! AUTO: cast variables into python (not needed for standard types) 
        d["fViscousFriction"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().fViscousFriction; //! AUTO: cast variables into python (not needed for standard types) 
        d["frictionProportionalZone"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().frictionProportionalZone; //! AUTO: cast variables into python (not needed for standard types) 
        d["limitStopsUpper"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsUpper; //! AUTO: cast variables into python (not needed for standard types) 
        d["limitStopsLower"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsLower; //! AUTO: cast variables into python (not needed for standard types) 
        d["limitStopsStiffness"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsStiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["limitStopsDamping"] = (Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsDamping; //! AUTO: cast variables into python (not needed for standard types) 
        d["useLimitStops"] = (bool)cObjectConnectorCoordinateSpringDamperExt->GetParameters().useLimitStops; //! AUTO: cast variables into python (not needed for standard types) 
        d["activeConnector"] = (bool)cObjectConnectorCoordinateSpringDamperExt->GetParameters().activeConnector; //! AUTO: cast variables into python (not needed for standard types) 
        d["springForceUserFunction"] = (py::object)cObjectConnectorCoordinateSpringDamperExt->GetParameters().springForceUserFunction; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectConnectorCoordinateSpringDamperExt->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VdrawSize"] = (float)visualizationObjectConnectorCoordinateSpringDamperExt->GetDrawSize(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectConnectorCoordinateSpringDamperExt->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { return py::cast(EPyUtils::GetArrayMarkerIndex(cObjectConnectorCoordinateSpringDamperExt->GetParameters().markerNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { return py::cast((NodeIndex)cObjectConnectorCoordinateSpringDamperExt->GetParameters().nodeNumber);} //! AUTO: get parameter
        else if (parameterName.compare("stiffness") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().stiffness);} //! AUTO: get parameter
        else if (parameterName.compare("damping") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().damping);} //! AUTO: get parameter
        else if (parameterName.compare("offset") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().offset);} //! AUTO: get parameter
        else if (parameterName.compare("velocityOffset") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().velocityOffset);} //! AUTO: get parameter
        else if (parameterName.compare("factor0") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().factor0);} //! AUTO: get parameter
        else if (parameterName.compare("factor1") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().factor1);} //! AUTO: get parameter
        else if (parameterName.compare("fDynamicFriction") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().fDynamicFriction);} //! AUTO: get parameter
        else if (parameterName.compare("fStaticFrictionOffset") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().fStaticFrictionOffset);} //! AUTO: get parameter
        else if (parameterName.compare("stickingStiffness") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().stickingStiffness);} //! AUTO: get parameter
        else if (parameterName.compare("stickingDamping") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().stickingDamping);} //! AUTO: get parameter
        else if (parameterName.compare("exponentialDecayStatic") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().exponentialDecayStatic);} //! AUTO: get parameter
        else if (parameterName.compare("fViscousFriction") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().fViscousFriction);} //! AUTO: get parameter
        else if (parameterName.compare("frictionProportionalZone") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().frictionProportionalZone);} //! AUTO: get parameter
        else if (parameterName.compare("limitStopsUpper") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsUpper);} //! AUTO: get parameter
        else if (parameterName.compare("limitStopsLower") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsLower);} //! AUTO: get parameter
        else if (parameterName.compare("limitStopsStiffness") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsStiffness);} //! AUTO: get parameter
        else if (parameterName.compare("limitStopsDamping") == 0) { return py::cast((Real)cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsDamping);} //! AUTO: get parameter
        else if (parameterName.compare("useLimitStops") == 0) { return py::cast((bool)cObjectConnectorCoordinateSpringDamperExt->GetParameters().useLimitStops);} //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { return py::cast((bool)cObjectConnectorCoordinateSpringDamperExt->GetParameters().activeConnector);} //! AUTO: get parameter
        else if (parameterName.compare("springForceUserFunction") == 0) { return cObjectConnectorCoordinateSpringDamperExt->GetParameters().springForceUserFunction.GetPythonDictionary();;} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectConnectorCoordinateSpringDamperExt->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("VdrawSize") == 0) { return py::cast((float)visualizationObjectConnectorCoordinateSpringDamperExt->GetDrawSize());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectConnectorCoordinateSpringDamperExt->GetColor());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectConnectorCoordinateSpringDamperExt::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("stiffness") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().stiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("damping") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().damping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("offset") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().offset = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("velocityOffset") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().velocityOffset = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("factor0") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().factor0 = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("factor1") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().factor1 = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("fDynamicFriction") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().fDynamicFriction = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("fStaticFrictionOffset") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().fStaticFrictionOffset = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("stickingStiffness") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().stickingStiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("stickingDamping") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().stickingDamping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("exponentialDecayStatic") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().exponentialDecayStatic = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("fViscousFriction") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().fViscousFriction = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("frictionProportionalZone") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().frictionProportionalZone = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("limitStopsUpper") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsUpper = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("limitStopsLower") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsLower = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("limitStopsStiffness") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsStiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("limitStopsDamping") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().limitStopsDamping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("useLimitStops") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().useLimitStops = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().activeConnector = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("springForceUserFunction") == 0) { cObjectConnectorCoordinateSpringDamperExt->GetParameters().springForceUserFunction = value; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectConnectorCoordinateSpringDamperExt->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VdrawSize") == 0) { visualizationObjectConnectorCoordinateSpringDamperExt->GetDrawSize() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectConnectorCoordinateSpringDamperExt->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectConnectorCoordinateSpringDamperExt::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
