/** ***********************************************************************************************
* @class        MainMarkerKinematicTreeRigidParameters
* @brief        Parameter class for MainMarkerKinematicTreeRigid
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-06-05  15:30:50 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINMARKERKINEMATICTREERIGIDPARAMETERS__H
#define MAINMARKERKINEMATICTREERIGIDPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CMarkerKinematicTreeRigid.h"

#include "Autogenerated/VisuMarkerKinematicTreeRigid.h"

//! AUTO: Parameters for class MainMarkerKinematicTreeRigidParameters
class MainMarkerKinematicTreeRigidParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainMarkerKinematicTreeRigid
* @brief        A position and orientation (rigid-body) marker attached to a kinematic tree. The marker is attached to the ObjectKinematicTree object and additionally needs a link number as well as a local position, similar to the SensorKinematicTree. The marker allows to attach loads (LoadForceVector and LoadTorqueVector) at arbitrary links or position. It also allows to attach connectors (e.g., spring dampers or actuators) to the kinematic tree. Finally, joint constraints can be attached, which allows for realization of closed loop structures. NOTE, however, that it is less efficient to attach many markers to a kinematic tree, therefor for forces or joint control use the structures available in kinematic tree whenever possible.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainMarkerKinematicTreeRigid
class MainMarkerKinematicTreeRigid: public MainMarker // AUTO: 
{
protected: // AUTO: 
    CMarkerKinematicTreeRigid* cMarkerKinematicTreeRigid; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationMarkerKinematicTreeRigid* visualizationMarkerKinematicTreeRigid; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainMarkerKinematicTreeRigid()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CMarkerKinematicTreeRigid* GetCMarkerKinematicTreeRigid() { return cMarkerKinematicTreeRigid; }
    //! AUTO: Get const pointer to computational class
    const CMarkerKinematicTreeRigid* GetCMarkerKinematicTreeRigid() const { return cMarkerKinematicTreeRigid; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCMarkerKinematicTreeRigid(CMarkerKinematicTreeRigid* pCMarkerKinematicTreeRigid) { cMarkerKinematicTreeRigid = pCMarkerKinematicTreeRigid; }

    //! AUTO: Get pointer to visualization class
    VisualizationMarkerKinematicTreeRigid* GetVisualizationMarkerKinematicTreeRigid() { return visualizationMarkerKinematicTreeRigid; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationMarkerKinematicTreeRigid* GetVisualizationMarkerKinematicTreeRigid() const { return visualizationMarkerKinematicTreeRigid; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationMarkerKinematicTreeRigid(VisualizationMarkerKinematicTreeRigid* pVisualizationMarkerKinematicTreeRigid) { visualizationMarkerKinematicTreeRigid = pVisualizationMarkerKinematicTreeRigid; }

    //! AUTO: Get const pointer to computational base class object
    virtual CMarker* GetCMarker() const { return cMarkerKinematicTreeRigid; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCMarker(CMarker* pCMarker) { cMarkerKinematicTreeRigid = (CMarkerKinematicTreeRigid*)pCMarker; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationMarker* GetVisualizationMarker() const { return visualizationMarkerKinematicTreeRigid; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationMarker(VisualizationMarker* pVisualizationMarker) { visualizationMarkerKinematicTreeRigid = (VisualizationMarkerKinematicTreeRigid*)pVisualizationMarker; }

    //! AUTO:  Get type name of marker (without keyword 'Marker'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "KinematicTreeRigid";
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cMarkerKinematicTreeRigid->GetParameters().objectNumber = EPyUtils::GetObjectIndexSafely(d["objectNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cMarkerKinematicTreeRigid->GetParameters().linkNumber = py::cast<Index>(d["linkNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(d, "localPosition", cMarkerKinematicTreeRigid->GetParameters().localPosition); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationMarkerKinematicTreeRigid->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["markerType"] = (std::string)GetTypeName();
        d["objectNumber"] = (ObjectIndex)cMarkerKinematicTreeRigid->GetParameters().objectNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["linkNumber"] = (Index)cMarkerKinematicTreeRigid->GetParameters().linkNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["localPosition"] = (std::vector<Real>)cMarkerKinematicTreeRigid->GetParameters().localPosition; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationMarkerKinematicTreeRigid->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("objectNumber") == 0) { return py::cast((ObjectIndex)cMarkerKinematicTreeRigid->GetParameters().objectNumber);} //! AUTO: get parameter
        else if (parameterName.compare("linkNumber") == 0) { return py::cast((Index)cMarkerKinematicTreeRigid->GetParameters().linkNumber);} //! AUTO: get parameter
        else if (parameterName.compare("localPosition") == 0) { return py::cast((std::vector<Real>)cMarkerKinematicTreeRigid->GetParameters().localPosition);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationMarkerKinematicTreeRigid->GetShow());} //! AUTO: get parameter
        else  {PyError(STDstring("MarkerKinematicTreeRigid::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("objectNumber") == 0) { cMarkerKinematicTreeRigid->GetParameters().objectNumber = EPyUtils::GetObjectIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("linkNumber") == 0) { cMarkerKinematicTreeRigid->GetParameters().linkNumber = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("localPosition") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(value, cMarkerKinematicTreeRigid->GetParameters().localPosition); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationMarkerKinematicTreeRigid->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("MarkerKinematicTreeRigid::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
    }

};



#endif //#ifdef include once...
