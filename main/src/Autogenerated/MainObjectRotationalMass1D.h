/** ***********************************************************************************************
* @class        MainObjectRotationalMass1DParameters
* @brief        Parameter class for MainObjectRotationalMass1D
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-07-21  20:27:17 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTROTATIONALMASS1DPARAMETERS__H
#define MAINOBJECTROTATIONALMASS1DPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectRotationalMass1D.h"

#include "Autogenerated/VisuObjectRotationalMass1D.h"

//! AUTO: Parameters for class MainObjectRotationalMass1DParameters
class MainObjectRotationalMass1DParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectRotationalMass1D
* @brief        A 1D rotational inertia (mass) which is attached to Node1D.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectRotationalMass1D
class MainObjectRotationalMass1D: public MainObjectBody // AUTO: 
{
protected: // AUTO: 
    CObjectRotationalMass1D* cObjectRotationalMass1D; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectRotationalMass1D* visualizationObjectRotationalMass1D; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectRotationalMass1D()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectRotationalMass1D* GetCObjectRotationalMass1D() { return cObjectRotationalMass1D; }
    //! AUTO: Get const pointer to computational class
    const CObjectRotationalMass1D* GetCObjectRotationalMass1D() const { return cObjectRotationalMass1D; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectRotationalMass1D(CObjectRotationalMass1D* pCObjectRotationalMass1D) { cObjectRotationalMass1D = pCObjectRotationalMass1D; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectRotationalMass1D* GetVisualizationObjectRotationalMass1D() { return visualizationObjectRotationalMass1D; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectRotationalMass1D* GetVisualizationObjectRotationalMass1D() const { return visualizationObjectRotationalMass1D; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectRotationalMass1D(VisualizationObjectRotationalMass1D* pVisualizationObjectRotationalMass1D) { visualizationObjectRotationalMass1D = pVisualizationObjectRotationalMass1D; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectRotationalMass1D; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectRotationalMass1D = (CObjectRotationalMass1D*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectRotationalMass1D; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectRotationalMass1D = (VisualizationObjectRotationalMass1D*)pVisualizationObject; }

    //! AUTO:  Get type name of object; could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "RotationalMass1D";
    }

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return Node::GenericODE2;
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectRotationalMass1D->GetParameters().physicsInertia = py::cast<Real>(d["physicsInertia"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectRotationalMass1D->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(d["nodeNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "referencePosition")) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(d, "referencePosition", cObjectRotationalMass1D->GetParameters().referencePosition); /*! AUTO:  safely cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "referenceRotation")) { EPyUtils::SetConstMatrixTemplateSafely<3,3>(d, "referenceRotation", cObjectRotationalMass1D->GetParameters().referenceRotation); /*! AUTO:  safely cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectRotationalMass1D->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VgraphicsData")) { PyWriteBodyGraphicsDataList(d, "VgraphicsData", visualizationObjectRotationalMass1D->GetGraphicsData()); /*! AUTO: convert dict to BodyGraphicsData*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["physicsInertia"] = (Real)cObjectRotationalMass1D->GetParameters().physicsInertia; //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumber"] = (NodeIndex)cObjectRotationalMass1D->GetParameters().nodeNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["referencePosition"] = EPyUtils::SlimVector2NumPy(cObjectRotationalMass1D->GetParameters().referencePosition); //! AUTO: cast variables into python (not needed for standard types) 
        d["referenceRotation"] = EPyUtils::Matrix2NumPyTemplate(cObjectRotationalMass1D->GetParameters().referenceRotation); //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectRotationalMass1D->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VgraphicsData"] = PyGetBodyGraphicsDataList(visualizationObjectRotationalMass1D->GetGraphicsData(), addGraphicsData); //! AUTO: generate dictionary with special function
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("physicsInertia") == 0) { return py::cast((Real)cObjectRotationalMass1D->GetParameters().physicsInertia);} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { return py::cast((NodeIndex)cObjectRotationalMass1D->GetParameters().nodeNumber);} //! AUTO: get parameter
        else if (parameterName.compare("referencePosition") == 0) { return EPyUtils::SlimVector2NumPy(cObjectRotationalMass1D->GetParameters().referencePosition);} //! AUTO: get parameter
        else if (parameterName.compare("referenceRotation") == 0) { return EPyUtils::Matrix2NumPyTemplate(cObjectRotationalMass1D->GetParameters().referenceRotation);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectRotationalMass1D->GetShow());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectRotationalMass1D::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsInertia") == 0) { cObjectRotationalMass1D->GetParameters().physicsInertia = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { cObjectRotationalMass1D->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("referencePosition") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(value, cObjectRotationalMass1D->GetParameters().referencePosition); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("referenceRotation") == 0) { EPyUtils::SetConstMatrixTemplateSafely<3,3>(value, cObjectRotationalMass1D->GetParameters().referenceRotation); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectRotationalMass1D->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectRotationalMass1D::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
