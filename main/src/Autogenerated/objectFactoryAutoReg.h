/** **************************************
* @brief        autogenerated registration variables for items
* @author       Gerstmayr Johannes
* @date         2024-02-21 (first created)
****************************************** */
//AUTO: do not modify


bool MainNodePointIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("Point", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodePoint* cItem = new CNodePoint();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodePoint(); //new main item
		item->SetCNode(cItem);
		VisualizationNodePoint* vItem = new VisualizationNodePoint();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainObjectGroundIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("Ground", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectGround();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectGround(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectGround* vObject = new VisualizationObjectGround();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectMassPointIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("MassPoint", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectMassPoint();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectMassPoint(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectMassPoint* vObject = new VisualizationObjectMassPoint();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectANCFCable2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ANCFCable2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectANCFCable2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectANCFCable2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectANCFCable2D* vObject = new VisualizationObjectANCFCable2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorSpringDamperIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorSpringDamper", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorSpringDamper();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorSpringDamper(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorSpringDamper* vObject = new VisualizationObjectConnectorSpringDamper();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainMarkerBodyPositionIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("BodyPosition", []
	{ //AUTO: 
		CMarkerBodyPosition* cItem = new CMarkerBodyPosition();							//new point Marker
		MainMarker* item = new MainMarkerBodyPosition(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerBodyPosition* vItem = new VisualizationMarkerBodyPosition();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainLoadForceVectorIsRegistered = ClassFactoryItem<MainLoad>::Get().RegisterClass("ForceVector", []
	{ //AUTO: 
		CLoadForceVector* cItem = new CLoadForceVector();							//new point Load
		MainLoad* item = new MainLoadForceVector(); //new main item
		item->SetCLoad(cItem);
		VisualizationLoadForceVector* vItem = new VisualizationLoadForceVector();
		item->SetVisualizationLoad(vItem);
		return item;
	});

bool MainSensorNodeIsRegistered = ClassFactoryItem<MainSensor>::Get().RegisterClass("Node", []
	{ //AUTO: 
		CSensorNode* cItem = new CSensorNode();							//new point Sensor
		MainSensor* item = new MainSensorNode(); //new main item
		item->SetCSensor(cItem);
		VisualizationSensorNode* vItem = new VisualizationSensorNode();
		item->SetVisualizationSensor(vItem);
		return item;
	});

#ifndef EXUDYN_MINIMAL_COMPILATION

bool MainNodePoint2DIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("Point2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodePoint2D* cItem = new CNodePoint2D();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodePoint2D(); //new main item
		item->SetCNode(cItem);
		VisualizationNodePoint2D* vItem = new VisualizationNodePoint2D();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodeRigidBodyEPIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("RigidBodyEP", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodeRigidBodyEP* cItem = new CNodeRigidBodyEP();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodeRigidBodyEP(); //new main item
		item->SetCNode(cItem);
		VisualizationNodeRigidBodyEP* vItem = new VisualizationNodeRigidBodyEP();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodeRigidBodyRxyzIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("RigidBodyRxyz", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodeRigidBodyRxyz* cItem = new CNodeRigidBodyRxyz();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodeRigidBodyRxyz(); //new main item
		item->SetCNode(cItem);
		VisualizationNodeRigidBodyRxyz* vItem = new VisualizationNodeRigidBodyRxyz();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodeRigidBodyRotVecLGIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("RigidBodyRotVecLG", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodeRigidBodyRotVecLG* cItem = new CNodeRigidBodyRotVecLG();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodeRigidBodyRotVecLG(); //new main item
		item->SetCNode(cItem);
		VisualizationNodeRigidBodyRotVecLG* vItem = new VisualizationNodeRigidBodyRotVecLG();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodeRigidBody2DIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("RigidBody2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodeRigidBody2D* cItem = new CNodeRigidBody2D();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodeRigidBody2D(); //new main item
		item->SetCNode(cItem);
		VisualizationNodeRigidBody2D* vItem = new VisualizationNodeRigidBody2D();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNode1DIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("1D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNode1D* cItem = new CNode1D();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNode1D(); //new main item
		item->SetCNode(cItem);
		VisualizationNode1D* vItem = new VisualizationNode1D();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodePoint2DSlope1IsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("Point2DSlope1", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodePoint2DSlope1* cItem = new CNodePoint2DSlope1();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodePoint2DSlope1(); //new main item
		item->SetCNode(cItem);
		VisualizationNodePoint2DSlope1* vItem = new VisualizationNodePoint2DSlope1();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodePointSlope1IsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("PointSlope1", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodePointSlope1* cItem = new CNodePointSlope1();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodePointSlope1(); //new main item
		item->SetCNode(cItem);
		VisualizationNodePointSlope1* vItem = new VisualizationNodePointSlope1();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodePointSlope12IsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("PointSlope12", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodePointSlope12* cItem = new CNodePointSlope12();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodePointSlope12(); //new main item
		item->SetCNode(cItem);
		VisualizationNodePointSlope12* vItem = new VisualizationNodePointSlope12();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodePointSlope23IsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("PointSlope23", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodePointSlope23* cItem = new CNodePointSlope23();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodePointSlope23(); //new main item
		item->SetCNode(cItem);
		VisualizationNodePointSlope23* vItem = new VisualizationNodePointSlope23();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodeGenericODE2IsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("GenericODE2", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodeGenericODE2* cItem = new CNodeGenericODE2();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodeGenericODE2(); //new main item
		item->SetCNode(cItem);
		VisualizationNodeGenericODE2* vItem = new VisualizationNodeGenericODE2();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodeGenericODE1IsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("GenericODE1", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodeGenericODE1* cItem = new CNodeGenericODE1();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodeGenericODE1(); //new main item
		item->SetCNode(cItem);
		VisualizationNodeGenericODE1* vItem = new VisualizationNodeGenericODE1();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodeGenericAEIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("GenericAE", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodeGenericAE* cItem = new CNodeGenericAE();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodeGenericAE(); //new main item
		item->SetCNode(cItem);
		VisualizationNodeGenericAE* vItem = new VisualizationNodeGenericAE();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodeGenericDataIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("GenericData", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodeGenericData* cItem = new CNodeGenericData();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodeGenericData(); //new main item
		item->SetCNode(cItem);
		VisualizationNodeGenericData* vItem = new VisualizationNodeGenericData();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainNodePointGroundIsRegistered = ClassFactoryItemsSystemData<MainNode>::Get().RegisterClass("PointGround", [](CSystemData* cSystemData)
	{ //AUTO: 
		CNodePointGround* cItem = new CNodePointGround();							//new point Node
		cItem->GetCData() = &(cSystemData->GetCData()); //add CData reference to CNode
		MainNode* item = new MainNodePointGround(); //new main item
		item->SetCNode(cItem);
		VisualizationNodePointGround* vItem = new VisualizationNodePointGround();
		item->SetVisualizationNode(vItem);
		return item;
	});

bool MainObjectMassPoint2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("MassPoint2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectMassPoint2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectMassPoint2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectMassPoint2D* vObject = new VisualizationObjectMassPoint2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectMass1DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("Mass1D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectMass1D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectMass1D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectMass1D* vObject = new VisualizationObjectMass1D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectRotationalMass1DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("RotationalMass1D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectRotationalMass1D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectRotationalMass1D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectRotationalMass1D* vObject = new VisualizationObjectRotationalMass1D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectRigidBodyIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("RigidBody", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectRigidBody();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectRigidBody(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectRigidBody* vObject = new VisualizationObjectRigidBody();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectRigidBody2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("RigidBody2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectRigidBody2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectRigidBody2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectRigidBody2D* vObject = new VisualizationObjectRigidBody2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectGenericODE2IsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("GenericODE2", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectGenericODE2();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectGenericODE2(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectGenericODE2* vObject = new VisualizationObjectGenericODE2();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectGenericODE1IsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("GenericODE1", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectGenericODE1();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectGenericODE1(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectGenericODE1* vObject = new VisualizationObjectGenericODE1();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectKinematicTreeIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("KinematicTree", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectKinematicTree();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectKinematicTree(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectKinematicTree* vObject = new VisualizationObjectKinematicTree();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectFFRFIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("FFRF", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectFFRF();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectFFRF(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectFFRF* vObject = new VisualizationObjectFFRF();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectFFRFreducedOrderIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("FFRFreducedOrder", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectFFRFreducedOrder();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectFFRFreducedOrder(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectFFRFreducedOrder* vObject = new VisualizationObjectFFRFreducedOrder();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectANCFCableIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ANCFCable", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectANCFCable();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectANCFCable(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectANCFCable* vObject = new VisualizationObjectANCFCable();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectALEANCFCable2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ALEANCFCable2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectALEANCFCable2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectALEANCFCable2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectALEANCFCable2D* vObject = new VisualizationObjectALEANCFCable2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectANCFBeamIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ANCFBeam", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectANCFBeam();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectANCFBeam(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectANCFBeam* vObject = new VisualizationObjectANCFBeam();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectBeamGeometricallyExact2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("BeamGeometricallyExact2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectBeamGeometricallyExact2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectBeamGeometricallyExact2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectBeamGeometricallyExact2D* vObject = new VisualizationObjectBeamGeometricallyExact2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectBeamGeometricallyExactIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("BeamGeometricallyExact", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectBeamGeometricallyExact();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectBeamGeometricallyExact(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectBeamGeometricallyExact* vObject = new VisualizationObjectBeamGeometricallyExact();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorCartesianSpringDamperIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorCartesianSpringDamper", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorCartesianSpringDamper();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorCartesianSpringDamper(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorCartesianSpringDamper* vObject = new VisualizationObjectConnectorCartesianSpringDamper();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorRigidBodySpringDamperIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorRigidBodySpringDamper", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorRigidBodySpringDamper();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorRigidBodySpringDamper(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorRigidBodySpringDamper* vObject = new VisualizationObjectConnectorRigidBodySpringDamper();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorLinearSpringDamperIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorLinearSpringDamper", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorLinearSpringDamper();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorLinearSpringDamper(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorLinearSpringDamper* vObject = new VisualizationObjectConnectorLinearSpringDamper();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorTorsionalSpringDamperIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorTorsionalSpringDamper", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorTorsionalSpringDamper();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorTorsionalSpringDamper(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorTorsionalSpringDamper* vObject = new VisualizationObjectConnectorTorsionalSpringDamper();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorCoordinateSpringDamperIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorCoordinateSpringDamper", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorCoordinateSpringDamper();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorCoordinateSpringDamper(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorCoordinateSpringDamper* vObject = new VisualizationObjectConnectorCoordinateSpringDamper();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorCoordinateSpringDamperExtIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorCoordinateSpringDamperExt", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorCoordinateSpringDamperExt();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorCoordinateSpringDamperExt(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorCoordinateSpringDamperExt* vObject = new VisualizationObjectConnectorCoordinateSpringDamperExt();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorGravityIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorGravity", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorGravity();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorGravity(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorGravity* vObject = new VisualizationObjectConnectorGravity();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorHydraulicActuatorSimpleIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorHydraulicActuatorSimple", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorHydraulicActuatorSimple();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorHydraulicActuatorSimple(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorHydraulicActuatorSimple* vObject = new VisualizationObjectConnectorHydraulicActuatorSimple();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorReevingSystemSpringsIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorReevingSystemSprings", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorReevingSystemSprings();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorReevingSystemSprings(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorReevingSystemSprings* vObject = new VisualizationObjectConnectorReevingSystemSprings();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorDistanceIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorDistance", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorDistance();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorDistance(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorDistance* vObject = new VisualizationObjectConnectorDistance();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorCoordinateIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorCoordinate", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorCoordinate();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorCoordinate(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorCoordinate* vObject = new VisualizationObjectConnectorCoordinate();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorCoordinateVectorIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorCoordinateVector", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorCoordinateVector();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorCoordinateVector(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorCoordinateVector* vObject = new VisualizationObjectConnectorCoordinateVector();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectConnectorRollingDiscPenaltyIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ConnectorRollingDiscPenalty", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectConnectorRollingDiscPenalty();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectConnectorRollingDiscPenalty(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectConnectorRollingDiscPenalty* vObject = new VisualizationObjectConnectorRollingDiscPenalty();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectContactConvexRollIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ContactConvexRoll", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectContactConvexRoll();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectContactConvexRoll(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectContactConvexRoll* vObject = new VisualizationObjectContactConvexRoll();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectContactCoordinateIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ContactCoordinate", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectContactCoordinate();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectContactCoordinate(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectContactCoordinate* vObject = new VisualizationObjectContactCoordinate();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectContactCircleCable2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ContactCircleCable2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectContactCircleCable2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectContactCircleCable2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectContactCircleCable2D* vObject = new VisualizationObjectContactCircleCable2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectContactFrictionCircleCable2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ContactFrictionCircleCable2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectContactFrictionCircleCable2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectContactFrictionCircleCable2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectContactFrictionCircleCable2D* vObject = new VisualizationObjectContactFrictionCircleCable2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectContactSphereSphereIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ContactSphereSphere", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectContactSphereSphere();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectContactSphereSphere(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectContactSphereSphere* vObject = new VisualizationObjectContactSphereSphere();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectContactSphereTorusIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ContactSphereTorus", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectContactSphereTorus();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectContactSphereTorus(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectContactSphereTorus* vObject = new VisualizationObjectContactSphereTorus();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectContactSphereTriangleIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ContactSphereTriangle", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectContactSphereTriangle();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectContactSphereTriangle(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectContactSphereTriangle* vObject = new VisualizationObjectContactSphereTriangle();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectContactCurveCirclesIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("ContactCurveCircles", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectContactCurveCircles();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectContactCurveCircles(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectContactCurveCircles* vObject = new VisualizationObjectContactCurveCircles();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointGenericIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointGeneric", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointGeneric();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointGeneric(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointGeneric* vObject = new VisualizationObjectJointGeneric();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointRevoluteZIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointRevoluteZ", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointRevoluteZ();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointRevoluteZ(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointRevoluteZ* vObject = new VisualizationObjectJointRevoluteZ();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointPrismaticXIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointPrismaticX", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointPrismaticX();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointPrismaticX(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointPrismaticX* vObject = new VisualizationObjectJointPrismaticX();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointSphericalIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointSpherical", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointSpherical();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointSpherical(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointSpherical* vObject = new VisualizationObjectJointSpherical();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointRollingDiscIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointRollingDisc", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointRollingDisc();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointRollingDisc(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointRollingDisc* vObject = new VisualizationObjectJointRollingDisc();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointRevolute2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointRevolute2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointRevolute2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointRevolute2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointRevolute2D* vObject = new VisualizationObjectJointRevolute2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointPrismatic2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointPrismatic2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointPrismatic2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointPrismatic2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointPrismatic2D* vObject = new VisualizationObjectJointPrismatic2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointSliding2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointSliding2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointSliding2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointSliding2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointSliding2D* vObject = new VisualizationObjectJointSliding2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainObjectJointALEMoving2DIsRegistered = ClassFactoryItemsSystemData<MainObject>::Get().RegisterClass("JointALEMoving2D", [](CSystemData* cSystemData)
	{ //AUTO: 
		CObject* cObject = new CObjectJointALEMoving2D();
		cObject->SetCSystemData(cSystemData);
		MainObject* object = new MainObjectJointALEMoving2D(); //new main object
		object->SetCObject(cObject);
		VisualizationObjectJointALEMoving2D* vObject = new VisualizationObjectJointALEMoving2D();
		object->SetVisualizationObject(vObject);
		return object;
	});

bool MainMarkerBodyMassIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("BodyMass", []
	{ //AUTO: 
		CMarkerBodyMass* cItem = new CMarkerBodyMass();							//new point Marker
		MainMarker* item = new MainMarkerBodyMass(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerBodyMass* vItem = new VisualizationMarkerBodyMass();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerBodyRigidIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("BodyRigid", []
	{ //AUTO: 
		CMarkerBodyRigid* cItem = new CMarkerBodyRigid();							//new point Marker
		MainMarker* item = new MainMarkerBodyRigid(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerBodyRigid* vItem = new VisualizationMarkerBodyRigid();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerNodePositionIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("NodePosition", []
	{ //AUTO: 
		CMarkerNodePosition* cItem = new CMarkerNodePosition();							//new point Marker
		MainMarker* item = new MainMarkerNodePosition(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerNodePosition* vItem = new VisualizationMarkerNodePosition();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerNodeRigidIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("NodeRigid", []
	{ //AUTO: 
		CMarkerNodeRigid* cItem = new CMarkerNodeRigid();							//new point Marker
		MainMarker* item = new MainMarkerNodeRigid(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerNodeRigid* vItem = new VisualizationMarkerNodeRigid();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerNodeCoordinateIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("NodeCoordinate", []
	{ //AUTO: 
		CMarkerNodeCoordinate* cItem = new CMarkerNodeCoordinate();							//new point Marker
		MainMarker* item = new MainMarkerNodeCoordinate(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerNodeCoordinate* vItem = new VisualizationMarkerNodeCoordinate();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerNodeCoordinatesIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("NodeCoordinates", []
	{ //AUTO: 
		CMarkerNodeCoordinates* cItem = new CMarkerNodeCoordinates();							//new point Marker
		MainMarker* item = new MainMarkerNodeCoordinates(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerNodeCoordinates* vItem = new VisualizationMarkerNodeCoordinates();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerNodeODE1CoordinateIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("NodeODE1Coordinate", []
	{ //AUTO: 
		CMarkerNodeODE1Coordinate* cItem = new CMarkerNodeODE1Coordinate();							//new point Marker
		MainMarker* item = new MainMarkerNodeODE1Coordinate(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerNodeODE1Coordinate* vItem = new VisualizationMarkerNodeODE1Coordinate();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerNodeRotationCoordinateIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("NodeRotationCoordinate", []
	{ //AUTO: 
		CMarkerNodeRotationCoordinate* cItem = new CMarkerNodeRotationCoordinate();							//new point Marker
		MainMarker* item = new MainMarkerNodeRotationCoordinate(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerNodeRotationCoordinate* vItem = new VisualizationMarkerNodeRotationCoordinate();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerBodiesRelativeTranslationCoordinateIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("BodiesRelativeTranslationCoordinate", []
	{ //AUTO: 
		CMarkerBodiesRelativeTranslationCoordinate* cItem = new CMarkerBodiesRelativeTranslationCoordinate();							//new point Marker
		MainMarker* item = new MainMarkerBodiesRelativeTranslationCoordinate(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerBodiesRelativeTranslationCoordinate* vItem = new VisualizationMarkerBodiesRelativeTranslationCoordinate();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerBodiesRelativeRotationCoordinateIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("BodiesRelativeRotationCoordinate", []
	{ //AUTO: 
		CMarkerBodiesRelativeRotationCoordinate* cItem = new CMarkerBodiesRelativeRotationCoordinate();							//new point Marker
		MainMarker* item = new MainMarkerBodiesRelativeRotationCoordinate(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerBodiesRelativeRotationCoordinate* vItem = new VisualizationMarkerBodiesRelativeRotationCoordinate();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerSuperElementPositionIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("SuperElementPosition", []
	{ //AUTO: 
		CMarkerSuperElementPosition* cItem = new CMarkerSuperElementPosition();							//new point Marker
		MainMarker* item = new MainMarkerSuperElementPosition(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerSuperElementPosition* vItem = new VisualizationMarkerSuperElementPosition();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerSuperElementRigidIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("SuperElementRigid", []
	{ //AUTO: 
		CMarkerSuperElementRigid* cItem = new CMarkerSuperElementRigid();							//new point Marker
		MainMarker* item = new MainMarkerSuperElementRigid(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerSuperElementRigid* vItem = new VisualizationMarkerSuperElementRigid();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerKinematicTreeRigidIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("KinematicTreeRigid", []
	{ //AUTO: 
		CMarkerKinematicTreeRigid* cItem = new CMarkerKinematicTreeRigid();							//new point Marker
		MainMarker* item = new MainMarkerKinematicTreeRigid(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerKinematicTreeRigid* vItem = new VisualizationMarkerKinematicTreeRigid();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerObjectODE2CoordinatesIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("ObjectODE2Coordinates", []
	{ //AUTO: 
		CMarkerObjectODE2Coordinates* cItem = new CMarkerObjectODE2Coordinates();							//new point Marker
		MainMarker* item = new MainMarkerObjectODE2Coordinates(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerObjectODE2Coordinates* vItem = new VisualizationMarkerObjectODE2Coordinates();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerBodyCable2DShapeIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("BodyCable2DShape", []
	{ //AUTO: 
		CMarkerBodyCable2DShape* cItem = new CMarkerBodyCable2DShape();							//new point Marker
		MainMarker* item = new MainMarkerBodyCable2DShape(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerBodyCable2DShape* vItem = new VisualizationMarkerBodyCable2DShape();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainMarkerBodyCable2DCoordinatesIsRegistered = ClassFactoryItem<MainMarker>::Get().RegisterClass("BodyCable2DCoordinates", []
	{ //AUTO: 
		CMarkerBodyCable2DCoordinates* cItem = new CMarkerBodyCable2DCoordinates();							//new point Marker
		MainMarker* item = new MainMarkerBodyCable2DCoordinates(); //new main item
		item->SetCMarker(cItem);
		VisualizationMarkerBodyCable2DCoordinates* vItem = new VisualizationMarkerBodyCable2DCoordinates();
		item->SetVisualizationMarker(vItem);
		return item;
	});

bool MainLoadTorqueVectorIsRegistered = ClassFactoryItem<MainLoad>::Get().RegisterClass("TorqueVector", []
	{ //AUTO: 
		CLoadTorqueVector* cItem = new CLoadTorqueVector();							//new point Load
		MainLoad* item = new MainLoadTorqueVector(); //new main item
		item->SetCLoad(cItem);
		VisualizationLoadTorqueVector* vItem = new VisualizationLoadTorqueVector();
		item->SetVisualizationLoad(vItem);
		return item;
	});

bool MainLoadMassProportionalIsRegistered = ClassFactoryItem<MainLoad>::Get().RegisterClass("MassProportional", []
	{ //AUTO: 
		CLoadMassProportional* cItem = new CLoadMassProportional();							//new point Load
		MainLoad* item = new MainLoadMassProportional(); //new main item
		item->SetCLoad(cItem);
		VisualizationLoadMassProportional* vItem = new VisualizationLoadMassProportional();
		item->SetVisualizationLoad(vItem);
		return item;
	});

bool MainLoadCoordinateIsRegistered = ClassFactoryItem<MainLoad>::Get().RegisterClass("Coordinate", []
	{ //AUTO: 
		CLoadCoordinate* cItem = new CLoadCoordinate();							//new point Load
		MainLoad* item = new MainLoadCoordinate(); //new main item
		item->SetCLoad(cItem);
		VisualizationLoadCoordinate* vItem = new VisualizationLoadCoordinate();
		item->SetVisualizationLoad(vItem);
		return item;
	});

bool MainSensorObjectIsRegistered = ClassFactoryItem<MainSensor>::Get().RegisterClass("Object", []
	{ //AUTO: 
		CSensorObject* cItem = new CSensorObject();							//new point Sensor
		MainSensor* item = new MainSensorObject(); //new main item
		item->SetCSensor(cItem);
		VisualizationSensorObject* vItem = new VisualizationSensorObject();
		item->SetVisualizationSensor(vItem);
		return item;
	});

bool MainSensorBodyIsRegistered = ClassFactoryItem<MainSensor>::Get().RegisterClass("Body", []
	{ //AUTO: 
		CSensorBody* cItem = new CSensorBody();							//new point Sensor
		MainSensor* item = new MainSensorBody(); //new main item
		item->SetCSensor(cItem);
		VisualizationSensorBody* vItem = new VisualizationSensorBody();
		item->SetVisualizationSensor(vItem);
		return item;
	});

bool MainSensorSuperElementIsRegistered = ClassFactoryItem<MainSensor>::Get().RegisterClass("SuperElement", []
	{ //AUTO: 
		CSensorSuperElement* cItem = new CSensorSuperElement();							//new point Sensor
		MainSensor* item = new MainSensorSuperElement(); //new main item
		item->SetCSensor(cItem);
		VisualizationSensorSuperElement* vItem = new VisualizationSensorSuperElement();
		item->SetVisualizationSensor(vItem);
		return item;
	});

bool MainSensorKinematicTreeIsRegistered = ClassFactoryItem<MainSensor>::Get().RegisterClass("KinematicTree", []
	{ //AUTO: 
		CSensorKinematicTree* cItem = new CSensorKinematicTree();							//new point Sensor
		MainSensor* item = new MainSensorKinematicTree(); //new main item
		item->SetCSensor(cItem);
		VisualizationSensorKinematicTree* vItem = new VisualizationSensorKinematicTree();
		item->SetVisualizationSensor(vItem);
		return item;
	});

bool MainSensorMarkerIsRegistered = ClassFactoryItem<MainSensor>::Get().RegisterClass("Marker", []
	{ //AUTO: 
		CSensorMarker* cItem = new CSensorMarker();							//new point Sensor
		MainSensor* item = new MainSensorMarker(); //new main item
		item->SetCSensor(cItem);
		VisualizationSensorMarker* vItem = new VisualizationSensorMarker();
		item->SetVisualizationSensor(vItem);
		return item;
	});

bool MainSensorLoadIsRegistered = ClassFactoryItem<MainSensor>::Get().RegisterClass("Load", []
	{ //AUTO: 
		CSensorLoad* cItem = new CSensorLoad();							//new point Sensor
		MainSensor* item = new MainSensorLoad(); //new main item
		item->SetCSensor(cItem);
		VisualizationSensorLoad* vItem = new VisualizationSensorLoad();
		item->SetVisualizationSensor(vItem);
		return item;
	});

bool MainSensorUserFunctionIsRegistered = ClassFactoryItem<MainSensor>::Get().RegisterClass("UserFunction", []
	{ //AUTO: 
		CSensorUserFunction* cItem = new CSensorUserFunction();							//new point Sensor
		MainSensor* item = new MainSensorUserFunction(); //new main item
		item->SetCSensor(cItem);
		VisualizationSensorUserFunction* vItem = new VisualizationSensorUserFunction();
		item->SetVisualizationSensor(vItem);
		return item;
	});

#endif //EXUDYN_MINIMAL_COMPILATION

