/** ***********************************************************************************************
* @class        MainObjectGenericODE1Parameters
* @brief        Parameter class for MainObjectGenericODE1
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2024-02-03  15:37:34 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTGENERICODE1PARAMETERS__H
#define MAINOBJECTGENERICODE1PARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include <pybind11/functional.h> //! AUTO: for function handling ... otherwise gives a python error (no compilation error in C++ !)
#include "Autogenerated/CObjectGenericODE1.h"

#include "Autogenerated/VisuObjectGenericODE1.h"

//! AUTO: Parameters for class MainObjectGenericODE1Parameters
class MainObjectGenericODE1Parameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectGenericODE1
* @brief        A system of \f$n\f$ \acf{ODE1}, having a system matrix, a rhs vector, but mostly it will use a user function to describe special \hac{ODE1} systems. It is based on NodeGenericODE1 nodes. NOTE that all matrices, vectors, etc. must have the same dimensions \f$n\f$ or \f$(n \times n)\f$, or they must be empty \f$(0 \times 0)\f$, using [] in Python.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectGenericODE1
class MainObjectGenericODE1: public MainObject // AUTO: 
{
protected: // AUTO: 
    CObjectGenericODE1* cObjectGenericODE1; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectGenericODE1* visualizationObjectGenericODE1; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectGenericODE1()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectGenericODE1* GetCObjectGenericODE1() { return cObjectGenericODE1; }
    //! AUTO: Get const pointer to computational class
    const CObjectGenericODE1* GetCObjectGenericODE1() const { return cObjectGenericODE1; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectGenericODE1(CObjectGenericODE1* pCObjectGenericODE1) { cObjectGenericODE1 = pCObjectGenericODE1; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectGenericODE1* GetVisualizationObjectGenericODE1() { return visualizationObjectGenericODE1; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectGenericODE1* GetVisualizationObjectGenericODE1() const { return visualizationObjectGenericODE1; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectGenericODE1(VisualizationObjectGenericODE1* pVisualizationObjectGenericODE1) { visualizationObjectGenericODE1 = pVisualizationObjectGenericODE1; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectGenericODE1; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectGenericODE1 = (CObjectGenericODE1*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectGenericODE1; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectGenericODE1 = (VisualizationObjectGenericODE1*)pVisualizationObject; }

    //! AUTO:  Get type name of object; could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "GenericODE1";
    }

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return Node::_None;
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectGenericODE1->GetParameters().nodeNumbers = EPyUtils::GetArrayNodeIndexSafely(d["nodeNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "systemMatrix")) { EPyUtils::SetNumpyMatrixSafely(d, "systemMatrix", cObjectGenericODE1->GetParameters().systemMatrix); /*! AUTO:  safely cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "rhsVector")) { EPyUtils::SetNumpyVectorSafely(d, "rhsVector", cObjectGenericODE1->GetParameters().rhsVector); /*! AUTO:  safely cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "rhsUserFunction")) { cObjectGenericODE1->GetParameters().rhsUserFunction = d["rhsUserFunction"]; /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectGenericODE1->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["nodeNumbers"] = EPyUtils::GetArrayNodeIndex(cObjectGenericODE1->GetParameters().nodeNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["systemMatrix"] = EPyUtils::Matrix2NumPy(cObjectGenericODE1->GetParameters().systemMatrix); //! AUTO: cast variables into python (not needed for standard types) 
        d["rhsVector"] = EPyUtils::Vector2NumPy(cObjectGenericODE1->GetParameters().rhsVector); //! AUTO: cast variables into python (not needed for standard types) 
        d["rhsUserFunction"] = (py::object)cObjectGenericODE1->GetParameters().rhsUserFunction; //! AUTO: cast variables into python (not needed for standard types) 
        d["coordinateIndexPerNode"] = (std::vector<Index>)cObjectGenericODE1->GetParameters().coordinateIndexPerNode; //! AUTO: cast variables into python (not needed for standard types) 
        d["tempCoordinates"] = EPyUtils::Vector2NumPy(cObjectGenericODE1->GetTempCoordinates()); //! AUTO: cast variables into python (not needed for standard types) 
        d["tempCoordinates_t"] = EPyUtils::Vector2NumPy(cObjectGenericODE1->GetTempCoordinates_t()); //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectGenericODE1->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { return py::cast(EPyUtils::GetArrayNodeIndex(cObjectGenericODE1->GetParameters().nodeNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("systemMatrix") == 0) { return EPyUtils::Matrix2NumPy(cObjectGenericODE1->GetParameters().systemMatrix);} //! AUTO: get parameter
        else if (parameterName.compare("rhsVector") == 0) { return EPyUtils::Vector2NumPy(cObjectGenericODE1->GetParameters().rhsVector);} //! AUTO: get parameter
        else if (parameterName.compare("rhsUserFunction") == 0) { return cObjectGenericODE1->GetParameters().rhsUserFunction.GetPythonDictionary();;} //! AUTO: get parameter
        else if (parameterName.compare("coordinateIndexPerNode") == 0) { return py::cast((std::vector<Index>)cObjectGenericODE1->GetParameters().coordinateIndexPerNode);} //! AUTO: get parameter
        else if (parameterName.compare("tempCoordinates") == 0) { return EPyUtils::Vector2NumPy(cObjectGenericODE1->GetTempCoordinates());} //! AUTO: get parameter
        else if (parameterName.compare("tempCoordinates_t") == 0) { return EPyUtils::Vector2NumPy(cObjectGenericODE1->GetTempCoordinates_t());} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectGenericODE1->GetShow());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectGenericODE1::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { cObjectGenericODE1->GetParameters().nodeNumbers = EPyUtils::GetArrayNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("systemMatrix") == 0) { EPyUtils::SetNumpyMatrixSafely(value, cObjectGenericODE1->GetParameters().systemMatrix); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("rhsVector") == 0) { EPyUtils::SetNumpyVectorSafely(value, cObjectGenericODE1->GetParameters().rhsVector); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("rhsUserFunction") == 0) { cObjectGenericODE1->GetParameters().rhsUserFunction = value; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectGenericODE1->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectGenericODE1::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
