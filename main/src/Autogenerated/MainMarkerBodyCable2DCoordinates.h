/** ***********************************************************************************************
* @class        MainMarkerBodyCable2DCoordinatesParameters
* @brief        Parameter class for MainMarkerBodyCable2DCoordinates
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2024-02-03  15:35:23 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINMARKERBODYCABLE2DCOORDINATESPARAMETERS__H
#define MAINMARKERBODYCABLE2DCOORDINATESPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CMarkerBodyCable2DCoordinates.h"

#include "Autogenerated/VisuMarkerBodyCable2DCoordinates.h"

//! AUTO: Parameters for class MainMarkerBodyCable2DCoordinatesParameters
class MainMarkerBodyCable2DCoordinatesParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainMarkerBodyCable2DCoordinates
* @brief        A special Marker attached to the coordinates of a 2D ANCF beam finite element with cubic interpolation.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainMarkerBodyCable2DCoordinates
class MainMarkerBodyCable2DCoordinates: public MainMarker // AUTO: 
{
protected: // AUTO: 
    CMarkerBodyCable2DCoordinates* cMarkerBodyCable2DCoordinates; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationMarkerBodyCable2DCoordinates* visualizationMarkerBodyCable2DCoordinates; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainMarkerBodyCable2DCoordinates()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CMarkerBodyCable2DCoordinates* GetCMarkerBodyCable2DCoordinates() { return cMarkerBodyCable2DCoordinates; }
    //! AUTO: Get const pointer to computational class
    const CMarkerBodyCable2DCoordinates* GetCMarkerBodyCable2DCoordinates() const { return cMarkerBodyCable2DCoordinates; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCMarkerBodyCable2DCoordinates(CMarkerBodyCable2DCoordinates* pCMarkerBodyCable2DCoordinates) { cMarkerBodyCable2DCoordinates = pCMarkerBodyCable2DCoordinates; }

    //! AUTO: Get pointer to visualization class
    VisualizationMarkerBodyCable2DCoordinates* GetVisualizationMarkerBodyCable2DCoordinates() { return visualizationMarkerBodyCable2DCoordinates; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationMarkerBodyCable2DCoordinates* GetVisualizationMarkerBodyCable2DCoordinates() const { return visualizationMarkerBodyCable2DCoordinates; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationMarkerBodyCable2DCoordinates(VisualizationMarkerBodyCable2DCoordinates* pVisualizationMarkerBodyCable2DCoordinates) { visualizationMarkerBodyCable2DCoordinates = pVisualizationMarkerBodyCable2DCoordinates; }

    //! AUTO: Get const pointer to computational base class object
    virtual CMarker* GetCMarker() const { return cMarkerBodyCable2DCoordinates; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCMarker(CMarker* pCMarker) { cMarkerBodyCable2DCoordinates = (CMarkerBodyCable2DCoordinates*)pCMarker; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationMarker* GetVisualizationMarker() const { return visualizationMarkerBodyCable2DCoordinates; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationMarker(VisualizationMarker* pVisualizationMarker) { visualizationMarkerBodyCable2DCoordinates = (VisualizationMarkerBodyCable2DCoordinates*)pVisualizationMarker; }

    //! AUTO:  Get type name of marker (without keyword 'Marker'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "BodyCable2DCoordinates";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cMarkerBodyCable2DCoordinates->GetParameters().bodyNumber = EPyUtils::GetObjectIndexSafely(d["bodyNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationMarkerBodyCable2DCoordinates->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["markerType"] = (std::string)GetTypeName();
        d["bodyNumber"] = (ObjectIndex)cMarkerBodyCable2DCoordinates->GetParameters().bodyNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationMarkerBodyCable2DCoordinates->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("bodyNumber") == 0) { return py::cast((ObjectIndex)cMarkerBodyCable2DCoordinates->GetParameters().bodyNumber);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationMarkerBodyCable2DCoordinates->GetShow());} //! AUTO: get parameter
        else  {PyError(STDstring("MarkerBodyCable2DCoordinates::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("bodyNumber") == 0) { cMarkerBodyCable2DCoordinates->GetParameters().bodyNumber = EPyUtils::GetObjectIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationMarkerBodyCable2DCoordinates->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("MarkerBodyCable2DCoordinates::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
    }

};



#endif //#ifdef include once...
