/** ***********************************************************************************************
* @class        MainObjectConnectorReevingSystemSpringsParameters
* @brief        Parameter class for MainObjectConnectorReevingSystemSprings
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-12-01  20:06:47 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTCONNECTORREEVINGSYSTEMSPRINGSPARAMETERS__H
#define MAINOBJECTCONNECTORREEVINGSYSTEMSPRINGSPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectConnectorReevingSystemSprings.h"

#include "Autogenerated/VisuObjectConnectorReevingSystemSprings.h"

//! AUTO: Parameters for class MainObjectConnectorReevingSystemSpringsParameters
class MainObjectConnectorReevingSystemSpringsParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectConnectorReevingSystemSprings
* @brief        A rD reeving system defined by a list of torque-free and friction-free sheaves or points that are connected with one rope (modelled as massless spring). The force is assumed to be constant all over the rope. The sheaves or connection points are defined by \f$nr\f$ rigid body markers \f$[m_0, \, m_1, \, \ldots, \, m_{nr-1}]\f$. At both ends of the rope there may be a prescribed motion coupled to a coordinate marker each, given by \f$m_{c0}\f$ and \f$m_{c1}\f$ .
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectConnectorReevingSystemSprings
class MainObjectConnectorReevingSystemSprings: public MainObjectConnector // AUTO: 
{
protected: // AUTO: 
    CObjectConnectorReevingSystemSprings* cObjectConnectorReevingSystemSprings; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectConnectorReevingSystemSprings* visualizationObjectConnectorReevingSystemSprings; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectConnectorReevingSystemSprings()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectConnectorReevingSystemSprings* GetCObjectConnectorReevingSystemSprings() { return cObjectConnectorReevingSystemSprings; }
    //! AUTO: Get const pointer to computational class
    const CObjectConnectorReevingSystemSprings* GetCObjectConnectorReevingSystemSprings() const { return cObjectConnectorReevingSystemSprings; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectConnectorReevingSystemSprings(CObjectConnectorReevingSystemSprings* pCObjectConnectorReevingSystemSprings) { cObjectConnectorReevingSystemSprings = pCObjectConnectorReevingSystemSprings; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectConnectorReevingSystemSprings* GetVisualizationObjectConnectorReevingSystemSprings() { return visualizationObjectConnectorReevingSystemSprings; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectConnectorReevingSystemSprings* GetVisualizationObjectConnectorReevingSystemSprings() const { return visualizationObjectConnectorReevingSystemSprings; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectConnectorReevingSystemSprings(VisualizationObjectConnectorReevingSystemSprings* pVisualizationObjectConnectorReevingSystemSprings) { visualizationObjectConnectorReevingSystemSprings = pVisualizationObjectConnectorReevingSystemSprings; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectConnectorReevingSystemSprings; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectConnectorReevingSystemSprings = (CObjectConnectorReevingSystemSprings*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectConnectorReevingSystemSprings; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectConnectorReevingSystemSprings = (VisualizationObjectConnectorReevingSystemSprings*)pVisualizationObject; }

    //! AUTO:  Get type name of node (without keyword 'Object'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "ConnectorReevingSystemSprings";
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectConnectorReevingSystemSprings->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(d["markerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "hasCoordinateMarkers")) { cObjectConnectorReevingSystemSprings->GetParameters().hasCoordinateMarkers = py::cast<bool>(d["hasCoordinateMarkers"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetSlimVectorTemplateSafely<Real, 2>(d, "coordinateFactors", cObjectConnectorReevingSystemSprings->GetParameters().coordinateFactors); /*! AUTO:  safely cast to C++ type*/
        cObjectConnectorReevingSystemSprings->GetParameters().stiffnessPerLength = py::cast<Real>(d["stiffnessPerLength"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "dampingPerLength")) { cObjectConnectorReevingSystemSprings->GetParameters().dampingPerLength = py::cast<Real>(d["dampingPerLength"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "dampingTorsional")) { cObjectConnectorReevingSystemSprings->GetParameters().dampingTorsional = py::cast<Real>(d["dampingTorsional"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "dampingShear")) { cObjectConnectorReevingSystemSprings->GetParameters().dampingShear = py::cast<Real>(d["dampingShear"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "referenceLength")) { cObjectConnectorReevingSystemSprings->GetParameters().referenceLength = py::cast<Real>(d["referenceLength"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetVector3DListSafely(d, "sheavesAxes", cObjectConnectorReevingSystemSprings->GetParameters().sheavesAxes); /*! AUTO:  safely cast to C++ type*/
        cObjectConnectorReevingSystemSprings->GetParameters().sheavesRadii = py::cast<std::vector<Real>>(d["sheavesRadii"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "activeConnector")) { cObjectConnectorReevingSystemSprings->GetParameters().activeConnector = py::cast<bool>(d["activeConnector"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectConnectorReevingSystemSprings->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VropeRadius")) { visualizationObjectConnectorReevingSystemSprings->GetRopeRadius() = py::cast<float>(d["VropeRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectConnectorReevingSystemSprings->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["markerNumbers"] = EPyUtils::GetArrayMarkerIndex(cObjectConnectorReevingSystemSprings->GetParameters().markerNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["hasCoordinateMarkers"] = (bool)cObjectConnectorReevingSystemSprings->GetParameters().hasCoordinateMarkers; //! AUTO: cast variables into python (not needed for standard types) 
        d["coordinateFactors"] = EPyUtils::SlimVector2NumPy(cObjectConnectorReevingSystemSprings->GetParameters().coordinateFactors); //! AUTO: cast variables into python (not needed for standard types) 
        d["stiffnessPerLength"] = (Real)cObjectConnectorReevingSystemSprings->GetParameters().stiffnessPerLength; //! AUTO: cast variables into python (not needed for standard types) 
        d["dampingPerLength"] = (Real)cObjectConnectorReevingSystemSprings->GetParameters().dampingPerLength; //! AUTO: cast variables into python (not needed for standard types) 
        d["dampingTorsional"] = (Real)cObjectConnectorReevingSystemSprings->GetParameters().dampingTorsional; //! AUTO: cast variables into python (not needed for standard types) 
        d["dampingShear"] = (Real)cObjectConnectorReevingSystemSprings->GetParameters().dampingShear; //! AUTO: cast variables into python (not needed for standard types) 
        d["referenceLength"] = (Real)cObjectConnectorReevingSystemSprings->GetParameters().referenceLength; //! AUTO: cast variables into python (not needed for standard types) 
        d["sheavesAxes"] = (PyVector3DList)cObjectConnectorReevingSystemSprings->GetParameters().sheavesAxes; //! AUTO: cast variables into python (not needed for standard types) 
        d["sheavesRadii"] = EPyUtils::Vector2NumPy(cObjectConnectorReevingSystemSprings->GetParameters().sheavesRadii); //! AUTO: cast variables into python (not needed for standard types) 
        d["activeConnector"] = (bool)cObjectConnectorReevingSystemSprings->GetParameters().activeConnector; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectConnectorReevingSystemSprings->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VropeRadius"] = (float)visualizationObjectConnectorReevingSystemSprings->GetRopeRadius(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectConnectorReevingSystemSprings->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { return py::cast(EPyUtils::GetArrayMarkerIndex(cObjectConnectorReevingSystemSprings->GetParameters().markerNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("hasCoordinateMarkers") == 0) { return py::cast((bool)cObjectConnectorReevingSystemSprings->GetParameters().hasCoordinateMarkers);} //! AUTO: get parameter
        else if (parameterName.compare("coordinateFactors") == 0) { return EPyUtils::SlimVector2NumPy(cObjectConnectorReevingSystemSprings->GetParameters().coordinateFactors);} //! AUTO: get parameter
        else if (parameterName.compare("stiffnessPerLength") == 0) { return py::cast((Real)cObjectConnectorReevingSystemSprings->GetParameters().stiffnessPerLength);} //! AUTO: get parameter
        else if (parameterName.compare("dampingPerLength") == 0) { return py::cast((Real)cObjectConnectorReevingSystemSprings->GetParameters().dampingPerLength);} //! AUTO: get parameter
        else if (parameterName.compare("dampingTorsional") == 0) { return py::cast((Real)cObjectConnectorReevingSystemSprings->GetParameters().dampingTorsional);} //! AUTO: get parameter
        else if (parameterName.compare("dampingShear") == 0) { return py::cast((Real)cObjectConnectorReevingSystemSprings->GetParameters().dampingShear);} //! AUTO: get parameter
        else if (parameterName.compare("referenceLength") == 0) { return py::cast((Real)cObjectConnectorReevingSystemSprings->GetParameters().referenceLength);} //! AUTO: get parameter
        else if (parameterName.compare("sheavesAxes") == 0) { return py::cast((PyVector3DList)cObjectConnectorReevingSystemSprings->GetParameters().sheavesAxes);} //! AUTO: get parameter
        else if (parameterName.compare("sheavesRadii") == 0) { return EPyUtils::Vector2NumPy(cObjectConnectorReevingSystemSprings->GetParameters().sheavesRadii);} //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { return py::cast((bool)cObjectConnectorReevingSystemSprings->GetParameters().activeConnector);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectConnectorReevingSystemSprings->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("VropeRadius") == 0) { return py::cast((float)visualizationObjectConnectorReevingSystemSprings->GetRopeRadius());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectConnectorReevingSystemSprings->GetColor());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectConnectorReevingSystemSprings::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("hasCoordinateMarkers") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().hasCoordinateMarkers = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("coordinateFactors") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 2>(value, cObjectConnectorReevingSystemSprings->GetParameters().coordinateFactors); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("stiffnessPerLength") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().stiffnessPerLength = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("dampingPerLength") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().dampingPerLength = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("dampingTorsional") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().dampingTorsional = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("dampingShear") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().dampingShear = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("referenceLength") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().referenceLength = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("sheavesAxes") == 0) { EPyUtils::SetVector3DListSafely(value, cObjectConnectorReevingSystemSprings->GetParameters().sheavesAxes); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("sheavesRadii") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().sheavesRadii = py::cast<std::vector<Real>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { cObjectConnectorReevingSystemSprings->GetParameters().activeConnector = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectConnectorReevingSystemSprings->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VropeRadius") == 0) { visualizationObjectConnectorReevingSystemSprings->GetRopeRadius() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectConnectorReevingSystemSprings->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectConnectorReevingSystemSprings::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
