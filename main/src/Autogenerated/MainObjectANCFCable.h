/** ***********************************************************************************************
* @class        MainObjectANCFCableParameters
* @brief        Parameter class for MainObjectANCFCable
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2024-02-03  15:35:21 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTANCFCABLEPARAMETERS__H
#define MAINOBJECTANCFCABLEPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectANCFCable.h"

#include "Autogenerated/VisuObjectANCFCable.h"

//! AUTO: Parameters for class MainObjectANCFCableParameters
class MainObjectANCFCableParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectANCFCable
* @brief        A 3D cable finite element using 2 nodes of type NodePointSlope1. The localPosition of the beam with length \f$L\f$=physicsLength and height \f$h\f$ ranges in \f$X\f$-direction in range \f$[0, L]\f$ and in \f$Y\f$-direction in range \f$[-h/2,h/2]\f$ (which is in fact not needed in the \hac{EOM}). For description see ObjectANCFCable2D, which is almost identical to 3D case. Note that this element does not include torsion, therfore a torque cannot be applied along the local x-axis.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectANCFCable
class MainObjectANCFCable: public MainObjectBody // AUTO: 
{
protected: // AUTO: 
    CObjectANCFCable* cObjectANCFCable; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectANCFCable* visualizationObjectANCFCable; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectANCFCable()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectANCFCable* GetCObjectANCFCable() { return cObjectANCFCable; }
    //! AUTO: Get const pointer to computational class
    const CObjectANCFCable* GetCObjectANCFCable() const { return cObjectANCFCable; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectANCFCable(CObjectANCFCable* pCObjectANCFCable) { cObjectANCFCable = pCObjectANCFCable; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectANCFCable* GetVisualizationObjectANCFCable() { return visualizationObjectANCFCable; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectANCFCable* GetVisualizationObjectANCFCable() const { return visualizationObjectANCFCable; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectANCFCable(VisualizationObjectANCFCable* pVisualizationObjectANCFCable) { visualizationObjectANCFCable = pVisualizationObjectANCFCable; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectANCFCable; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectANCFCable = (CObjectANCFCable*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectANCFCable; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectANCFCable = (VisualizationObjectANCFCable*)pVisualizationObject; }

    //! AUTO:  Get type name of object; could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "ANCFCable";
    }

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return (Node::Type)(Node::Position + Node::PointSlope1);
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectANCFCable->GetParameters().physicsLength = py::cast<Real>(d["physicsLength"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().physicsMassPerLength = py::cast<Real>(d["physicsMassPerLength"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().physicsBendingStiffness = py::cast<Real>(d["physicsBendingStiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().physicsAxialStiffness = py::cast<Real>(d["physicsAxialStiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().physicsBendingDamping = py::cast<Real>(d["physicsBendingDamping"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().physicsAxialDamping = py::cast<Real>(d["physicsAxialDamping"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().physicsReferenceAxialStrain = py::cast<Real>(d["physicsReferenceAxialStrain"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().strainIsRelativeToReference = py::cast<Real>(d["strainIsRelativeToReference"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().nodeNumbers = EPyUtils::GetNodeIndex2Safely(d["nodeNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectANCFCable->GetParameters().useReducedOrderIntegration = py::cast<Index>(d["useReducedOrderIntegration"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectANCFCable->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vradius")) { visualizationObjectANCFCable->GetRadius() = py::cast<float>(d["Vradius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectANCFCable->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["physicsLength"] = (Real)cObjectANCFCable->GetParameters().physicsLength; //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsMassPerLength"] = (Real)cObjectANCFCable->GetParameters().physicsMassPerLength; //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsBendingStiffness"] = (Real)cObjectANCFCable->GetParameters().physicsBendingStiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsAxialStiffness"] = (Real)cObjectANCFCable->GetParameters().physicsAxialStiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsBendingDamping"] = (Real)cObjectANCFCable->GetParameters().physicsBendingDamping; //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsAxialDamping"] = (Real)cObjectANCFCable->GetParameters().physicsAxialDamping; //! AUTO: cast variables into python (not needed for standard types) 
        d["physicsReferenceAxialStrain"] = (Real)cObjectANCFCable->GetParameters().physicsReferenceAxialStrain; //! AUTO: cast variables into python (not needed for standard types) 
        d["strainIsRelativeToReference"] = (Real)cObjectANCFCable->GetParameters().strainIsRelativeToReference; //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumbers"] = EPyUtils::GetArrayNodeIndex(ArrayIndex(cObjectANCFCable->GetParameters().nodeNumbers)); //! AUTO: cast variables into python (not needed for standard types) 
        d["useReducedOrderIntegration"] = (Index)cObjectANCFCable->GetParameters().useReducedOrderIntegration; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectANCFCable->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vradius"] = (float)visualizationObjectANCFCable->GetRadius(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectANCFCable->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("physicsLength") == 0) { return py::cast((Real)cObjectANCFCable->GetParameters().physicsLength);} //! AUTO: get parameter
        else if (parameterName.compare("physicsMassPerLength") == 0) { return py::cast((Real)cObjectANCFCable->GetParameters().physicsMassPerLength);} //! AUTO: get parameter
        else if (parameterName.compare("physicsBendingStiffness") == 0) { return py::cast((Real)cObjectANCFCable->GetParameters().physicsBendingStiffness);} //! AUTO: get parameter
        else if (parameterName.compare("physicsAxialStiffness") == 0) { return py::cast((Real)cObjectANCFCable->GetParameters().physicsAxialStiffness);} //! AUTO: get parameter
        else if (parameterName.compare("physicsBendingDamping") == 0) { return py::cast((Real)cObjectANCFCable->GetParameters().physicsBendingDamping);} //! AUTO: get parameter
        else if (parameterName.compare("physicsAxialDamping") == 0) { return py::cast((Real)cObjectANCFCable->GetParameters().physicsAxialDamping);} //! AUTO: get parameter
        else if (parameterName.compare("physicsReferenceAxialStrain") == 0) { return py::cast((Real)cObjectANCFCable->GetParameters().physicsReferenceAxialStrain);} //! AUTO: get parameter
        else if (parameterName.compare("strainIsRelativeToReference") == 0) { return py::cast((Real)cObjectANCFCable->GetParameters().strainIsRelativeToReference);} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { return py::cast(EPyUtils::GetArrayNodeIndex(ArrayIndex(cObjectANCFCable->GetParameters().nodeNumbers)));} //! AUTO: get parameter
        else if (parameterName.compare("useReducedOrderIntegration") == 0) { return py::cast((Index)cObjectANCFCable->GetParameters().useReducedOrderIntegration);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectANCFCable->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("Vradius") == 0) { return py::cast((float)visualizationObjectANCFCable->GetRadius());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectANCFCable->GetColor());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectANCFCable::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsLength") == 0) { cObjectANCFCable->GetParameters().physicsLength = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsMassPerLength") == 0) { cObjectANCFCable->GetParameters().physicsMassPerLength = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsBendingStiffness") == 0) { cObjectANCFCable->GetParameters().physicsBendingStiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsAxialStiffness") == 0) { cObjectANCFCable->GetParameters().physicsAxialStiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsBendingDamping") == 0) { cObjectANCFCable->GetParameters().physicsBendingDamping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsAxialDamping") == 0) { cObjectANCFCable->GetParameters().physicsAxialDamping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("physicsReferenceAxialStrain") == 0) { cObjectANCFCable->GetParameters().physicsReferenceAxialStrain = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("strainIsRelativeToReference") == 0) { cObjectANCFCable->GetParameters().strainIsRelativeToReference = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { cObjectANCFCable->GetParameters().nodeNumbers = EPyUtils::GetNodeIndex2Safely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("useReducedOrderIntegration") == 0) { cObjectANCFCable->GetParameters().useReducedOrderIntegration = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectANCFCable->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vradius") == 0) { visualizationObjectANCFCable->GetRadius() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectANCFCable->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectANCFCable::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
