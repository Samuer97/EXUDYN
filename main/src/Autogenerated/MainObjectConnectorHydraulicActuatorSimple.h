/** ***********************************************************************************************
* @class        MainObjectConnectorHydraulicActuatorSimpleParameters
* @brief        Parameter class for MainObjectConnectorHydraulicActuatorSimple
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-07-04  22:03:17 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTCONNECTORHYDRAULICACTUATORSIMPLEPARAMETERS__H
#define MAINOBJECTCONNECTORHYDRAULICACTUATORSIMPLEPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectConnectorHydraulicActuatorSimple.h"

#include "Autogenerated/VisuObjectConnectorHydraulicActuatorSimple.h"

//! AUTO: Parameters for class MainObjectConnectorHydraulicActuatorSimpleParameters
class MainObjectConnectorHydraulicActuatorSimpleParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectConnectorHydraulicActuatorSimple
* @brief        A basic hydraulic actuator with pressure build up equations. The actuator follows a valve input value, which results in a in- or outflow of fluid depending on the pressure difference. Valve values can be prescribed by user functions (not yet available) or with the MainSystem PreStepUserFunction(...).
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectConnectorHydraulicActuatorSimple
class MainObjectConnectorHydraulicActuatorSimple: public MainObjectConnector // AUTO: 
{
protected: // AUTO: 
    CObjectConnectorHydraulicActuatorSimple* cObjectConnectorHydraulicActuatorSimple; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectConnectorHydraulicActuatorSimple* visualizationObjectConnectorHydraulicActuatorSimple; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectConnectorHydraulicActuatorSimple()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectConnectorHydraulicActuatorSimple* GetCObjectConnectorHydraulicActuatorSimple() { return cObjectConnectorHydraulicActuatorSimple; }
    //! AUTO: Get const pointer to computational class
    const CObjectConnectorHydraulicActuatorSimple* GetCObjectConnectorHydraulicActuatorSimple() const { return cObjectConnectorHydraulicActuatorSimple; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectConnectorHydraulicActuatorSimple(CObjectConnectorHydraulicActuatorSimple* pCObjectConnectorHydraulicActuatorSimple) { cObjectConnectorHydraulicActuatorSimple = pCObjectConnectorHydraulicActuatorSimple; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectConnectorHydraulicActuatorSimple* GetVisualizationObjectConnectorHydraulicActuatorSimple() { return visualizationObjectConnectorHydraulicActuatorSimple; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectConnectorHydraulicActuatorSimple* GetVisualizationObjectConnectorHydraulicActuatorSimple() const { return visualizationObjectConnectorHydraulicActuatorSimple; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectConnectorHydraulicActuatorSimple(VisualizationObjectConnectorHydraulicActuatorSimple* pVisualizationObjectConnectorHydraulicActuatorSimple) { visualizationObjectConnectorHydraulicActuatorSimple = pVisualizationObjectConnectorHydraulicActuatorSimple; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectConnectorHydraulicActuatorSimple; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectConnectorHydraulicActuatorSimple = (CObjectConnectorHydraulicActuatorSimple*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectConnectorHydraulicActuatorSimple; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectConnectorHydraulicActuatorSimple = (VisualizationObjectConnectorHydraulicActuatorSimple*)pVisualizationObject; }

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return Node::_None;
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;

    //! AUTO:  Get type name of node (without keyword 'Object'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "HydraulicActuatorSimple";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectConnectorHydraulicActuatorSimple->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(d["markerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().nodeNumbers = EPyUtils::GetArrayNodeIndexSafely(d["nodeNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().offsetLength = py::cast<Real>(d["offsetLength"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().strokeLength = py::cast<Real>(d["strokeLength"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().chamberCrossSection0 = py::cast<Real>(d["chamberCrossSection0"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().chamberCrossSection1 = py::cast<Real>(d["chamberCrossSection1"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().referenceVolume0 = py::cast<Real>(d["referenceVolume0"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().referenceVolume1 = py::cast<Real>(d["referenceVolume1"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().valveOpening0 = py::cast<Real>(d["valveOpening0"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().valveOpening1 = py::cast<Real>(d["valveOpening1"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "actuatorDamping")) { cObjectConnectorHydraulicActuatorSimple->GetParameters().actuatorDamping = py::cast<Real>(d["actuatorDamping"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        cObjectConnectorHydraulicActuatorSimple->GetParameters().oilBulkModulus = py::cast<Real>(d["oilBulkModulus"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().nominalFlow = py::cast<Real>(d["nominalFlow"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().systemPressure = py::cast<Real>(d["systemPressure"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectConnectorHydraulicActuatorSimple->GetParameters().tankPressure = py::cast<Real>(d["tankPressure"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "useChamberVolumeChange")) { cObjectConnectorHydraulicActuatorSimple->GetParameters().useChamberVolumeChange = py::cast<bool>(d["useChamberVolumeChange"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "activeConnector")) { cObjectConnectorHydraulicActuatorSimple->GetParameters().activeConnector = py::cast<bool>(d["activeConnector"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectConnectorHydraulicActuatorSimple->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VcylinderRadius")) { visualizationObjectConnectorHydraulicActuatorSimple->GetCylinderRadius() = py::cast<float>(d["VcylinderRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VrodRadius")) { visualizationObjectConnectorHydraulicActuatorSimple->GetRodRadius() = py::cast<float>(d["VrodRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VpistonRadius")) { visualizationObjectConnectorHydraulicActuatorSimple->GetPistonRadius() = py::cast<float>(d["VpistonRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VpistonLength")) { visualizationObjectConnectorHydraulicActuatorSimple->GetPistonLength() = py::cast<float>(d["VpistonLength"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VrodMountRadius")) { visualizationObjectConnectorHydraulicActuatorSimple->GetRodMountRadius() = py::cast<float>(d["VrodMountRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VbaseMountRadius")) { visualizationObjectConnectorHydraulicActuatorSimple->GetBaseMountRadius() = py::cast<float>(d["VbaseMountRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VbaseMountLength")) { visualizationObjectConnectorHydraulicActuatorSimple->GetBaseMountLength() = py::cast<float>(d["VbaseMountLength"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VcolorCylinder")) { visualizationObjectConnectorHydraulicActuatorSimple->GetColorCylinder() = py::cast<std::vector<float>>(d["VcolorCylinder"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VcolorPiston")) { visualizationObjectConnectorHydraulicActuatorSimple->GetColorPiston() = py::cast<std::vector<float>>(d["VcolorPiston"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["markerNumbers"] = EPyUtils::GetArrayMarkerIndex(cObjectConnectorHydraulicActuatorSimple->GetParameters().markerNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumbers"] = EPyUtils::GetArrayNodeIndex(cObjectConnectorHydraulicActuatorSimple->GetParameters().nodeNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["offsetLength"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().offsetLength; //! AUTO: cast variables into python (not needed for standard types) 
        d["strokeLength"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().strokeLength; //! AUTO: cast variables into python (not needed for standard types) 
        d["chamberCrossSection0"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().chamberCrossSection0; //! AUTO: cast variables into python (not needed for standard types) 
        d["chamberCrossSection1"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().chamberCrossSection1; //! AUTO: cast variables into python (not needed for standard types) 
        d["referenceVolume0"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().referenceVolume0; //! AUTO: cast variables into python (not needed for standard types) 
        d["referenceVolume1"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().referenceVolume1; //! AUTO: cast variables into python (not needed for standard types) 
        d["valveOpening0"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().valveOpening0; //! AUTO: cast variables into python (not needed for standard types) 
        d["valveOpening1"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().valveOpening1; //! AUTO: cast variables into python (not needed for standard types) 
        d["actuatorDamping"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().actuatorDamping; //! AUTO: cast variables into python (not needed for standard types) 
        d["oilBulkModulus"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().oilBulkModulus; //! AUTO: cast variables into python (not needed for standard types) 
        d["nominalFlow"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().nominalFlow; //! AUTO: cast variables into python (not needed for standard types) 
        d["systemPressure"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().systemPressure; //! AUTO: cast variables into python (not needed for standard types) 
        d["tankPressure"] = (Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().tankPressure; //! AUTO: cast variables into python (not needed for standard types) 
        d["useChamberVolumeChange"] = (bool)cObjectConnectorHydraulicActuatorSimple->GetParameters().useChamberVolumeChange; //! AUTO: cast variables into python (not needed for standard types) 
        d["activeConnector"] = (bool)cObjectConnectorHydraulicActuatorSimple->GetParameters().activeConnector; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectConnectorHydraulicActuatorSimple->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VcylinderRadius"] = (float)visualizationObjectConnectorHydraulicActuatorSimple->GetCylinderRadius(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VrodRadius"] = (float)visualizationObjectConnectorHydraulicActuatorSimple->GetRodRadius(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VpistonRadius"] = (float)visualizationObjectConnectorHydraulicActuatorSimple->GetPistonRadius(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VpistonLength"] = (float)visualizationObjectConnectorHydraulicActuatorSimple->GetPistonLength(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VrodMountRadius"] = (float)visualizationObjectConnectorHydraulicActuatorSimple->GetRodMountRadius(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VbaseMountRadius"] = (float)visualizationObjectConnectorHydraulicActuatorSimple->GetBaseMountRadius(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VbaseMountLength"] = (float)visualizationObjectConnectorHydraulicActuatorSimple->GetBaseMountLength(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VcolorCylinder"] = (std::vector<float>)visualizationObjectConnectorHydraulicActuatorSimple->GetColorCylinder(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VcolorPiston"] = (std::vector<float>)visualizationObjectConnectorHydraulicActuatorSimple->GetColorPiston(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { return py::cast(EPyUtils::GetArrayMarkerIndex(cObjectConnectorHydraulicActuatorSimple->GetParameters().markerNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { return py::cast(EPyUtils::GetArrayNodeIndex(cObjectConnectorHydraulicActuatorSimple->GetParameters().nodeNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("offsetLength") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().offsetLength);} //! AUTO: get parameter
        else if (parameterName.compare("strokeLength") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().strokeLength);} //! AUTO: get parameter
        else if (parameterName.compare("chamberCrossSection0") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().chamberCrossSection0);} //! AUTO: get parameter
        else if (parameterName.compare("chamberCrossSection1") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().chamberCrossSection1);} //! AUTO: get parameter
        else if (parameterName.compare("referenceVolume0") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().referenceVolume0);} //! AUTO: get parameter
        else if (parameterName.compare("referenceVolume1") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().referenceVolume1);} //! AUTO: get parameter
        else if (parameterName.compare("valveOpening0") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().valveOpening0);} //! AUTO: get parameter
        else if (parameterName.compare("valveOpening1") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().valveOpening1);} //! AUTO: get parameter
        else if (parameterName.compare("actuatorDamping") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().actuatorDamping);} //! AUTO: get parameter
        else if (parameterName.compare("oilBulkModulus") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().oilBulkModulus);} //! AUTO: get parameter
        else if (parameterName.compare("nominalFlow") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().nominalFlow);} //! AUTO: get parameter
        else if (parameterName.compare("systemPressure") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().systemPressure);} //! AUTO: get parameter
        else if (parameterName.compare("tankPressure") == 0) { return py::cast((Real)cObjectConnectorHydraulicActuatorSimple->GetParameters().tankPressure);} //! AUTO: get parameter
        else if (parameterName.compare("useChamberVolumeChange") == 0) { return py::cast((bool)cObjectConnectorHydraulicActuatorSimple->GetParameters().useChamberVolumeChange);} //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { return py::cast((bool)cObjectConnectorHydraulicActuatorSimple->GetParameters().activeConnector);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectConnectorHydraulicActuatorSimple->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("VcylinderRadius") == 0) { return py::cast((float)visualizationObjectConnectorHydraulicActuatorSimple->GetCylinderRadius());} //! AUTO: get parameter
        else if (parameterName.compare("VrodRadius") == 0) { return py::cast((float)visualizationObjectConnectorHydraulicActuatorSimple->GetRodRadius());} //! AUTO: get parameter
        else if (parameterName.compare("VpistonRadius") == 0) { return py::cast((float)visualizationObjectConnectorHydraulicActuatorSimple->GetPistonRadius());} //! AUTO: get parameter
        else if (parameterName.compare("VpistonLength") == 0) { return py::cast((float)visualizationObjectConnectorHydraulicActuatorSimple->GetPistonLength());} //! AUTO: get parameter
        else if (parameterName.compare("VrodMountRadius") == 0) { return py::cast((float)visualizationObjectConnectorHydraulicActuatorSimple->GetRodMountRadius());} //! AUTO: get parameter
        else if (parameterName.compare("VbaseMountRadius") == 0) { return py::cast((float)visualizationObjectConnectorHydraulicActuatorSimple->GetBaseMountRadius());} //! AUTO: get parameter
        else if (parameterName.compare("VbaseMountLength") == 0) { return py::cast((float)visualizationObjectConnectorHydraulicActuatorSimple->GetBaseMountLength());} //! AUTO: get parameter
        else if (parameterName.compare("VcolorCylinder") == 0) { return py::cast((std::vector<float>)visualizationObjectConnectorHydraulicActuatorSimple->GetColorCylinder());} //! AUTO: get parameter
        else if (parameterName.compare("VcolorPiston") == 0) { return py::cast((std::vector<float>)visualizationObjectConnectorHydraulicActuatorSimple->GetColorPiston());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectConnectorHydraulicActuatorSimple::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().nodeNumbers = EPyUtils::GetArrayNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("offsetLength") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().offsetLength = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("strokeLength") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().strokeLength = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("chamberCrossSection0") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().chamberCrossSection0 = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("chamberCrossSection1") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().chamberCrossSection1 = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("referenceVolume0") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().referenceVolume0 = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("referenceVolume1") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().referenceVolume1 = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("valveOpening0") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().valveOpening0 = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("valveOpening1") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().valveOpening1 = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("actuatorDamping") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().actuatorDamping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("oilBulkModulus") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().oilBulkModulus = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nominalFlow") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().nominalFlow = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("systemPressure") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().systemPressure = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("tankPressure") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().tankPressure = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("useChamberVolumeChange") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().useChamberVolumeChange = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { cObjectConnectorHydraulicActuatorSimple->GetParameters().activeConnector = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VcylinderRadius") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetCylinderRadius() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VrodRadius") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetRodRadius() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VpistonRadius") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetPistonRadius() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VpistonLength") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetPistonLength() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VrodMountRadius") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetRodMountRadius() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VbaseMountRadius") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetBaseMountRadius() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VbaseMountLength") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetBaseMountLength() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VcolorCylinder") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetColorCylinder() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VcolorPiston") == 0) { visualizationObjectConnectorHydraulicActuatorSimple->GetColorPiston() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectConnectorHydraulicActuatorSimple::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
