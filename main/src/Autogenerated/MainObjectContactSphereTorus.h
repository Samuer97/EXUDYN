/** ***********************************************************************************************
* @class        MainObjectContactSphereTorusParameters
* @brief        Parameter class for MainObjectContactSphereTorus
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2025-05-17  16:55:55 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTCONTACTSPHERETORUSPARAMETERS__H
#define MAINOBJECTCONTACTSPHERETORUSPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectContactSphereTorus.h"

#include "Autogenerated/VisuObjectContactSphereTorus.h"

//! AUTO: Parameters for class MainObjectContactSphereTorusParameters
class MainObjectContactSphereTorusParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectContactSphereTorus
* @brief        [UNDER DEVELOPMENT] A simple contact connector between a sphere (marker0) and a torus (marker1). The sphere is assumed to be placed inside of the torus (outer contact of sphere with torus currently not implemented!).
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectContactSphereTorus
class MainObjectContactSphereTorus: public MainObjectConnector // AUTO: 
{
protected: // AUTO: 
    CObjectContactSphereTorus* cObjectContactSphereTorus; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectContactSphereTorus* visualizationObjectContactSphereTorus; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectContactSphereTorus()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectContactSphereTorus* GetCObjectContactSphereTorus() { return cObjectContactSphereTorus; }
    //! AUTO: Get const pointer to computational class
    const CObjectContactSphereTorus* GetCObjectContactSphereTorus() const { return cObjectContactSphereTorus; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectContactSphereTorus(CObjectContactSphereTorus* pCObjectContactSphereTorus) { cObjectContactSphereTorus = pCObjectContactSphereTorus; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectContactSphereTorus* GetVisualizationObjectContactSphereTorus() { return visualizationObjectContactSphereTorus; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectContactSphereTorus* GetVisualizationObjectContactSphereTorus() const { return visualizationObjectContactSphereTorus; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectContactSphereTorus(VisualizationObjectContactSphereTorus* pVisualizationObjectContactSphereTorus) { visualizationObjectContactSphereTorus = pVisualizationObjectContactSphereTorus; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectContactSphereTorus; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectContactSphereTorus = (CObjectContactSphereTorus*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectContactSphereTorus; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectContactSphereTorus = (VisualizationObjectContactSphereTorus*)pVisualizationObject; }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return Node::GenericData;
    }

    //! AUTO:  Get type name of node (without keyword 'Object'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "ContactSphereSphere";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectContactSphereTorus->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(d["markerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactSphereTorus->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(d["nodeNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "radiusSphere")) { cObjectContactSphereTorus->GetParameters().radiusSphere = py::cast<Real>(d["radiusSphere"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "torusMajorRadius")) { cObjectContactSphereTorus->GetParameters().torusMajorRadius = py::cast<Real>(d["torusMajorRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "torusMinorRadius")) { cObjectContactSphereTorus->GetParameters().torusMinorRadius = py::cast<Real>(d["torusMinorRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(d, "torusAxis", cObjectContactSphereTorus->GetParameters().torusAxis); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "dynamicFriction")) { cObjectContactSphereTorus->GetParameters().dynamicFriction = py::cast<Real>(d["dynamicFriction"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "frictionProportionalZone")) { cObjectContactSphereTorus->GetParameters().frictionProportionalZone = py::cast<Real>(d["frictionProportionalZone"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        cObjectContactSphereTorus->GetParameters().contactStiffness = py::cast<Real>(d["contactStiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "contactDamping")) { cObjectContactSphereTorus->GetParameters().contactDamping = py::cast<Real>(d["contactDamping"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "contactStiffnessExponent")) { cObjectContactSphereTorus->GetParameters().contactStiffnessExponent = py::cast<Real>(d["contactStiffnessExponent"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "restitutionCoefficient")) { cObjectContactSphereTorus->GetParameters().restitutionCoefficient = py::cast<Real>(d["restitutionCoefficient"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "minimumImpactVelocity")) { cObjectContactSphereTorus->GetParameters().minimumImpactVelocity = py::cast<Real>(d["minimumImpactVelocity"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "impactModel")) { cObjectContactSphereTorus->GetParameters().impactModel = py::cast<Index>(d["impactModel"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "activeConnector")) { cObjectContactSphereTorus->GetParameters().activeConnector = py::cast<bool>(d["activeConnector"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectContactSphereTorus->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectContactSphereTorus->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["markerNumbers"] = EPyUtils::GetArrayMarkerIndex(cObjectContactSphereTorus->GetParameters().markerNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumber"] = (NodeIndex)cObjectContactSphereTorus->GetParameters().nodeNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["radiusSphere"] = (Real)cObjectContactSphereTorus->GetParameters().radiusSphere; //! AUTO: cast variables into python (not needed for standard types) 
        d["torusMajorRadius"] = (Real)cObjectContactSphereTorus->GetParameters().torusMajorRadius; //! AUTO: cast variables into python (not needed for standard types) 
        d["torusMinorRadius"] = (Real)cObjectContactSphereTorus->GetParameters().torusMinorRadius; //! AUTO: cast variables into python (not needed for standard types) 
        d["torusAxis"] = EPyUtils::SlimVector2NumPy(cObjectContactSphereTorus->GetParameters().torusAxis); //! AUTO: cast variables into python (not needed for standard types) 
        d["dynamicFriction"] = (Real)cObjectContactSphereTorus->GetParameters().dynamicFriction; //! AUTO: cast variables into python (not needed for standard types) 
        d["frictionProportionalZone"] = (Real)cObjectContactSphereTorus->GetParameters().frictionProportionalZone; //! AUTO: cast variables into python (not needed for standard types) 
        d["contactStiffness"] = (Real)cObjectContactSphereTorus->GetParameters().contactStiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["contactDamping"] = (Real)cObjectContactSphereTorus->GetParameters().contactDamping; //! AUTO: cast variables into python (not needed for standard types) 
        d["contactStiffnessExponent"] = (Real)cObjectContactSphereTorus->GetParameters().contactStiffnessExponent; //! AUTO: cast variables into python (not needed for standard types) 
        d["restitutionCoefficient"] = (Real)cObjectContactSphereTorus->GetParameters().restitutionCoefficient; //! AUTO: cast variables into python (not needed for standard types) 
        d["minimumImpactVelocity"] = (Real)cObjectContactSphereTorus->GetParameters().minimumImpactVelocity; //! AUTO: cast variables into python (not needed for standard types) 
        d["impactModel"] = (Index)cObjectContactSphereTorus->GetParameters().impactModel; //! AUTO: cast variables into python (not needed for standard types) 
        d["activeConnector"] = (bool)cObjectContactSphereTorus->GetParameters().activeConnector; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectContactSphereTorus->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectContactSphereTorus->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { return py::cast(EPyUtils::GetArrayMarkerIndex(cObjectContactSphereTorus->GetParameters().markerNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { return py::cast((NodeIndex)cObjectContactSphereTorus->GetParameters().nodeNumber);} //! AUTO: get parameter
        else if (parameterName.compare("radiusSphere") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().radiusSphere);} //! AUTO: get parameter
        else if (parameterName.compare("torusMajorRadius") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().torusMajorRadius);} //! AUTO: get parameter
        else if (parameterName.compare("torusMinorRadius") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().torusMinorRadius);} //! AUTO: get parameter
        else if (parameterName.compare("torusAxis") == 0) { return EPyUtils::SlimVector2NumPy(cObjectContactSphereTorus->GetParameters().torusAxis);} //! AUTO: get parameter
        else if (parameterName.compare("dynamicFriction") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().dynamicFriction);} //! AUTO: get parameter
        else if (parameterName.compare("frictionProportionalZone") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().frictionProportionalZone);} //! AUTO: get parameter
        else if (parameterName.compare("contactStiffness") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().contactStiffness);} //! AUTO: get parameter
        else if (parameterName.compare("contactDamping") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().contactDamping);} //! AUTO: get parameter
        else if (parameterName.compare("contactStiffnessExponent") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().contactStiffnessExponent);} //! AUTO: get parameter
        else if (parameterName.compare("restitutionCoefficient") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().restitutionCoefficient);} //! AUTO: get parameter
        else if (parameterName.compare("minimumImpactVelocity") == 0) { return py::cast((Real)cObjectContactSphereTorus->GetParameters().minimumImpactVelocity);} //! AUTO: get parameter
        else if (parameterName.compare("impactModel") == 0) { return py::cast((Index)cObjectContactSphereTorus->GetParameters().impactModel);} //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { return py::cast((bool)cObjectContactSphereTorus->GetParameters().activeConnector);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectContactSphereTorus->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectContactSphereTorus->GetColor());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectContactSphereTorus::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { cObjectContactSphereTorus->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { cObjectContactSphereTorus->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("radiusSphere") == 0) { cObjectContactSphereTorus->GetParameters().radiusSphere = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("torusMajorRadius") == 0) { cObjectContactSphereTorus->GetParameters().torusMajorRadius = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("torusMinorRadius") == 0) { cObjectContactSphereTorus->GetParameters().torusMinorRadius = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("torusAxis") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(value, cObjectContactSphereTorus->GetParameters().torusAxis); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("dynamicFriction") == 0) { cObjectContactSphereTorus->GetParameters().dynamicFriction = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("frictionProportionalZone") == 0) { cObjectContactSphereTorus->GetParameters().frictionProportionalZone = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("contactStiffness") == 0) { cObjectContactSphereTorus->GetParameters().contactStiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("contactDamping") == 0) { cObjectContactSphereTorus->GetParameters().contactDamping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("contactStiffnessExponent") == 0) { cObjectContactSphereTorus->GetParameters().contactStiffnessExponent = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("restitutionCoefficient") == 0) { cObjectContactSphereTorus->GetParameters().restitutionCoefficient = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("minimumImpactVelocity") == 0) { cObjectContactSphereTorus->GetParameters().minimumImpactVelocity = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("impactModel") == 0) { cObjectContactSphereTorus->GetParameters().impactModel = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { cObjectContactSphereTorus->GetParameters().activeConnector = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectContactSphereTorus->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectContactSphereTorus->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectContactSphereTorus::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
