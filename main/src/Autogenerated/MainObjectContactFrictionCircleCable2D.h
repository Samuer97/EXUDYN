/** ***********************************************************************************************
* @class        MainObjectContactFrictionCircleCable2DParameters
* @brief        Parameter class for MainObjectContactFrictionCircleCable2D
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-07-09  14:42:35 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTCONTACTFRICTIONCIRCLECABLE2DPARAMETERS__H
#define MAINOBJECTCONTACTFRICTIONCIRCLECABLE2DPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectContactFrictionCircleCable2D.h"

#include "Autogenerated/VisuObjectContactFrictionCircleCable2D.h"

//! AUTO: Parameters for class MainObjectContactFrictionCircleCable2DParameters
class MainObjectContactFrictionCircleCable2DParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectContactFrictionCircleCable2D
* @brief        A very specialized penalty-based contact/friction condition between a 2D circle in the local x/y plane (=marker0, a RigidBody Marker, from node or object) on a body and an ANCFCable2DShape (=marker1, Marker: BodyCable2DShape), in xy-plane; a node NodeGenericData is required with 3\f$\times\f$(number of contact segments) -- containing per segment: [contact gap, stick/slip (stick=0, slip=+-1, undefined=-2), last friction position]. The connector works with Cable2D and ALECable2D, HOWEVER, due to conceptual differences the (tangential) frictionStiffness cannot be used with ALECable2D; if using, it gives wrong tangential stresses, even though it may work in general.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectContactFrictionCircleCable2D
class MainObjectContactFrictionCircleCable2D: public MainObjectConnector // AUTO: 
{
protected: // AUTO: 
    CObjectContactFrictionCircleCable2D* cObjectContactFrictionCircleCable2D; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectContactFrictionCircleCable2D* visualizationObjectContactFrictionCircleCable2D; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectContactFrictionCircleCable2D()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectContactFrictionCircleCable2D* GetCObjectContactFrictionCircleCable2D() { return cObjectContactFrictionCircleCable2D; }
    //! AUTO: Get const pointer to computational class
    const CObjectContactFrictionCircleCable2D* GetCObjectContactFrictionCircleCable2D() const { return cObjectContactFrictionCircleCable2D; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectContactFrictionCircleCable2D(CObjectContactFrictionCircleCable2D* pCObjectContactFrictionCircleCable2D) { cObjectContactFrictionCircleCable2D = pCObjectContactFrictionCircleCable2D; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectContactFrictionCircleCable2D* GetVisualizationObjectContactFrictionCircleCable2D() { return visualizationObjectContactFrictionCircleCable2D; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectContactFrictionCircleCable2D* GetVisualizationObjectContactFrictionCircleCable2D() const { return visualizationObjectContactFrictionCircleCable2D; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectContactFrictionCircleCable2D(VisualizationObjectContactFrictionCircleCable2D* pVisualizationObjectContactFrictionCircleCable2D) { visualizationObjectContactFrictionCircleCable2D = pVisualizationObjectContactFrictionCircleCable2D; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectContactFrictionCircleCable2D; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectContactFrictionCircleCable2D = (CObjectContactFrictionCircleCable2D*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectContactFrictionCircleCable2D; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectContactFrictionCircleCable2D = (VisualizationObjectContactFrictionCircleCable2D*)pVisualizationObject; }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return Node::GenericData;
    }

    //! AUTO:  Get type name of node (without keyword 'Object'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "ContactFrictionCircleCable2D";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectContactFrictionCircleCable2D->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(d["markerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(d["nodeNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().numberOfContactSegments = py::cast<Index>(d["numberOfContactSegments"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().contactStiffness = py::cast<Real>(d["contactStiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().contactDamping = py::cast<Real>(d["contactDamping"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().frictionVelocityPenalty = py::cast<Real>(d["frictionVelocityPenalty"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().frictionStiffness = py::cast<Real>(d["frictionStiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().frictionCoefficient = py::cast<Real>(d["frictionCoefficient"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().circleRadius = py::cast<Real>(d["circleRadius"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactFrictionCircleCable2D->GetParameters().useSegmentNormals = py::cast<bool>(d["useSegmentNormals"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "activeConnector")) { cObjectContactFrictionCircleCable2D->GetParameters().activeConnector = py::cast<bool>(d["activeConnector"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectContactFrictionCircleCable2D->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VshowContactCircle")) { visualizationObjectContactFrictionCircleCable2D->GetShowContactCircle() = py::cast<bool>(d["VshowContactCircle"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VdrawSize")) { visualizationObjectContactFrictionCircleCable2D->GetDrawSize() = py::cast<float>(d["VdrawSize"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectContactFrictionCircleCable2D->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["markerNumbers"] = EPyUtils::GetArrayMarkerIndex(cObjectContactFrictionCircleCable2D->GetParameters().markerNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumber"] = (NodeIndex)cObjectContactFrictionCircleCable2D->GetParameters().nodeNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["numberOfContactSegments"] = (Index)cObjectContactFrictionCircleCable2D->GetParameters().numberOfContactSegments; //! AUTO: cast variables into python (not needed for standard types) 
        d["contactStiffness"] = (Real)cObjectContactFrictionCircleCable2D->GetParameters().contactStiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["contactDamping"] = (Real)cObjectContactFrictionCircleCable2D->GetParameters().contactDamping; //! AUTO: cast variables into python (not needed for standard types) 
        d["frictionVelocityPenalty"] = (Real)cObjectContactFrictionCircleCable2D->GetParameters().frictionVelocityPenalty; //! AUTO: cast variables into python (not needed for standard types) 
        d["frictionStiffness"] = (Real)cObjectContactFrictionCircleCable2D->GetParameters().frictionStiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["frictionCoefficient"] = (Real)cObjectContactFrictionCircleCable2D->GetParameters().frictionCoefficient; //! AUTO: cast variables into python (not needed for standard types) 
        d["circleRadius"] = (Real)cObjectContactFrictionCircleCable2D->GetParameters().circleRadius; //! AUTO: cast variables into python (not needed for standard types) 
        d["useSegmentNormals"] = (bool)cObjectContactFrictionCircleCable2D->GetParameters().useSegmentNormals; //! AUTO: cast variables into python (not needed for standard types) 
        d["activeConnector"] = (bool)cObjectContactFrictionCircleCable2D->GetParameters().activeConnector; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectContactFrictionCircleCable2D->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VshowContactCircle"] = (bool)visualizationObjectContactFrictionCircleCable2D->GetShowContactCircle(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VdrawSize"] = (float)visualizationObjectContactFrictionCircleCable2D->GetDrawSize(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectContactFrictionCircleCable2D->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { return py::cast(EPyUtils::GetArrayMarkerIndex(cObjectContactFrictionCircleCable2D->GetParameters().markerNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { return py::cast((NodeIndex)cObjectContactFrictionCircleCable2D->GetParameters().nodeNumber);} //! AUTO: get parameter
        else if (parameterName.compare("numberOfContactSegments") == 0) { return py::cast((Index)cObjectContactFrictionCircleCable2D->GetParameters().numberOfContactSegments);} //! AUTO: get parameter
        else if (parameterName.compare("contactStiffness") == 0) { return py::cast((Real)cObjectContactFrictionCircleCable2D->GetParameters().contactStiffness);} //! AUTO: get parameter
        else if (parameterName.compare("contactDamping") == 0) { return py::cast((Real)cObjectContactFrictionCircleCable2D->GetParameters().contactDamping);} //! AUTO: get parameter
        else if (parameterName.compare("frictionVelocityPenalty") == 0) { return py::cast((Real)cObjectContactFrictionCircleCable2D->GetParameters().frictionVelocityPenalty);} //! AUTO: get parameter
        else if (parameterName.compare("frictionStiffness") == 0) { return py::cast((Real)cObjectContactFrictionCircleCable2D->GetParameters().frictionStiffness);} //! AUTO: get parameter
        else if (parameterName.compare("frictionCoefficient") == 0) { return py::cast((Real)cObjectContactFrictionCircleCable2D->GetParameters().frictionCoefficient);} //! AUTO: get parameter
        else if (parameterName.compare("circleRadius") == 0) { return py::cast((Real)cObjectContactFrictionCircleCable2D->GetParameters().circleRadius);} //! AUTO: get parameter
        else if (parameterName.compare("useSegmentNormals") == 0) { return py::cast((bool)cObjectContactFrictionCircleCable2D->GetParameters().useSegmentNormals);} //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { return py::cast((bool)cObjectContactFrictionCircleCable2D->GetParameters().activeConnector);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectContactFrictionCircleCable2D->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("VshowContactCircle") == 0) { return py::cast((bool)visualizationObjectContactFrictionCircleCable2D->GetShowContactCircle());} //! AUTO: get parameter
        else if (parameterName.compare("VdrawSize") == 0) { return py::cast((float)visualizationObjectContactFrictionCircleCable2D->GetDrawSize());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectContactFrictionCircleCable2D->GetColor());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectContactFrictionCircleCable2D::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("numberOfContactSegments") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().numberOfContactSegments = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("contactStiffness") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().contactStiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("contactDamping") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().contactDamping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("frictionVelocityPenalty") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().frictionVelocityPenalty = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("frictionStiffness") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().frictionStiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("frictionCoefficient") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().frictionCoefficient = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("circleRadius") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().circleRadius = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("useSegmentNormals") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().useSegmentNormals = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { cObjectContactFrictionCircleCable2D->GetParameters().activeConnector = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectContactFrictionCircleCable2D->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VshowContactCircle") == 0) { visualizationObjectContactFrictionCircleCable2D->GetShowContactCircle() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VdrawSize") == 0) { visualizationObjectContactFrictionCircleCable2D->GetDrawSize() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectContactFrictionCircleCable2D->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectContactFrictionCircleCable2D::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
