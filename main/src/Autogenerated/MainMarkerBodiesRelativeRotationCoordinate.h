/** ***********************************************************************************************
* @class        MainMarkerBodiesRelativeRotationCoordinateParameters
* @brief        Parameter class for MainMarkerBodiesRelativeRotationCoordinate
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2025-07-03  18:39:33 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINMARKERBODIESRELATIVEROTATIONCOORDINATEPARAMETERS__H
#define MAINMARKERBODIESRELATIVEROTATIONCOORDINATEPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CMarkerBodiesRelativeRotationCoordinate.h"

#include "Autogenerated/VisuMarkerBodiesRelativeRotationCoordinate.h"

//! AUTO: Parameters for class MainMarkerBodiesRelativeRotationCoordinateParameters
class MainMarkerBodiesRelativeRotationCoordinateParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainMarkerBodiesRelativeRotationCoordinate
* @brief        A coordinate-based Marker attached to two rigid bodies or beams which computes the relative rotation between the bodies according to the given axis; this marker can be used together with coordinate-based constraints and connectors (e.g., CoordinateSpringDamper and CoordinateConstraint). Note that it is assumed that the two bodies can only rotate about the given axis (e.g., constrained by a revolute joint) -- otherwise results may be unexpected. Note that this approach is not compatible with FFRF-based flexible bodies and currently requires and intermediate rigid body.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainMarkerBodiesRelativeRotationCoordinate
class MainMarkerBodiesRelativeRotationCoordinate: public MainMarker // AUTO: 
{
protected: // AUTO: 
    CMarkerBodiesRelativeRotationCoordinate* cMarkerBodiesRelativeRotationCoordinate; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationMarkerBodiesRelativeRotationCoordinate* visualizationMarkerBodiesRelativeRotationCoordinate; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainMarkerBodiesRelativeRotationCoordinate()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CMarkerBodiesRelativeRotationCoordinate* GetCMarkerBodiesRelativeRotationCoordinate() { return cMarkerBodiesRelativeRotationCoordinate; }
    //! AUTO: Get const pointer to computational class
    const CMarkerBodiesRelativeRotationCoordinate* GetCMarkerBodiesRelativeRotationCoordinate() const { return cMarkerBodiesRelativeRotationCoordinate; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCMarkerBodiesRelativeRotationCoordinate(CMarkerBodiesRelativeRotationCoordinate* pCMarkerBodiesRelativeRotationCoordinate) { cMarkerBodiesRelativeRotationCoordinate = pCMarkerBodiesRelativeRotationCoordinate; }

    //! AUTO: Get pointer to visualization class
    VisualizationMarkerBodiesRelativeRotationCoordinate* GetVisualizationMarkerBodiesRelativeRotationCoordinate() { return visualizationMarkerBodiesRelativeRotationCoordinate; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationMarkerBodiesRelativeRotationCoordinate* GetVisualizationMarkerBodiesRelativeRotationCoordinate() const { return visualizationMarkerBodiesRelativeRotationCoordinate; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationMarkerBodiesRelativeRotationCoordinate(VisualizationMarkerBodiesRelativeRotationCoordinate* pVisualizationMarkerBodiesRelativeRotationCoordinate) { visualizationMarkerBodiesRelativeRotationCoordinate = pVisualizationMarkerBodiesRelativeRotationCoordinate; }

    //! AUTO: Get const pointer to computational base class object
    virtual CMarker* GetCMarker() const { return cMarkerBodiesRelativeRotationCoordinate; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCMarker(CMarker* pCMarker) { cMarkerBodiesRelativeRotationCoordinate = (CMarkerBodiesRelativeRotationCoordinate*)pCMarker; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationMarker* GetVisualizationMarker() const { return visualizationMarkerBodiesRelativeRotationCoordinate; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationMarker(VisualizationMarker* pVisualizationMarker) { visualizationMarkerBodiesRelativeRotationCoordinate = (VisualizationMarkerBodiesRelativeRotationCoordinate*)pVisualizationMarker; }

    //! AUTO:  Get type name of marker (without keyword 'Marker'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "BodiesRelativeTranslationCoordinate";
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cMarkerBodiesRelativeRotationCoordinate->GetParameters().bodyNumbers = EPyUtils::GetArrayObjectIndexSafely(d["bodyNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cMarkerBodiesRelativeRotationCoordinate->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(d["nodeNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(d, "localPosition0", cMarkerBodiesRelativeRotationCoordinate->GetParameters().localPosition0); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(d, "localPosition1", cMarkerBodiesRelativeRotationCoordinate->GetParameters().localPosition1); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(d, "axis0", cMarkerBodiesRelativeRotationCoordinate->GetParameters().axis0); /*! AUTO:  safely cast to C++ type*/
        cMarkerBodiesRelativeRotationCoordinate->GetParameters().offset = py::cast<Real>(d["offset"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationMarkerBodiesRelativeRotationCoordinate->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["markerType"] = (std::string)GetTypeName();
        d["bodyNumbers"] = EPyUtils::GetArrayObjectIndex(cMarkerBodiesRelativeRotationCoordinate->GetParameters().bodyNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumber"] = (NodeIndex)cMarkerBodiesRelativeRotationCoordinate->GetParameters().nodeNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["localPosition0"] = EPyUtils::SlimVector2NumPy(cMarkerBodiesRelativeRotationCoordinate->GetParameters().localPosition0); //! AUTO: cast variables into python (not needed for standard types) 
        d["localPosition1"] = EPyUtils::SlimVector2NumPy(cMarkerBodiesRelativeRotationCoordinate->GetParameters().localPosition1); //! AUTO: cast variables into python (not needed for standard types) 
        d["axis0"] = EPyUtils::SlimVector2NumPy(cMarkerBodiesRelativeRotationCoordinate->GetParameters().axis0); //! AUTO: cast variables into python (not needed for standard types) 
        d["offset"] = (Real)cMarkerBodiesRelativeRotationCoordinate->GetParameters().offset; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationMarkerBodiesRelativeRotationCoordinate->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("bodyNumbers") == 0) { return py::cast(EPyUtils::GetArrayObjectIndex(cMarkerBodiesRelativeRotationCoordinate->GetParameters().bodyNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { return py::cast((NodeIndex)cMarkerBodiesRelativeRotationCoordinate->GetParameters().nodeNumber);} //! AUTO: get parameter
        else if (parameterName.compare("localPosition0") == 0) { return EPyUtils::SlimVector2NumPy(cMarkerBodiesRelativeRotationCoordinate->GetParameters().localPosition0);} //! AUTO: get parameter
        else if (parameterName.compare("localPosition1") == 0) { return EPyUtils::SlimVector2NumPy(cMarkerBodiesRelativeRotationCoordinate->GetParameters().localPosition1);} //! AUTO: get parameter
        else if (parameterName.compare("axis0") == 0) { return EPyUtils::SlimVector2NumPy(cMarkerBodiesRelativeRotationCoordinate->GetParameters().axis0);} //! AUTO: get parameter
        else if (parameterName.compare("offset") == 0) { return py::cast((Real)cMarkerBodiesRelativeRotationCoordinate->GetParameters().offset);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationMarkerBodiesRelativeRotationCoordinate->GetShow());} //! AUTO: get parameter
        else  {PyError(STDstring("MarkerBodiesRelativeRotationCoordinate::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("bodyNumbers") == 0) { cMarkerBodiesRelativeRotationCoordinate->GetParameters().bodyNumbers = EPyUtils::GetArrayObjectIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { cMarkerBodiesRelativeRotationCoordinate->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("localPosition0") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(value, cMarkerBodiesRelativeRotationCoordinate->GetParameters().localPosition0); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("localPosition1") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(value, cMarkerBodiesRelativeRotationCoordinate->GetParameters().localPosition1); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("axis0") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(value, cMarkerBodiesRelativeRotationCoordinate->GetParameters().axis0); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("offset") == 0) { cMarkerBodiesRelativeRotationCoordinate->GetParameters().offset = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationMarkerBodiesRelativeRotationCoordinate->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("MarkerBodiesRelativeRotationCoordinate::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
    }

};



#endif //#ifdef include once...
