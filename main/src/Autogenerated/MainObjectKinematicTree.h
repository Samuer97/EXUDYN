/** ***********************************************************************************************
* @class        MainObjectKinematicTreeParameters
* @brief        Parameter class for MainObjectKinematicTree
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-04-21  02:15:43 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTKINEMATICTREEPARAMETERS__H
#define MAINOBJECTKINEMATICTREEPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include <pybind11/functional.h> //! AUTO: for function handling ... otherwise gives a python error (no compilation error in C++ !)
#include "Autogenerated/CObjectKinematicTree.h"

#include "Autogenerated/VisuObjectKinematicTree.h"

//! AUTO: Parameters for class MainObjectKinematicTreeParameters
class MainObjectKinematicTreeParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectKinematicTree
* @brief        A special object to represent open kinematic trees using minimum coordinate formulation (UNDER DEVELOPMENT!).
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectKinematicTree
class MainObjectKinematicTree: public MainObjectBody // AUTO: 
{
protected: // AUTO: 
    CObjectKinematicTree* cObjectKinematicTree; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectKinematicTree* visualizationObjectKinematicTree; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectKinematicTree()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectKinematicTree* GetCObjectKinematicTree() { return cObjectKinematicTree; }
    //! AUTO: Get const pointer to computational class
    const CObjectKinematicTree* GetCObjectKinematicTree() const { return cObjectKinematicTree; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectKinematicTree(CObjectKinematicTree* pCObjectKinematicTree) { cObjectKinematicTree = pCObjectKinematicTree; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectKinematicTree* GetVisualizationObjectKinematicTree() { return visualizationObjectKinematicTree; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectKinematicTree* GetVisualizationObjectKinematicTree() const { return visualizationObjectKinematicTree; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectKinematicTree(VisualizationObjectKinematicTree* pVisualizationObjectKinematicTree) { visualizationObjectKinematicTree = pVisualizationObjectKinematicTree; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectKinematicTree; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectKinematicTree = (CObjectKinematicTree*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectKinematicTree; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectKinematicTree = (VisualizationObjectKinematicTree*)pVisualizationObject; }

    //! AUTO:  Get type name of object; could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "GenericODE2";
    }

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return Node::_None;
    }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectKinematicTree->GetParameters().nodeNumbers = EPyUtils::GetArrayNodeIndexSafely(d["nodeNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetPyMatrixContainerSafely(d, "massMatrix", cObjectKinematicTree->GetParameters().massMatrix); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetPyMatrixContainerSafely(d, "stiffnessMatrix", cObjectKinematicTree->GetParameters().stiffnessMatrix); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetPyMatrixContainerSafely(d, "dampingMatrix", cObjectKinematicTree->GetParameters().dampingMatrix); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetNumpyVectorSafely(d, "forceVector", cObjectKinematicTree->GetParameters().forceVector); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "forceUserFunction")) { if (EPyUtils::CheckForValidFunction(d["forceUserFunction"])) 
            { cObjectKinematicTree->GetParameters().forceUserFunction = py::cast<std::function<StdVector(const MainSystem&,Real,Index,StdVector,StdVector)>>((py::function)d["forceUserFunction"]); /* AUTO:  read out dictionary and cast to C++ type*/}
            else {cObjectKinematicTree->GetParameters().forceUserFunction = 0;  /*AUTO: otherwise assign with zero!*/ }} 
        if (EPyUtils::DictItemExists(d, "massMatrixUserFunction")) { if (EPyUtils::CheckForValidFunction(d["massMatrixUserFunction"])) 
            { cObjectKinematicTree->GetParameters().massMatrixUserFunction = py::cast<std::function<py::object(const MainSystem&,Real,Index,StdVector,StdVector)>>((py::function)d["massMatrixUserFunction"]); /* AUTO:  read out dictionary and cast to C++ type*/}
            else {cObjectKinematicTree->GetParameters().massMatrixUserFunction = 0;  /*AUTO: otherwise assign with zero!*/ }} 
        if (EPyUtils::DictItemExists(d, "jacobianUserFunction")) { if (EPyUtils::CheckForValidFunction(d["jacobianUserFunction"])) 
            { cObjectKinematicTree->GetParameters().jacobianUserFunction = py::cast<std::function<py::object(const MainSystem&,Real,Index,StdVector,StdVector,Real,Real)>>((py::function)d["jacobianUserFunction"]); /* AUTO:  read out dictionary and cast to C++ type*/}
            else {cObjectKinematicTree->GetParameters().jacobianUserFunction = 0;  /*AUTO: otherwise assign with zero!*/ }} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectKinematicTree->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectKinematicTree->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VtriangleMesh")) { EPyUtils::SetNumpyMatrixISafely(d, "VtriangleMesh", visualizationObjectKinematicTree->GetTriangleMesh()); /*! AUTO:  safely cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VshowNodes")) { visualizationObjectKinematicTree->GetShowNodes() = py::cast<bool>(d["VshowNodes"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VgraphicsDataUserFunction")) { if (EPyUtils::CheckForValidFunction(d["VgraphicsDataUserFunction"])) 
            { visualizationObjectKinematicTree->GetGraphicsDataUserFunction() = py::cast<std::function<py::object(const MainSystem&, Index)>>((py::function)d["VgraphicsDataUserFunction"]); /* AUTO:  read out dictionary and cast to C++ type*/}
            else {visualizationObjectKinematicTree->GetGraphicsDataUserFunction() = 0;  /*AUTO: otherwise assign with zero!*/ }} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary() const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["nodeNumbers"] = EPyUtils::GetArrayNodeIndex(cObjectKinematicTree->GetParameters().nodeNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["massMatrix"] = (PyMatrixContainer)cObjectKinematicTree->GetParameters().massMatrix; //! AUTO: cast variables into python (not needed for standard types) 
        d["stiffnessMatrix"] = (PyMatrixContainer)cObjectKinematicTree->GetParameters().stiffnessMatrix; //! AUTO: cast variables into python (not needed for standard types) 
        d["dampingMatrix"] = (PyMatrixContainer)cObjectKinematicTree->GetParameters().dampingMatrix; //! AUTO: cast variables into python (not needed for standard types) 
        d["forceVector"] = EPyUtils::Vector2NumPy(cObjectKinematicTree->GetParameters().forceVector); //! AUTO: cast variables into python (not needed for standard types) 
        if (cObjectKinematicTree->GetParameters().forceUserFunction)
            {d["forceUserFunction"] = (std::function<StdVector(const MainSystem&,Real,Index,StdVector,StdVector)>)cObjectKinematicTree->GetParameters().forceUserFunction;}
        else
            {d["forceUserFunction"] = 0;}
 //! AUTO: cast variables into python (not needed for standard types) 
        if (cObjectKinematicTree->GetParameters().massMatrixUserFunction)
            {d["massMatrixUserFunction"] = (std::function<py::object(const MainSystem&,Real,Index,StdVector,StdVector)>)cObjectKinematicTree->GetParameters().massMatrixUserFunction;}
        else
            {d["massMatrixUserFunction"] = 0;}
 //! AUTO: cast variables into python (not needed for standard types) 
        if (cObjectKinematicTree->GetParameters().jacobianUserFunction)
            {d["jacobianUserFunction"] = (std::function<py::object(const MainSystem&,Real,Index,StdVector,StdVector,Real,Real)>)cObjectKinematicTree->GetParameters().jacobianUserFunction;}
        else
            {d["jacobianUserFunction"] = 0;}
 //! AUTO: cast variables into python (not needed for standard types) 
        d["coordinateIndexPerNode"] = (std::vector<Index>)cObjectKinematicTree->GetParameters().coordinateIndexPerNode; //! AUTO: cast variables into python (not needed for standard types) 
        d["tempCoordinates"] = EPyUtils::Vector2NumPy(cObjectKinematicTree->GetTempCoordinates()); //! AUTO: cast variables into python (not needed for standard types) 
        d["tempCoordinates_t"] = EPyUtils::Vector2NumPy(cObjectKinematicTree->GetTempCoordinates_t()); //! AUTO: cast variables into python (not needed for standard types) 
        d["tempCoordinates_tt"] = EPyUtils::Vector2NumPy(cObjectKinematicTree->GetTempCoordinates_tt()); //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectKinematicTree->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectKinematicTree->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VtriangleMesh"] = EPyUtils::MatrixI2NumPy(visualizationObjectKinematicTree->GetTriangleMesh()); //! AUTO: cast variables into python (not needed for standard types) 
        d["VshowNodes"] = (bool)visualizationObjectKinematicTree->GetShowNodes(); //! AUTO: cast variables into python (not needed for standard types) 
        if (visualizationObjectKinematicTree->GetGraphicsDataUserFunction())
            {d["VgraphicsDataUserFunction"] = (std::function<py::object(const MainSystem&, Index)>)visualizationObjectKinematicTree->GetGraphicsDataUserFunction();}
        else
            {d["VgraphicsDataUserFunction"] = 0;}
 //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { return py::cast(EPyUtils::GetArrayNodeIndex(cObjectKinematicTree->GetParameters().nodeNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("massMatrix") == 0) { return py::cast((PyMatrixContainer)cObjectKinematicTree->GetParameters().massMatrix);} //! AUTO: get parameter
        else if (parameterName.compare("stiffnessMatrix") == 0) { return py::cast((PyMatrixContainer)cObjectKinematicTree->GetParameters().stiffnessMatrix);} //! AUTO: get parameter
        else if (parameterName.compare("dampingMatrix") == 0) { return py::cast((PyMatrixContainer)cObjectKinematicTree->GetParameters().dampingMatrix);} //! AUTO: get parameter
        else if (parameterName.compare("forceVector") == 0) { return EPyUtils::Vector2NumPy(cObjectKinematicTree->GetParameters().forceVector);} //! AUTO: get parameter
        else if (parameterName.compare("forceUserFunction") == 0) { return py::cast((std::function<StdVector(const MainSystem&,Real,Index,StdVector,StdVector)>)cObjectKinematicTree->GetParameters().forceUserFunction);} //! AUTO: get parameter
        else if (parameterName.compare("massMatrixUserFunction") == 0) { return py::cast((std::function<py::object(const MainSystem&,Real,Index,StdVector,StdVector)>)cObjectKinematicTree->GetParameters().massMatrixUserFunction);} //! AUTO: get parameter
        else if (parameterName.compare("jacobianUserFunction") == 0) { return py::cast((std::function<py::object(const MainSystem&,Real,Index,StdVector,StdVector,Real,Real)>)cObjectKinematicTree->GetParameters().jacobianUserFunction);} //! AUTO: get parameter
        else if (parameterName.compare("coordinateIndexPerNode") == 0) { return py::cast((std::vector<Index>)cObjectKinematicTree->GetParameters().coordinateIndexPerNode);} //! AUTO: get parameter
        else if (parameterName.compare("tempCoordinates") == 0) { return EPyUtils::Vector2NumPy(cObjectKinematicTree->GetTempCoordinates());} //! AUTO: get parameter
        else if (parameterName.compare("tempCoordinates_t") == 0) { return EPyUtils::Vector2NumPy(cObjectKinematicTree->GetTempCoordinates_t());} //! AUTO: get parameter
        else if (parameterName.compare("tempCoordinates_tt") == 0) { return EPyUtils::Vector2NumPy(cObjectKinematicTree->GetTempCoordinates_tt());} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectKinematicTree->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectKinematicTree->GetColor());} //! AUTO: get parameter
        else if (parameterName.compare("VtriangleMesh") == 0) { return EPyUtils::MatrixI2NumPy(visualizationObjectKinematicTree->GetTriangleMesh());} //! AUTO: get parameter
        else if (parameterName.compare("VshowNodes") == 0) { return py::cast((bool)visualizationObjectKinematicTree->GetShowNodes());} //! AUTO: get parameter
        else if (parameterName.compare("VgraphicsDataUserFunction") == 0) { return py::cast((std::function<py::object(const MainSystem&, Index)>)visualizationObjectKinematicTree->GetGraphicsDataUserFunction());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectKinematicTree::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumbers") == 0) { cObjectKinematicTree->GetParameters().nodeNumbers = EPyUtils::GetArrayNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("massMatrix") == 0) { EPyUtils::SetPyMatrixContainerSafely(value, cObjectKinematicTree->GetParameters().massMatrix); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("stiffnessMatrix") == 0) { EPyUtils::SetPyMatrixContainerSafely(value, cObjectKinematicTree->GetParameters().stiffnessMatrix); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("dampingMatrix") == 0) { EPyUtils::SetPyMatrixContainerSafely(value, cObjectKinematicTree->GetParameters().dampingMatrix); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("forceVector") == 0) { EPyUtils::SetNumpyVectorSafely(value, cObjectKinematicTree->GetParameters().forceVector); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("forceUserFunction") == 0) { if (py::isinstance<py::function>(value)) {cObjectKinematicTree->GetParameters().forceUserFunction = py::cast<std::function<StdVector(const MainSystem&,Real,Index,StdVector,StdVector)>>(value); /* AUTO:  read out dictionary and cast to C++ type*/} else
            if (!EPyUtils::IsPyTypeInteger(value) || (py::cast<int>(value) != 0)) {PyError(STDstring("Failed to convert PyFunction: must be either valid python function or 0, but got ")+EXUstd::ToString(value)); }; } //! AUTO: get parameter
        else if (parameterName.compare("massMatrixUserFunction") == 0) { if (py::isinstance<py::function>(value)) {cObjectKinematicTree->GetParameters().massMatrixUserFunction = py::cast<std::function<py::object(const MainSystem&,Real,Index,StdVector,StdVector)>>(value); /* AUTO:  read out dictionary and cast to C++ type*/} else
            if (!EPyUtils::IsPyTypeInteger(value) || (py::cast<int>(value) != 0)) {PyError(STDstring("Failed to convert PyFunction: must be either valid python function or 0, but got ")+EXUstd::ToString(value)); }; } //! AUTO: get parameter
        else if (parameterName.compare("jacobianUserFunction") == 0) { if (py::isinstance<py::function>(value)) {cObjectKinematicTree->GetParameters().jacobianUserFunction = py::cast<std::function<py::object(const MainSystem&,Real,Index,StdVector,StdVector,Real,Real)>>(value); /* AUTO:  read out dictionary and cast to C++ type*/} else
            if (!EPyUtils::IsPyTypeInteger(value) || (py::cast<int>(value) != 0)) {PyError(STDstring("Failed to convert PyFunction: must be either valid python function or 0, but got ")+EXUstd::ToString(value)); }; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectKinematicTree->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectKinematicTree->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VtriangleMesh") == 0) { EPyUtils::SetNumpyMatrixISafely(value, visualizationObjectKinematicTree->GetTriangleMesh()); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VshowNodes") == 0) { visualizationObjectKinematicTree->GetShowNodes() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VgraphicsDataUserFunction") == 0) { if (py::isinstance<py::function>(value)) {visualizationObjectKinematicTree->GetGraphicsDataUserFunction() = py::cast<std::function<py::object(const MainSystem&, Index)>>(value); /* AUTO:  read out dictionary and cast to C++ type*/} else
            if (!EPyUtils::IsPyTypeInteger(value) || (py::cast<int>(value) != 0)) {PyError(STDstring("Failed to convert PyFunction: must be either valid python function or 0, but got ")+EXUstd::ToString(value)); }; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectKinematicTree::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
