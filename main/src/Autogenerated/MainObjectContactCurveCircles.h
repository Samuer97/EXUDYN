/** ***********************************************************************************************
* @class        MainObjectContactCurveCirclesParameters
* @brief        Parameter class for MainObjectContactCurveCircles
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2024-11-03  19:05:55 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTCONTACTCURVECIRCLESPARAMETERS__H
#define MAINOBJECTCONTACTCURVECIRCLESPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectContactCurveCircles.h"

#include "Autogenerated/VisuObjectContactCurveCircles.h"

//! AUTO: Parameters for class MainObjectContactCurveCirclesParameters
class MainObjectContactCurveCirclesParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectContactCurveCircles
* @brief        [UNDER CONSTRUCTION] A contact model between a curve defined by piecewise segments and a set of circles. The 2D curve may corotate in 3D with the underlying marker and also defines the plane of action for the circles. Note that there is a limit of 100 circle markes above which computation becomes slower as it requires memory allocation.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectContactCurveCircles
class MainObjectContactCurveCircles: public MainObjectConnector // AUTO: 
{
protected: // AUTO: 
    CObjectContactCurveCircles* cObjectContactCurveCircles; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectContactCurveCircles* visualizationObjectContactCurveCircles; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectContactCurveCircles()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectContactCurveCircles* GetCObjectContactCurveCircles() { return cObjectContactCurveCircles; }
    //! AUTO: Get const pointer to computational class
    const CObjectContactCurveCircles* GetCObjectContactCurveCircles() const { return cObjectContactCurveCircles; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectContactCurveCircles(CObjectContactCurveCircles* pCObjectContactCurveCircles) { cObjectContactCurveCircles = pCObjectContactCurveCircles; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectContactCurveCircles* GetVisualizationObjectContactCurveCircles() { return visualizationObjectContactCurveCircles; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectContactCurveCircles* GetVisualizationObjectContactCurveCircles() const { return visualizationObjectContactCurveCircles; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectContactCurveCircles(VisualizationObjectContactCurveCircles* pVisualizationObjectContactCurveCircles) { visualizationObjectContactCurveCircles = pVisualizationObjectContactCurveCircles; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectContactCurveCircles; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectContactCurveCircles = (CObjectContactCurveCircles*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectContactCurveCircles; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectContactCurveCircles = (VisualizationObjectContactCurveCircles*)pVisualizationObject; }

    //! AUTO:  Check consistency prior to CSystem::Assemble(); needs to find all possible violations such that Assemble() would fail
    virtual bool CheckPreAssembleConsistency(const MainSystem& mainSystem, STDstring& errorString) const override;

    //! AUTO:  provide requested nodeType for objects; used for automatic checks in CheckSystemIntegrity()
    virtual Node::Type GetRequestedNodeType() const override
    {
        return Node::GenericData;
    }

    //! AUTO:  Get type name of node (without keyword 'Object'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "ContactSphereSphere";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectContactCurveCircles->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(d["markerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        cObjectContactCurveCircles->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(d["nodeNumber"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetNumpyVectorSafely(d, "circlesRadii", cObjectContactCurveCircles->GetParameters().circlesRadii); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetPyMatrixContainerSafely(d, "segmentsData", cObjectContactCurveCircles->GetParameters().segmentsData); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetPyMatrixContainerSafely(d, "polynomialData", cObjectContactCurveCircles->GetParameters().polynomialData); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetConstMatrixTemplateSafely<3,3>(d, "rotationMarker0", cObjectContactCurveCircles->GetParameters().rotationMarker0); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "dynamicFriction")) { cObjectContactCurveCircles->GetParameters().dynamicFriction = py::cast<Real>(d["dynamicFriction"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "frictionProportionalZone")) { cObjectContactCurveCircles->GetParameters().frictionProportionalZone = py::cast<Real>(d["frictionProportionalZone"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        cObjectContactCurveCircles->GetParameters().contactStiffness = py::cast<Real>(d["contactStiffness"]); /* AUTO:  read out dictionary and cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "contactDamping")) { cObjectContactCurveCircles->GetParameters().contactDamping = py::cast<Real>(d["contactDamping"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "contactModel")) { cObjectContactCurveCircles->GetParameters().contactModel = py::cast<Index>(d["contactModel"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "activeConnector")) { cObjectContactCurveCircles->GetParameters().activeConnector = py::cast<bool>(d["activeConnector"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectContactCurveCircles->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectContactCurveCircles->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["markerNumbers"] = EPyUtils::GetArrayMarkerIndex(cObjectContactCurveCircles->GetParameters().markerNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["nodeNumber"] = (NodeIndex)cObjectContactCurveCircles->GetParameters().nodeNumber; //! AUTO: cast variables into python (not needed for standard types) 
        d["circlesRadii"] = EPyUtils::Vector2NumPy(cObjectContactCurveCircles->GetParameters().circlesRadii); //! AUTO: cast variables into python (not needed for standard types) 
        d["segmentsData"] = (PyMatrixContainer)cObjectContactCurveCircles->GetParameters().segmentsData; //! AUTO: cast variables into python (not needed for standard types) 
        d["polynomialData"] = (PyMatrixContainer)cObjectContactCurveCircles->GetParameters().polynomialData; //! AUTO: cast variables into python (not needed for standard types) 
        d["rotationMarker0"] = EPyUtils::Matrix2NumPyTemplate(cObjectContactCurveCircles->GetParameters().rotationMarker0); //! AUTO: cast variables into python (not needed for standard types) 
        d["dynamicFriction"] = (Real)cObjectContactCurveCircles->GetParameters().dynamicFriction; //! AUTO: cast variables into python (not needed for standard types) 
        d["frictionProportionalZone"] = (Real)cObjectContactCurveCircles->GetParameters().frictionProportionalZone; //! AUTO: cast variables into python (not needed for standard types) 
        d["contactStiffness"] = (Real)cObjectContactCurveCircles->GetParameters().contactStiffness; //! AUTO: cast variables into python (not needed for standard types) 
        d["contactDamping"] = (Real)cObjectContactCurveCircles->GetParameters().contactDamping; //! AUTO: cast variables into python (not needed for standard types) 
        d["contactModel"] = (Index)cObjectContactCurveCircles->GetParameters().contactModel; //! AUTO: cast variables into python (not needed for standard types) 
        d["activeConnector"] = (bool)cObjectContactCurveCircles->GetParameters().activeConnector; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectContactCurveCircles->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectContactCurveCircles->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { return py::cast(EPyUtils::GetArrayMarkerIndex(cObjectContactCurveCircles->GetParameters().markerNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { return py::cast((NodeIndex)cObjectContactCurveCircles->GetParameters().nodeNumber);} //! AUTO: get parameter
        else if (parameterName.compare("circlesRadii") == 0) { return EPyUtils::Vector2NumPy(cObjectContactCurveCircles->GetParameters().circlesRadii);} //! AUTO: get parameter
        else if (parameterName.compare("segmentsData") == 0) { return py::cast((PyMatrixContainer)cObjectContactCurveCircles->GetParameters().segmentsData);} //! AUTO: get parameter
        else if (parameterName.compare("polynomialData") == 0) { return py::cast((PyMatrixContainer)cObjectContactCurveCircles->GetParameters().polynomialData);} //! AUTO: get parameter
        else if (parameterName.compare("rotationMarker0") == 0) { return EPyUtils::Matrix2NumPyTemplate(cObjectContactCurveCircles->GetParameters().rotationMarker0);} //! AUTO: get parameter
        else if (parameterName.compare("dynamicFriction") == 0) { return py::cast((Real)cObjectContactCurveCircles->GetParameters().dynamicFriction);} //! AUTO: get parameter
        else if (parameterName.compare("frictionProportionalZone") == 0) { return py::cast((Real)cObjectContactCurveCircles->GetParameters().frictionProportionalZone);} //! AUTO: get parameter
        else if (parameterName.compare("contactStiffness") == 0) { return py::cast((Real)cObjectContactCurveCircles->GetParameters().contactStiffness);} //! AUTO: get parameter
        else if (parameterName.compare("contactDamping") == 0) { return py::cast((Real)cObjectContactCurveCircles->GetParameters().contactDamping);} //! AUTO: get parameter
        else if (parameterName.compare("contactModel") == 0) { return py::cast((Index)cObjectContactCurveCircles->GetParameters().contactModel);} //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { return py::cast((bool)cObjectContactCurveCircles->GetParameters().activeConnector);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectContactCurveCircles->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectContactCurveCircles->GetColor());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectContactCurveCircles::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { cObjectContactCurveCircles->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("nodeNumber") == 0) { cObjectContactCurveCircles->GetParameters().nodeNumber = EPyUtils::GetNodeIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("circlesRadii") == 0) { EPyUtils::SetNumpyVectorSafely(value, cObjectContactCurveCircles->GetParameters().circlesRadii); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("segmentsData") == 0) { EPyUtils::SetPyMatrixContainerSafely(value, cObjectContactCurveCircles->GetParameters().segmentsData); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("polynomialData") == 0) { EPyUtils::SetPyMatrixContainerSafely(value, cObjectContactCurveCircles->GetParameters().polynomialData); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("rotationMarker0") == 0) { EPyUtils::SetConstMatrixTemplateSafely<3,3>(value, cObjectContactCurveCircles->GetParameters().rotationMarker0); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("dynamicFriction") == 0) { cObjectContactCurveCircles->GetParameters().dynamicFriction = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("frictionProportionalZone") == 0) { cObjectContactCurveCircles->GetParameters().frictionProportionalZone = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("contactStiffness") == 0) { cObjectContactCurveCircles->GetParameters().contactStiffness = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("contactDamping") == 0) { cObjectContactCurveCircles->GetParameters().contactDamping = py::cast<Real>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("contactModel") == 0) { cObjectContactCurveCircles->GetParameters().contactModel = py::cast<Index>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { cObjectContactCurveCircles->GetParameters().activeConnector = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectContactCurveCircles->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectContactCurveCircles->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectContactCurveCircles::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
