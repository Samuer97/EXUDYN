/** ***********************************************************************************************
* @class        MainObjectJointPrismatic2DParameters
* @brief        Parameter class for MainObjectJointPrismatic2D
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
* @date         2022-07-21  19:29:29 (last modified)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#ifndef MAINOBJECTJOINTPRISMATIC2DPARAMETERS__H
#define MAINOBJECTJOINTPRISMATIC2DPARAMETERS__H

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

#include <pybind11/pybind11.h>      //! AUTO: include pybind for dictionary access
#include <pybind11/stl.h>           //! AUTO: needed for stl-casts; otherwise py::cast with std::vector<Real> crashes!!!
namespace py = pybind11;            //! AUTO: "py" used throughout in code
#include "Autogenerated/CObjectJointPrismatic2D.h"

#include "Autogenerated/VisuObjectJointPrismatic2D.h"

//! AUTO: Parameters for class MainObjectJointPrismatic2DParameters
class MainObjectJointPrismatic2DParameters // AUTO: 
{
public: // AUTO: 
};


/** ***********************************************************************************************
* @class        MainObjectJointPrismatic2D
* @brief        A prismatic joint in 2D; allows the relative motion of two bodies, using two RigidMarkers; the vector \f$\tv_0\f$ = axisMarker0 is given in local coordinates of the first marker's (body) frame and defines the prismatic axis; the vector \f$\mathbf{n}_1\f$ = normalMarker1 is given in the second marker's (body) frame and is the normal vector to the prismatic axis; using the global position vector \f$\pv_0\f$ and rotation matrix \f$\Am_0\f$ of marker0 and the global position vector \f$\pv_1\f$ rotation matrix \f$\Am_1\f$ of marker1, the equations for the prismatic joint follow as \f[ (\pv_1-\pv_0)^T\cdot \Am_1 \cdot \mathbf{n}_1 = 0 \f]  \f[ (\Am_0 \cdot \tv_0)^T \cdot \Am_1 \cdot \mathbf{n}_1 = 0\f] The lagrange multipliers follow for these two equations \f$[\lambda_0,\lambda_1]\f$, in which \f$\lambda_0\f$ is the transverse force and \f$\lambda_1\f$ is the torque in the joint.
*
* @author       Gerstmayr Johannes
* @date         2019-07-01 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include <ostream>

#include "Utilities/ReleaseAssert.h"
#include "Utilities/BasicDefinitions.h"
#include "System/ItemIndices.h"

//! AUTO: MainObjectJointPrismatic2D
class MainObjectJointPrismatic2D: public MainObjectConnector // AUTO: 
{
protected: // AUTO: 
    CObjectJointPrismatic2D* cObjectJointPrismatic2D; //pointer to computational object (initialized in object factory) AUTO:
    VisualizationObjectJointPrismatic2D* visualizationObjectJointPrismatic2D; //pointer to computational object (initialized in object factory) AUTO:

public: // AUTO: 
    //! AUTO: default constructor with parameter initialization
    MainObjectJointPrismatic2D()
    {
        name = "";
    };

    // AUTO: access functions
    //! AUTO: Get pointer to computational class
    CObjectJointPrismatic2D* GetCObjectJointPrismatic2D() { return cObjectJointPrismatic2D; }
    //! AUTO: Get const pointer to computational class
    const CObjectJointPrismatic2D* GetCObjectJointPrismatic2D() const { return cObjectJointPrismatic2D; }
    //! AUTO: Set pointer to computational class (do this only in object factory!!!)
    void SetCObjectJointPrismatic2D(CObjectJointPrismatic2D* pCObjectJointPrismatic2D) { cObjectJointPrismatic2D = pCObjectJointPrismatic2D; }

    //! AUTO: Get pointer to visualization class
    VisualizationObjectJointPrismatic2D* GetVisualizationObjectJointPrismatic2D() { return visualizationObjectJointPrismatic2D; }
    //! AUTO: Get const pointer to visualization class
    const VisualizationObjectJointPrismatic2D* GetVisualizationObjectJointPrismatic2D() const { return visualizationObjectJointPrismatic2D; }
    //! AUTO: Set pointer to visualization class (do this only in object factory!!!)
    void SetVisualizationObjectJointPrismatic2D(VisualizationObjectJointPrismatic2D* pVisualizationObjectJointPrismatic2D) { visualizationObjectJointPrismatic2D = pVisualizationObjectJointPrismatic2D; }

    //! AUTO: Get const pointer to computational base class object
    virtual CObject* GetCObject() const { return cObjectJointPrismatic2D; }
    //! AUTO: Set pointer to computational base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetCObject(CObject* pCObject) { cObjectJointPrismatic2D = (CObjectJointPrismatic2D*)pCObject; }

    //! AUTO: Get const pointer to visualization base class object
    virtual VisualizationObject* GetVisualizationObject() const { return visualizationObjectJointPrismatic2D; }
    //! AUTO: Set pointer to visualization base class object (do this only in object factory; type is NOT CHECKED!!!)
    virtual void SetVisualizationObject(VisualizationObject* pVisualizationObject) { visualizationObjectJointPrismatic2D = (VisualizationObjectJointPrismatic2D*)pVisualizationObject; }

    //! AUTO:  Get type name of object (without keyword 'Object'...!); could also be realized via a string -> type conversion?
    virtual const char* GetTypeName() const override
    {
        return "JointPrismatic2D";
    }


    //! AUTO:  dictionary write access
    virtual void SetWithDictionary(const py::dict& d) override
    {
        cObjectJointPrismatic2D->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(d["markerNumbers"]); /* AUTO:  read out dictionary and cast to C++ type*/
        EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(d, "axisMarker0", cObjectJointPrismatic2D->GetParameters().axisMarker0); /*! AUTO:  safely cast to C++ type*/
        EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(d, "normalMarker1", cObjectJointPrismatic2D->GetParameters().normalMarker1); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "constrainRotation")) { cObjectJointPrismatic2D->GetParameters().constrainRotation = py::cast<bool>(d["constrainRotation"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "activeConnector")) { cObjectJointPrismatic2D->GetParameters().activeConnector = py::cast<bool>(d["activeConnector"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        EPyUtils::SetStringSafely(d, "name", name); /*! AUTO:  safely cast to C++ type*/
        if (EPyUtils::DictItemExists(d, "Vshow")) { visualizationObjectJointPrismatic2D->GetShow() = py::cast<bool>(d["Vshow"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "VdrawSize")) { visualizationObjectJointPrismatic2D->GetDrawSize() = py::cast<float>(d["VdrawSize"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        if (EPyUtils::DictItemExists(d, "Vcolor")) { visualizationObjectJointPrismatic2D->GetColor() = py::cast<std::vector<float>>(d["Vcolor"]); /* AUTO:  read out dictionary and cast to C++ type*/} 
        GetCObject()->ParametersHaveChanged();
    }

    //! AUTO:  dictionary read access
    virtual py::dict GetDictionary(bool addGraphicsData=false) const override
    {
        auto d = py::dict();
        d["objectType"] = (std::string)GetTypeName();
        d["markerNumbers"] = EPyUtils::GetArrayMarkerIndex(cObjectJointPrismatic2D->GetParameters().markerNumbers); //! AUTO: cast variables into python (not needed for standard types) 
        d["axisMarker0"] = EPyUtils::SlimVector2NumPy(cObjectJointPrismatic2D->GetParameters().axisMarker0); //! AUTO: cast variables into python (not needed for standard types) 
        d["normalMarker1"] = EPyUtils::SlimVector2NumPy(cObjectJointPrismatic2D->GetParameters().normalMarker1); //! AUTO: cast variables into python (not needed for standard types) 
        d["constrainRotation"] = (bool)cObjectJointPrismatic2D->GetParameters().constrainRotation; //! AUTO: cast variables into python (not needed for standard types) 
        d["activeConnector"] = (bool)cObjectJointPrismatic2D->GetParameters().activeConnector; //! AUTO: cast variables into python (not needed for standard types) 
        d["name"] = (std::string)name; //! AUTO: cast variables into python (not needed for standard types) 
        d["Vshow"] = (bool)visualizationObjectJointPrismatic2D->GetShow(); //! AUTO: cast variables into python (not needed for standard types) 
        d["VdrawSize"] = (float)visualizationObjectJointPrismatic2D->GetDrawSize(); //! AUTO: cast variables into python (not needed for standard types) 
        d["Vcolor"] = (std::vector<float>)visualizationObjectJointPrismatic2D->GetColor(); //! AUTO: cast variables into python (not needed for standard types) 
        return d; 
    }

    //! AUTO:  parameter read access
    virtual py::object GetParameter(const STDstring& parameterName) const override 
    {
        if (parameterName.compare("name") == 0) { return py::cast((std::string)name);} //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { return py::cast(EPyUtils::GetArrayMarkerIndex(cObjectJointPrismatic2D->GetParameters().markerNumbers));} //! AUTO: get parameter
        else if (parameterName.compare("axisMarker0") == 0) { return EPyUtils::SlimVector2NumPy(cObjectJointPrismatic2D->GetParameters().axisMarker0);} //! AUTO: get parameter
        else if (parameterName.compare("normalMarker1") == 0) { return EPyUtils::SlimVector2NumPy(cObjectJointPrismatic2D->GetParameters().normalMarker1);} //! AUTO: get parameter
        else if (parameterName.compare("constrainRotation") == 0) { return py::cast((bool)cObjectJointPrismatic2D->GetParameters().constrainRotation);} //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { return py::cast((bool)cObjectJointPrismatic2D->GetParameters().activeConnector);} //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { return py::cast((bool)visualizationObjectJointPrismatic2D->GetShow());} //! AUTO: get parameter
        else if (parameterName.compare("VdrawSize") == 0) { return py::cast((float)visualizationObjectJointPrismatic2D->GetDrawSize());} //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { return py::cast((std::vector<float>)visualizationObjectJointPrismatic2D->GetColor());} //! AUTO: get parameter
        else  {PyError(STDstring("ObjectJointPrismatic2D::GetParameter(...): illegal parameter name ")+parameterName+" cannot be read");} // AUTO: add warning for user
        return py::object();
    }


    //! AUTO:  parameter write access
    virtual void SetParameter(const STDstring& parameterName, const py::object& value) override 
    {
        if (parameterName.compare("name") == 0) { EPyUtils::SetStringSafely(value, name); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("markerNumbers") == 0) { cObjectJointPrismatic2D->GetParameters().markerNumbers = EPyUtils::GetArrayMarkerIndexSafely(value); /* AUTO:  read out dictionary, check if correct index used and store (converted) Index to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("axisMarker0") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(value, cObjectJointPrismatic2D->GetParameters().axisMarker0); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("normalMarker1") == 0) { EPyUtils::SetSlimVectorTemplateSafely<Real, 3>(value, cObjectJointPrismatic2D->GetParameters().normalMarker1); /*! AUTO:  safely cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("constrainRotation") == 0) { cObjectJointPrismatic2D->GetParameters().constrainRotation = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("activeConnector") == 0) { cObjectJointPrismatic2D->GetParameters().activeConnector = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vshow") == 0) { visualizationObjectJointPrismatic2D->GetShow() = py::cast<bool>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("VdrawSize") == 0) { visualizationObjectJointPrismatic2D->GetDrawSize() = py::cast<float>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else if (parameterName.compare("Vcolor") == 0) { visualizationObjectJointPrismatic2D->GetColor() = py::cast<std::vector<float>>(value); /* AUTO:  read out dictionary and cast to C++ type*/; } //! AUTO: get parameter
        else  {PyError(STDstring("ObjectJointPrismatic2D::SetParameter(...): illegal parameter name ")+parameterName+" cannot be modified");} // AUTO: add warning for user
        GetCObject()->ParametersHaveChanged();
    }

};



#endif //#ifdef include once...
