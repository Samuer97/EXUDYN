/** ***********************************************************************************************
* @brief        implementation for MarkerKinematicTreeRigid
*
* @author       Gerstmayr Johannes
* @date         2019-05-02 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include "Main/CSystemData.h"
#include "Autogenerated/CMarkerKinematicTreeRigid.h"
#include "Autogenerated/CObjectKinematicTree.h"

//ComputeTreeTransformations(ConfigurationType::Current, true, true, jointTransformationsTemp, jointVelocities, jointAccelerations);
//
//Vector3D pos3D;
//RigidBodyMath::T66toRotationTranslationInverse(jointTransformationsTemp[linkNumber], markerData.orientation, pos3D);
//
//markerData.position = pos3D + markerData.orientation * localPosition;
//
//Vector3D velLocal({ jointVelocities[linkNumber][3], jointVelocities[linkNumber][4], jointVelocities[linkNumber][5] });
//Vector3D angVelLocal({ jointVelocities[linkNumber][0], jointVelocities[linkNumber][1], jointVelocities[linkNumber][2] });
//
//markerData.velocity = markerData.orientation * (velLocal + angVelLocal.CrossProduct(localPosition));
//markerData.angularVelocityLocal = angVelLocal;

void CMarkerKinematicTreeRigid::GetPosition(const CSystemData& cSystemData, Vector3D& position, ConfigurationType configuration) const
{
	position = ((CObjectKinematicTree*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetPositionKinematicTree(parameters.localPosition,
		parameters.linkNumber, configuration);
	//WRONG: position = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetPosition(parameters.localPosition, configuration);
}

void CMarkerKinematicTreeRigid::GetVelocity(const CSystemData& cSystemData, Vector3D& velocity, ConfigurationType configuration) const
{
	velocity = ((CObjectKinematicTree*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetVelocityKinematicTree(parameters.localPosition,
		parameters.linkNumber, configuration);
	//WRONG: velocity = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetVelocity(parameters.localPosition, configuration);
}

void CMarkerKinematicTreeRigid::GetRotationMatrix(const CSystemData& cSystemData, Matrix3D& rotationMatrix, ConfigurationType configuration) const
{
	rotationMatrix = ((CObjectKinematicTree*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetRotationMatrixKinematicTree(parameters.linkNumber, configuration);
	//WRONG: rotationMatrix = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetRotationMatrix(parameters.localPosition, configuration);
}

void CMarkerKinematicTreeRigid::GetAngularVelocity(const CSystemData& cSystemData, Vector3D& angularVelocity, ConfigurationType configuration) const
{
	angularVelocity = ((CObjectKinematicTree*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetAngularVelocityKinematicTree(parameters.linkNumber, configuration);
	//WRONG: angularVelocity = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetAngularVelocity(parameters.localPosition, configuration);
}

void CMarkerKinematicTreeRigid::GetAngularVelocityLocal(const CSystemData& cSystemData, Vector3D& angularVelocity, ConfigurationType configuration) const
{
	angularVelocity = ((CObjectKinematicTree*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetAngularVelocityLocalKinematicTree(parameters.linkNumber, configuration);
	//WRONG: angularVelocity = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.objectNumber]))->GetAngularVelocityLocal(parameters.localPosition, configuration);
}

void CMarkerKinematicTreeRigid::ComputeMarkerData(const CSystemData& cSystemData, bool computeJacobian, MarkerData& markerData) const
{
	//types as well as linkNumber already checked in checkPreAssembleConsistency
	((CObjectKinematicTree*)(cSystemData.GetCObjects()[parameters.objectNumber]))->ComputeRigidBodyMarkerDataKT(parameters.localPosition, parameters.linkNumber,
		computeJacobian, markerData);
}

//! compute markerdata: fill in according data for derivative of jacobian times vector v, e.g.: d(J.T @ v)/dq
void CMarkerKinematicTreeRigid::ComputeMarkerDataJacobianDerivative(const CSystemData& cSystemData, const Vector6D& v6D, MarkerData& markerData) const
{
	CHECKandTHROWstring("CMarkerKinematicTreeRigid::ComputeMarkerDataJacobianDerivative: this function is needed by some connector, but is not implemented yet!");

	if (!EXUstd::IsOfType(cSystemData.GetCObjects()[parameters.objectNumber]->GetAccessFunctionTypes(), AccessFunctionType::JacobianTtimesVector_q))
	{
		CHECKandTHROWstring("CMarkerKinematicTreeRigid::ComputeMarkerDataJacobianDerivative: object " + EXUstd::ToString(parameters.objectNumber) + " does not provide a jacobian derivative; use different markers or set newton.numericalDifferentiation.forODE2connectors = True or use explicit integrator for contact");
	}

	//**********************************************************
	//==> just map this functio to a new KinematicTree function?
	//**********************************************************


	//v has always size 6, must be copied to markerData.jacobianDerivative
	markerData.jacobianDerivative.SetNumberOfRowsAndColumns(1, 6);
	for (Index i = 0; i < v6D.NumberOfItems(); i++)
	{
		markerData.jacobianDerivative(0, i) = v6D[i];
	}
	//==>markerData.jacobianDerivative is input to GetAccessFunctionBody(...)
	((CObjectBody*)(cSystemData.GetCObjects()[parameters.objectNumber]))->
		GetAccessFunctionBody((AccessFunctionType)((Index)AccessFunctionType::JacobianTtimesVector_q+ (Index)AccessFunctionType::KinematicTree), parameters.localPosition, markerData.jacobianDerivative);
}


