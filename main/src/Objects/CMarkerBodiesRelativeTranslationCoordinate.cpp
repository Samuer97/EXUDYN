/** ***********************************************************************************************
* @brief        implementation for MarkerBodiesRelativeTranslationCoordinate
*
* @author       Gerstmayr Johannes
* @date         2019-05-02 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include "Main/CSystemData.h"
#include "Autogenerated/CMarkerBodiesRelativeTranslationCoordinate.h"

//NOTE: position, velocity, etc. are based on body0 => this is done for consistency with other markers!
void CMarkerBodiesRelativeTranslationCoordinate::GetPosition(const CSystemData& cSystemData, Vector3D& position, ConfigurationType configuration) const
{
	position = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumbers[0]]))->GetPosition(parameters.localPosition0, configuration);
}

void CMarkerBodiesRelativeTranslationCoordinate::GetVelocity(const CSystemData& cSystemData, Vector3D& velocity, ConfigurationType configuration) const
{
	velocity = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumbers[0]]))->GetVelocity(parameters.localPosition0, configuration);
}

void CMarkerBodiesRelativeTranslationCoordinate::GetRotationMatrix(const CSystemData& cSystemData, Matrix3D& rotationMatrix, ConfigurationType configuration) const
{

	rotationMatrix = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumbers[0]]))->GetRotationMatrix(parameters.localPosition0, configuration);
}

void CMarkerBodiesRelativeTranslationCoordinate::GetAngularVelocity(const CSystemData& cSystemData, Vector3D& angularVelocity, ConfigurationType configuration) const
{
	angularVelocity = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumbers[0]]))->GetAngularVelocity(parameters.localPosition0, configuration);
}

void CMarkerBodiesRelativeTranslationCoordinate::GetAngularVelocityLocal(const CSystemData& cSystemData, Vector3D& angularVelocity, ConfigurationType configuration) const
{
	angularVelocity = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumbers[0]]))->GetAngularVelocityLocal(parameters.localPosition0, configuration);
}

void CMarkerBodiesRelativeTranslationCoordinate::ComputeMarkerData(const CSystemData& cSystemData, bool computeJacobian, MarkerData& markerData) const
{
	//compose jacobian from both bodies:
	//compute relative translation along coordinate
	//compose jacobian: initialize size = 1 x (nCoords0 + nCoords1)

	((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumbers[0]]))->ComputeRigidBodyMarkerData(parameters.localPosition0, computeJacobian, markerData);
	Vector3D position0 = markerData.position;
	Vector3D velocity0 = markerData.velocity;
	Vector3D globalAxis0 = markerData.orientation * parameters.axis0;
	Vector3D globalAxis0_t = markerData.orientation * (markerData.angularVelocityLocal.CrossProduct(parameters.axis0) );

	Index body0ODE2 = markerData.positionJacobian.NumberOfColumns();
	Index body1ODE2 = cSystemData.GetCObjects()[parameters.bodyNumbers[1]]->GetODE2Size();

	//Vector3D angularVelocityLocal0 = markerData.angularVelocityLocal;
	if (computeJacobian)
	{
		//for rotations: GetAccessFunctionBody(AccessFunctionType::AngularVelocity_qt, localPosition, markerData.rotationJacobian);

		markerData.jacobian.SetNumberOfRowsAndColumns(1, body0ODE2 + body1ODE2);
		markerData.jacobian.SetAll(0.);

		for (Index col = 0; col < body0ODE2; col++)
		{
			for (Index row = 0; row < EXUstd::dim3D; row++)
			{
				markerData.jacobian(0, col) -= markerData.positionJacobian(row, col) * globalAxis0[row];
			}
		}
	}
	((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumbers[1]]))->ComputeRigidBodyMarkerData(parameters.localPosition1, computeJacobian, markerData);

	if (computeJacobian)
	{
		for (Index col = 0; col < body1ODE2; col++)
		{
			for (Index row = 0; row < EXUstd::dim3D; row++)
			{
				markerData.jacobian(0, col + body0ODE2) += markerData.positionJacobian(row, col) * globalAxis0[row];
			}
		}
	}

	markerData.vectorValue.SetVector({ globalAxis0 * (markerData.position - position0) - parameters.offset }); //relative translation
	markerData.vectorValue_t.SetVector({ globalAxis0 * (markerData.velocity - velocity0) + globalAxis0_t * (markerData.position - position0) }); //relative velocity; second term=0 if pure translation along body0-fixed axis
	markerData.velocityAvailable = true; //should already be set
}

//! compute markerdata: fill in according data for derivative of jacobian times vector v, e.g.: d(J.T @ v)/dq
void CMarkerBodiesRelativeTranslationCoordinate::ComputeMarkerDataJacobianDerivative(const CSystemData& cSystemData, const Vector6D& v6D, MarkerData& markerData) const
{
	//should not be called, because flags not set
	CHECKandTHROWstring("CMarkerBodiesRelativeTranslationCoordinate::ComputeMarkerDataJacobianDerivative NOT implemented");

	//if (!EXUstd::IsOfType(cSystemData.GetCObjects()[parameters.bodyNumbers[0]]->GetAccessFunctionTypes(), AccessFunctionType::JacobianTtimesVector_q))
	//{
	//	CHECKandTHROWstring("CMarkerBodiesRelativeTranslationCoordinate::ComputeMarkerDataJacobianDerivative: body " + EXUstd::ToString(parameters.bodyNumbers[0]) + " does not provide a jacobian derivative; use different markers or set newton.numericalDifferentiation.forODE2connectors = True or use explicit integrator for contact");
	//}
	//if (!EXUstd::IsOfType(cSystemData.GetCObjects()[parameters.bodyNumbers[1]]->GetAccessFunctionTypes(), AccessFunctionType::JacobianTtimesVector_q))
	//{
	//	CHECKandTHROWstring("CMarkerBodiesRelativeTranslationCoordinate::ComputeMarkerDataJacobianDerivative: body " + EXUstd::ToString(parameters.bodyNumbers[1]) + " does not provide a jacobian derivative; use different markers or set newton.numericalDifferentiation.forODE2connectors = True or use explicit integrator for contact");
	//}

	////v has always size 6, must be copied to markerData.jacobianDerivative
	//markerData.jacobianDerivative.SetNumberOfRowsAndColumns(1, 6);
	//for (Index i = 0; i < v6D.NumberOfItems(); i++)
	//{
	//	markerData.jacobianDerivative(0, i) = v6D[i];
	//}
	////==>markerData.jacobianDerivative is input to GetAccessFunctionBody(...)
	//((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumbers[0]]))->
	//	GetAccessFunctionBody(AccessFunctionType::JacobianTtimesVector_q, parameters.localPosition0, markerData.jacobianDerivative);
}


