/** ***********************************************************************************************
* @brief        Implementation for CMarkerBodyCable2DCoordinates
*
* @author       Gerstmayr Johannes
* @date         2019-06-13 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See "LICENSE.txt" for more details.
* @note         Bug reports, support and further information:
                - email: johannes.gerstmayr@uibk.ac.at
                - weblink: https://github.com/jgerstmayr/EXUDYN
                
************************************************************************************************ */

#include "Main/CSystemData.h"
#include "Autogenerated/CMarkerBodyCable2DCoordinates.h"
#include "Autogenerated/CObjectANCFCable2D.h"


void CMarkerBodyCable2DCoordinates::GetPosition(const CSystemData& cSystemData, Vector3D& position, ConfigurationType configuration) const
{
	position = ((CObjectBody*)(cSystemData.GetCObjects()[parameters.bodyNumber]))->GetPosition(Vector3D({0.,0.,0.}), configuration);
}

//void CMarkerBodyCable2DCoordinates::GetVelocity(const CSystemData& cSystemData, Vector3D& velocity, ConfigurationType configuration) const
//{
//	velocity = ((CNodeODE2*)(cSystemData.GetCNodes()[parameters.nodeNumber]))->GetVelocity(configuration);
//}

//very specific marker for Cable2D shape; this is not the usual way to compute markerdata!
void CMarkerBodyCable2DCoordinates::ComputeMarkerData(const CSystemData& cSystemData, bool computeJacobian, MarkerData& markerData) const
{
	//maxNumberOfSegments ... used for ConstSizeVectors

	//the markerdata consists of the shape functions SV(pos_i)*q_Cable, in which pos_i is evaluated at (numberOfSegments+1) equidistant points 
	CObjectANCFCable2DBase* cable = ((CObjectANCFCable2DBase*)(cSystemData.GetCObjects()[parameters.bodyNumber]));
	Index nCoordinatesCable = cable->GetODE2Size();
	const Index ns = 4;   //number of shape functions


	ConstSizeVector<ns> q0DisplRef;	//coordinates (displacement+reference) node 0
	ConstSizeVector<ns> q1DisplRef; //coordinates (displacement+reference) node 1

	markerData.GetHelper() = cable->GetLength(); //OLD: 2020-03-09; cable->GetParameters().physicsLength; //needed for shape function computation; WORKAROUND

	markerData.vectorValue.SetNumberOfItems(nCoordinatesCable); //stores 8 cable coordinates
	markerData.vectorValue_t.SetNumberOfItems(nCoordinatesCable); //stores 8 cable coordinates velocities

	cable->ComputeCurrentNodeCoordinates(q0DisplRef, q1DisplRef);
	markerData.vectorValue.CopyFrom(q0DisplRef, 0, 0, ns);
	markerData.vectorValue.CopyFrom(q1DisplRef, 0, ns, ns);

	cable->ComputeCurrentNodeVelocities(q0DisplRef, q1DisplRef);
	markerData.vectorValue_t.CopyFrom(q0DisplRef, 0, 0, ns);
	markerData.vectorValue_t.CopyFrom(q1DisplRef, 0, ns, ns);
	markerData.velocityAvailable = true;

	if (computeJacobian)
	{
		//markerData.jacobian.SetNumberOfRowsAndColumns(nCoordinatesCable, nCoordinatesCable); //stores the shape functions; very specific for ANCF cable
		//the following might not be necessary as the SlidingJoint2D anyway needs to communicate with the ANCF cable
		markerData.jacobian.SetScalarMatrix(nCoordinatesCable, 1.); //8 forces act on 8 coordinates ==> could be made more efficient!!
	}


}

//! compute markerdata: fill in according data for derivative of jacobian times vector v, e.g.: d(Jpos.T @ v)/dq
void CMarkerBodyCable2DCoordinates::ComputeMarkerDataJacobianDerivative(const CSystemData& cSystemData, const Vector6D& v6D, MarkerData& markerData) const
{
	markerData.jacobianDerivative.SetNumberOfRowsAndColumns(0, 0); //signals that there is no dependency!
}

