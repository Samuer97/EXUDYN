/** ***********************************************************************************************
* @brief		This is the new solver structure
* @details		Details:
* 				- base classes for computational solver (as compared to main solver, which interacts with Python, etc.)
*               - contains basic solver structures (Evaluation functions, jacobians, initialization, link to linear solvers, 
*				  solver statistics and output, solution files, Newton, nonlinear iteration, ...)
*
*				Solver process (what happens in the SolveSystem(...) function)
*				1) solver-specific tasks (e.g. initialize specific parameters), set solverName
*				2) InitializeSolver(): initialize files, solver data, initial values, ...
*				3) specific output to solver file (needs initialization to start output)
*				4) SolveSteps(...): iteratively solve
*				4) FinalizeSolver(...): close files, etc.
*
* @author		Gerstmayr Johannes
* @date			2019-12-11 (generated)
*
* @copyright    This file is part of Exudyn. Exudyn is free software: you can redistribute it and/or modify it under the terms of the Exudyn license. See 'LICENSE.txt' for more details.
* @note			Bug reports, support and further information:
* 				- email: johannes.gerstmayr@uibk.ac.at
* 				- weblink: https://github.com/jgerstmayr/EXUDYN
* 				
*
************************************************************************************************ */
#ifndef CSOLVER__H
#define CSOLVER__H

//#ifdef USE_OPENMP //needs omp.h, not available on MacOS
//    #include <omp.h> //for num_threads
//#endif
#include "Autogenerated/CSolverStructures.h"

#ifdef __FAST_EXUDYN_LINALG
#define STARTTIMER(_Expression) 
#define STOPTIMER(_Expression) 
#else
#define STARTTIMER(_Expression) (timer.StartTimer(_Expression))
#define STOPTIMER(_Expression) (timer.StopTimer(_Expression))
#endif

#ifdef __FAST_EXUDYN_LINALG
#define Verbose(_Expression1, _Expression2) 
#define IsVerbose(_Expression1) (false)
#else
#define Verbose(_Expression1, _Expression2) (VerboseWrite(_Expression1, _Expression2))
#define IsVerbose(_Expression1) IsVerboseCheck(_Expression1)
#endif

//in future: SolveSystem gets a pointer to CSystemSolverInterface, which includes only functions related 
//to solver, fully decouples from CSystem and enables easier development of future solvers
namespace EXUstd
{
	//! initialize global parallelization parameters
	inline void AssignParallelizationParameters(const SimulationSettings& simulationSettings)
	{

		//Eigen::initParallel(); //use this in case, that omp is used in other parts of the code

		int nthreads = (int)simulationSettings.parallel.numberOfThreads; //activated /Zc:twoPhase- in compiler options to suppress warning
		if (nthreads < 1 || nthreads > 100) { PyError("simulationSettings.numberOfThreads is out of range(1..100)!"); return; }

//#ifdef USE_OPENMP //needs omp.h, not available on MacOS
//		if (nthreads != omp_get_num_threads())
//		{
//			omp_set_num_threads(nthreads);
//
//#ifdef USE_EIGEN
//			Eigen::setNbThreads(nthreads); //not used for now, as Eigen SparseLU is not parallelized
//#endif
//		}
//#endif
	}
}

#endif
