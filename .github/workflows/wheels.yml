name: Wheels

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  buildUbuntu:
    name: Build ${{ matrix.os }} manylinux wheels
    runs-on: ${{ matrix.os }}
    continue-on-error: true #will continue, such that other wheels are built
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['10']
        # python-version: ['8','9','10','11','12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: 3.${{ matrix.python-version }}

      #https://github.com/RalfG/python-wheels-manylinux-build/blob/master/full_workflow_example.yml
      - uses: RalfG/python-wheels-manylinux-build@v0.7.1-manylinux2014_x86_64
        with:
          python-versions: cp3${{ matrix.python-version }}-cp3${{ matrix.python-version }}
          build-requirements: 'numpy' #only test requires matplotlib scipy
          #not required: freeglut-devel libX11-devel
          system-packages: 'mesa-libGL-devel mesa-libGLU-devel glfw glfw-devel freeglut-devel libX11-devel'
          pre-build-command: ''
          package-path: 'main'
          pip-wheel-args: '-w ./dist --no-deps'

      - uses: actions/upload-artifact@v4
        with:
          name: uploaddata-wheels-manylinux-x86-cp3${{ matrix.python-version }}-cp3${{ matrix.python-version }}
          path: ./main/dist/*manylinux2014_x86_64.whl

      - name: Install built wheels for test suite
        run: python -m pip install main/dist/*manylinux2014_x86_64.whl
        shell: bash

      - name: Change directory and run test suite
        run: |
          python -m pip install matplotlib scipy
          cd main/pythonDev/TestModels
          python runTestSuite.py -quiet -local
        shell: bash

      - name: Upload tests
        uses: actions/upload-artifact@v4 #artifacts are stored locally!
        with:
          name: uploaddata-tests-${{ matrix.os }}-manylinux-x86--3${{ matrix.python-version }}
          path: main/pythonDev/TestModels/testSuiteLog_V*.txt

  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #REPLACED BY universal2
  # buildMacOSarm64: #not needed with universal2 files for macos
    # name: Build wheels on ${{ matrix.os }}
    # runs-on: ${{ matrix.os }}
    # strategy:
      # matrix:
        # os: [macos-latest]
        # python-version: ['10', '11']
        # # python-version: ['8', '9', '10', '11', '12'] 
    # steps:
    # - uses: actions/checkout@v4

    # - name: Set up Python 3.${{ matrix.python-version }}
      # uses: actions/setup-python@v4
      # with:
        # python-version: 3.${{ matrix.python-version }}
        # architecture: "arm64"

    # - name: Install cibuildwheel
      # run: python -m pip install cibuildwheel

    # - name: Build wheels
      # run: python -m cibuildwheel --output-dir wheelstore
      # env:
        # CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
        # CIBW_ARCHS_MACOS: "arm64"
      # working-directory: main  #specify the local dir where setup.py is located

    # - uses: actions/upload-artifact@v4
      # with:
        # name: uploaddata-wheels-${{ matrix.os }}-arm64-python-3${{ matrix.python-version }}
        # path: main/wheelstore/*.whl
  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  buildWindowsMacOS:
    name: Build ${{ matrix.os }} wheels
    runs-on: ${{ matrix.os }}
    continue-on-error: true #will continue, such that other wheels are built
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest] #ubuntu with aarch64 seems to need emulation: see QEMU / setup-qemu-action
        # os: [windows-latest, macos-latest, ubuntu-latest] #ubuntu with aarch64 seems to need emulation: see QEMU / setup-qemu-action
        python-version: ['10']
        # python-version: ['8', '9', '10', '11', '12'] 
        exclude:
          - os: macos-latest
            python-version: "8" #this version fails during testing / installation of exudyn universal2 wheel
          # - os: macos-latest
            # python-version: "3.9"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: 3.${{ matrix.python-version }}

    - name: Check if QEMU is needed for Linux
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel

    - name: Build wheels
      run: python -m cibuildwheel --output-dir ${{ github.workspace }}/wheelstore main #main is the project folder; works on all platforms
      env:
        CIBW_BEFORE_BUILD_LINUX: "ls -la ${{ github.workspace }} && yum install -y epel-release && yum update -y && yum install -y glfw-devel libX11-devel"
        # CIBW_BEFORE_BUILD_LINUX: "yum install -y epel-release && yum update -y && yum install -y glfw-devel libX11-devel"
        CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
        CIBW_SKIP: "*-win32 *musllinux*"   #skip building 32-bit (win32) wheels
        CIBW_ARCHS_MACOS: "universal2" #for arm64 and x86
        CIBW_ARCHS_LINUX: "aarch64"    #for raspberry pi, etc.

        #CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=10.9"  # does not change version
        #{project} folder is in Exudyn root, not in main!
        CIBW_TEST_COMMAND_WINDOWS: "cd /d {project}/main/pythonDev/TestModels && python runTestSuite.py -quiet -local"
        CIBW_TEST_COMMAND_LINUX: "cd {project}/main/pythonDev/TestModels && python runTestSuite.py -quiet -local && cp {project}/main/pythonDev/TestModels/testSuiteLog_V* ${{ github.workspace }}/"
        # cp {project}/main/pythonDev/TestModels/testSuiteLog_V* {package}/
        CIBW_TEST_COMMAND_MACOS: "cd {project}/main/pythonDev/TestModels && python runTestSuite.py -quiet -local"
        CIBW_TEST_REQUIRES: matplotlib scipy

    # - name: check testsuite files
      # run: |
        # ls -la main
        # echo "*** TestModels"
        # ls -la main/pythonDev/TestModels/
        # echo "*** Workspace"
        # ls -la ${{ github.workspace }}
        
    # - uses: actions/upload-artifact@v4 #artifacts are stored locally!
      # with:
        # name: uploaddata-wheelsAndTests-${{ matrix.os }}-python-3${{ matrix.python-version }}
        # path: | #upload wheels and test suite logs from different places (merged into 1 artifact)
          # main/wheelstore/*.whl
          # main/pythonDev/TestModels/testSuiteLog_V*.txt
          # ${{ github.workspace }}/testSuiteLog_V*.txt

    # - uses: actions/upload-artifact@v4 #artifacts are stored locally!
      # with:
        # name: uploaddata-tests-${{ matrix.os }}-python-3${{ matrix.python-version }}
        # path: main/pythonDev/TestModels/testSuiteLog_V*.txt

    # - name: Upload tests
      # uses: actions/upload-artifact@v4 #artifacts are stored locally!
      # with:
        # name: uploaddata-wheels-${{ matrix.os }}-python-3${{ matrix.python-version }}
        # path: main/wheelstore/*.whl

    - uses: actions/upload-artifact@v4 #artifacts are stored locally!
      with:
        name: uploaddata-wheels-${{ matrix.os }}-python-3${{ matrix.python-version }}
        path: main/wheelstore/*.whl

    - name: Upload tests
      uses: actions/upload-artifact@v4 #artifacts are stored locally!
      with:
        name: uploaddata-tests-${{ matrix.os }}-3${{ matrix.python-version }}
        path: | #upload wheels and test suite logs from different places (merged into 1 artifact)
          main/pythonDev/TestModels/testSuiteLog_V*.txt
          ${{ github.workspace }}/testSuiteLog_V*.txt
        # path: main/pythonDev/TestModels/testSuiteLog_V*.txt


  mergeArtifacts: #merge artifacts into one directory and zip it
    needs: [buildWindowsMacOS, buildUbuntu] #buildMacOSarm64, 
    runs-on: ubuntu-latest
    steps:
    - name: Merge All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: merged-artifacts
        pattern: 'uploaddata-*'
        merge-multiple: true

    - name: Zip Merged Artifacts
      run: zip -r merged-wheels.zip merged-artifacts

    - name: Upload Merged ZIP Artifact
      uses: actions/upload-artifact@v4
      with:
        name: merged-wheels
        path: merged-wheels.zip
