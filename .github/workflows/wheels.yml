name: Wheels

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  # buildUbuntu:
    # name: Build wheels on ${{ matrix.os }}
    # runs-on: ${{ matrix.os }}
    # strategy:
      # matrix:
        # os: [ubuntu-latest]
        # python-version: ['cp38-cp38', 'cp39-cp39', 'cp310-cp310', 'cp311-cp311', 'cp312-cp312']

    # steps:
      # - uses: actions/checkout@v4

      # - name: Set up Python ${{ matrix.python-version }}
        # uses: actions/setup-python@v4
        # with:
          # python-version: '3.10'

      # #https://github.com/RalfG/python-wheels-manylinux-build/blob/master/full_workflow_example.yml
      # - uses: RalfG/python-wheels-manylinux-build@v0.7.1-manylinux2014_x86_64
        # with:
          # python-versions: ${{ matrix.python-version }} #'cp310-cp310'
          # build-requirements: 'numpy'
          # #not required: freeglut-devel libX11-devel
          # system-packages: 'mesa-libGL-devel mesa-libGLU-devel glfw glfw-devel freeglut-devel libX11-devel'
          # pre-build-command: ''
          # package-path: 'main'
          # pip-wheel-args: '-w ./dist --no-deps'

      # - uses: actions/upload-artifact@v4
        # with:
          # name: uploaddata-wheels-ubuntu-python-${{ matrix.python-version }}
          # path: ./main/dist/*manylinux2014_x86_64.whl

  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  #REPLACED BY universal2
  # buildMacOSarm64: #not needed with universal2 files for macos
    # name: Build wheels on ${{ matrix.os }}
    # runs-on: ${{ matrix.os }}
    # strategy:
      # matrix:
        # os: [macos-latest]
        # python-version: ['10', '11']
        # # python-version: ['8', '9', '10', '11', '12'] 
    # steps:
    # - uses: actions/checkout@v4

    # - name: Set up Python 3.${{ matrix.python-version }}
      # uses: actions/setup-python@v4
      # with:
        # python-version: 3.${{ matrix.python-version }}
        # architecture: "arm64"

    # - name: Install cibuildwheel
      # run: python -m pip install cibuildwheel

    # - name: Build wheels
      # run: python -m cibuildwheel --output-dir .wheels
      # env:
        # CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
        # CIBW_ARCHS_MACOS: "arm64"
      # working-directory: main  #specify the local dir where setup.py is located

    # - uses: actions/upload-artifact@v4
      # with:
        # name: uploaddata-wheels-${{ matrix.os }}-arm64-python-3${{ matrix.python-version }}
        # path: main/.wheels/*.whl
  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  buildWindowsMacOS:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest] #, ubuntu-latest]
        # python-version: ['10', '11'] 
        python-version: ['8', '9'] #, '10', '11', '12'] 
        # exclude:
          # - os: macos-latest
            # python-version: "3.8"
          # - os: macos-latest
            # python-version: "3.9"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: 3.${{ matrix.python-version }}

    - name: Install cibuildwheel
      run: python -m pip install cibuildwheel

    - name: Build wheels
      run: python -m cibuildwheel --output-dir .wheels
      env:
        CIBW_BUILD: "cp3${{ matrix.python-version }}-*"
        CIBW_SKIP: "*-win32"   #skip building 32-bit (win32) wheels
        CIBW_ARCHS_MACOS: "universal2" #for arm64 and x86
        CIBW_ARCHS_LINUX: "aarch64"    #for raspberry pi, etc.
        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014 #quay.io/pypa/manylinux2014_aarch64:latest
        CIBW_ENVIRONMENT_MACOS: "MACOSX_DEPLOYMENT_TARGET=10.9"  # does not change version
        CIBW_TEST_COMMAND: "cd {project}/pythonDev/TestModels && python runTestSuite.py -quiet -local"
      working-directory: main  #specify the local dir where setup.py is located

    - uses: actions/upload-artifact@v4 #artifacts are stored locally!
      with:
        name: uploaddata-wheels-${{ matrix.os }}-python-3${{ matrix.python-version }}
        path: main/.wheels/*.whl

    - name: Upload tests
      uses: actions/upload-artifact@v4 #artifacts are stored locally!
      with:
        name: uploaddata-tests-${{ matrix.os }}-python-3${{ matrix.python-version }}
        path: main/pythonDev/TestModels/testSuiteLog_V*.txt

  # mergeArtifacts: #merge artifacts into one directory and zip it
    # needs: [buildWindowsMacOS, buildUbuntu] #buildMacOSarm64, 
    # runs-on: ubuntu-latest
    # steps:
    # - name: Merge All Artifacts
      # uses: actions/download-artifact@v4
      # with:
        # path: merged-artifacts
        # pattern: 'uploaddata-*'
        # merge-multiple: true

    # - name: Zip Merged Artifacts
      # run: zip -r merged-wheels.zip merged-artifacts

    # - name: Upload Merged ZIP Artifact
      # uses: actions/upload-artifact@v4
      # with:
        # name: merged-wheels
        # path: merged-wheels.zip
