#+++++++++++++++++++++++++++++++++++++++++++
#WINDOWS SUBSYSTEM FOR LINUX WSL
#information on installation of EXUDYN on WSL2
#WSL2 runs on Windows 10 
#author: Johannes Gerstmayr
#date: 20.11.2020
#update: 31.12.2022
#+++++++++++++++++++++++++++++++++++++++++++

#location of WSL:
C:\Users\<username>\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc



#graphics with updated wslg:
#kind of works; should work better with Windows11
#install GPU drivers:
#  https://learn.microsoft.com/en-us/windows/wsl/tutorials/gui-apps
#wsl --update
#==>directly should allows graphics on windows

#graphics (OpenGL, regular windows)
#modify your ~/.bashrc:
export DISPLAY=:0 # in WSL 1
export LIBGL_ALWAYS_INDIRECT=0 #software emulated graphics
#LIBGL_ALWAYS_INDIRECT=1 does not seem to work (but would be faster ...!)

#FONT SIZE:
modify .wslgconfig:
#WSLg configuration:
#Various debugging options for WSLg can be configured by editing the file c:\ProgramData\Microsoft\WSL\.wslgconfig (for inbox WSL),
#  or c:\Users\[your user name]\.wslgconfig
#https://github.com/microsoft/wslg/wiki/WSLg-Configuration-Options-for-Debugging

.wslgconfig should contain (factor 150 is 1.5); this scales everything (also opengl window):
[system-distro-env]
WESTON_RDP_HI_DPI_SCALING=true
WESTON_RDP_FRACTIONAL_HI_DPI_SCALING=false
WESTON_RDP_DEBUG_DESKTOP_SCALING_FACTOR=150


works?: https://github.com/microsoft/WSL/discussions/9446
#check:
C:\ProgramData\Microsoft\WSL\.wslgconfig
[system-distro-env]
WESTON_RDP_DEBUG_DESKTOP_SCALING_FACTOR=200
https://github.com/microsoft/wslg/issues/590
#mostly doe not work
export GDK_SCALE=2
export GDK_DPI_SCALE=0.75



#installation of WSL2: follow:
https://docs.microsoft.com/en-us/windows/wsl/install-win10#install-windows-subsystem-for-linux

#install WSL2:
#in powershell (admin) run:
dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart

#update windows if WSL2 not available yet (requires at least Windows 10 Version 1903
==> go to settings, Windows Update and perform update
==> this won't work usually without computer restart!

#enable Virtual Machine feature:
dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart

#download WSL2 Linux kernel update
https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi

#for wsl2 need to go to Windows->Apps and Features->Programs and features->turn on/off features
#->Activate Hyper-V (includes sub-checks)







#++++++++++++++++++++++++++++++++++++++++++++++++++
#everything below here is definitely for older WSL:
#++++++++++++++++++++++++++++++++++++++++++++++++++


#set WSL2 as default
wsl --set-default-version 2

#install docker (for nvidia/cuda), install docker for windows:
https://docs.docker.com/desktop/windows/wsl/
==> this integrates functionality via wsl2

#go to Microsoft Store:
https://aka.ms/wslstore
==>search e.g. for Ubuntu18.04 and download "Get"
==>Press "Start" in store, this will run the installation

#without Microsoft Store, you can do this manually:
https://docs.microsoft.com/en-us/windows/wsl/install-manual

#add local user to docker users (under Windows user management) to docker-users
==>this will not require admin rights for further operations

#start Windows->Docker and configure:
#


#install Ubuntu18
enter user name
enter password


#+++++++++++++
#find something in all directories:
find / -iname 'libmpi.so.*'

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#CONDA WITH WSL
#install miniconda (similar file):
download from: https://docs.conda.io/en/latest/miniconda.html#linux-installers
install guide: https://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html 
bash Miniconda3-latest-Linux-x86_64.sh

#test:
conda list

conda update conda

=> HTTP error with Anaconda ...
=> restart wsl (exit() first):
wsl --shutdown

=> now conda works!

conda create -n venvP36 python=3.6 scipy matplotlib -y
conda create -n venvP37 python=3.7 scipy matplotlib tqdm -y
conda create -n venvP38 python=3.8 scipy matplotlib tqdm -y
conda create -n venvP39 python=3.9 scipy matplotlib tqdm -y
conda create -n venvP310 python=3.10 scipy matplotlib tqdm -y
#not yet available: conda create -n venvP311 python=3.11 scipy matplotlib tqdm -y
python 3.11 workaround (graphics does not work with wsl - even if it works with venvP39 !):
conda create -n venvP311
conda install -c conda-forge python=3.11 -y
conda install tqdm -y
conda install -c conda-forge numpy -y
conda install -c conda-forge matplotlib -y
#install windows terminal
https://docs.microsoft.com/en-us/windows/terminal/get-started
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#install mpi / mpi4py:
sudo apt-get update
sudo apt install openmpi-bin libopenmpi-dev
#seems only to work without conda environments on base Python 3.9? (definitely does not work in venvP39)
python -m pip install mpi4py => does not work in venvP39

#works in base Python 3.9 (and possibly in venvP38):
conda install mpi4py
#test:
mpiexec -n 5 python -c "print('hello world')"
mpiexec -n 5 python -m mpi4py.bench helloworld
#in Examples folder (using 1.6.119):
mpiexec -np 14 python3 -m mpi4py.futures mpi4pyExample.py
#in Experimental folder (using 1.6.119):
mpiexec -np 28 python3 -m mpi4py.futures mpi4pyTest.py

#pip install does not (always?) work on WSL

#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


#++++++++++++++++++++++++++++++
#using several Ubuntu versions:
#you can install several linux distributions at the same time
#show the list of distributions:
wsl --list
#set active / default configuration if you enter wsl in powershell:
wsl --setdefault Ubuntu-18.04

#run unix command from powershell, runs in local (windows) directory:
wsl python3 test.py

#+++++++++++++++++++++++++++
#PATH (set always when logged in):
#extend  ~/.bashrc e.g. with  nano ~/.bashrc and at at the end:
export PATH="$PATH:~johannes/additionalPath"
#+press CTRL O, ENTER, CTRL X

#+++++++++++++++++++++++++++
mount windows network drive:
sudo mount -t drvfs L: /mnt/l

#+++++++++++++++++++++++++++
#build linux wheel with WSL:
sudo python3 setup.py bdist_wheel
#==> if [Errno 13] Permission denied: 'build/bdist.linux-x86_64/wheel/exudyn... occures:
#==> go to build folder, right mouse click, security, change authentication "full access" for authorized users
#workaround for file permissions (put into ~/.bashrc ?):
# sudo umount /mnt/c && sudo mount -t drvfs C: /mnt/c -o metadata

#using setup tools with WSL:
#there are problems with file access
==> go right click on root folder->properties->security
for Authenticated Users->Edit-> set "Full control"

#+++++++++++++++++++++++++++++++++++++++
#wsl and Ubuntu18.04
#install https://sourceforge.net/projects/vcxsrv/
#add to export to (last line of) .bashrc
nano ~/.bashrc

export DISPLAY=:0

#start VcXsrv under Windows Start and configure:
#disable firewall (first two options, leave public deactivated)
[X] Disable access control
==>everything else left as default

==> this already is sufficient to run xserver

# *** trouble shooting ***
#sometimes, the display may be linked to some 192.168.178.x:0
#check with:
echo $DISPLAY
#set back to original:
export DISPLAY=:0
==> this gives back functionality!

==> Firewall settings may be required:
Control Panel > System and Security > Windows Defender Firewall > Advanced Settings > Inbound Rules > New Rule...
> Program > %ProgramFiles%\VcXsrv\vcxsrv.exe > Allow the connection

if DISPLAY 0 does not work, try ip address found in  ipconfig.exe
==> check different Ethernet adapters!

==> check: 
https://github.com/microsoft/WSL/issues/4793

==> one way to work with specific window (on some computes may require to set DISPLAY to correct IP address):
& 'C:\Program Files\VcXsrv\vcxsrv.exe' -ac
==> get IP address with: cat /etc/resolv.conf

install nedit (to test xserver):
sudo apt-get install nedit

==> start exudyn example (works also for tkinter!)





#+++++++++++++++++++++++++++++++++++++++
#OLDER TRIALS for xserver (did not work):
#xserver for WSL (see also https://skeptric.com/wsl2-xserver/):
#first allow xserver to pass local firewall (even everything runs on local PC...):
->open Firewall & Network Protection
->Advanced settings
->right click on Inbound rules->New Rule
->select Rule type=port -> continue
->TCP + specific local ports 6000
->allow connection, apply to all profiles -> enter some name WSLX ->Finish
->list of inbound rules -> right click on WSLX -> Properties 
->Scope -> Remote IP Address add "172.16.0.0/12" under port 
->add gain "192.168.0.0/16"

#download VcXsrv Windows X Server:
https://sourceforge.net/projects/vcxsrv/

==> try to install e.g. gedit, which should run out of the box
#UBUNTU20.04:
#DISPLAY does not connect automatically => add the following to ~/.bashrc:
#suggested workaround (did not work so far):
export DISPLAY=:0 # in WSL 1
export DISPLAY=$(awk '/nameserver / {print $2; exit}' /etc/resolv.conf 2>/dev/null):0 # in WSL 2
export LIBGL_ALWAYS_INDIRECT=1


#optinoally: add this to properties->shorcut->target
"C:\Program Files\VcXsrv\vcxsrv.exe" :0 -ac -terminate -lesspointer -multiwindow -clipboard -wgl -dpi auto

#check for advanced wsl options:
https://www.sitepoint.com/wsl2/




